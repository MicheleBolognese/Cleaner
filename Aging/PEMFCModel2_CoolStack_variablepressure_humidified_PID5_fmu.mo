within Aging;
model PEMFCModel2_CoolStack_variablepressure_humidified_PID5_fmu
    FmuWrapper obj = FmuWrapper(Modelica.Utilities.Files.loadResource("modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e")) annotation(__Modelon(internal(LoadDirectories = true)));
    parameter Real I(unit = "A") = 180.0 "Load current at constant load";
    parameter Real T_an_in(min = 0.0,unit = "K") = 343.15 "Anodic gas inlet temperature";
    parameter Real T_cath_in(min = 0.0,unit = "K") = 343.15 "Cathodic gas inlet temperature";
    parameter Real T_dew_an(min = 0.0,unit = "K") = 325.65 "Anodic gas dew point";
    parameter Real T_dew_cath(min = 0.0,unit = "K") = 325.65 "Cathodic gas dew point";
    parameter Real T_water_in(min = 0.0,unit = "K") = 338.15 "Water inlet temperature";
    record fmumodelica_rec_V_cell
        Real showNumber;
        parameter Integer significantDigits "Number of significant digits to be shown";
    end fmumodelica_rec_V_cell;
    fmumodelica_rec_V_cell V_cell(significantDigits(min = 1) = 3) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_V_cell_exp
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_V_cell_exp;
    fmumodelica_rec_V_cell_exp V_cell_exp(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,0.969},{225.0,0.879},{450.0,0.844},{675.0,0.809},{900.0,0.793},{1125.0,0.791},{1350.0,0.777},{1575.0,0.767},{1800.0,0.762},{2025.0,0.742},{2250.0,0.734},{2475.0,0.718},{2700.0,0.708},{2925.0,0.703},{3150.0,0.687},{3375.0,0.672},{3600.0,0.656}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    parameter Real V_flow_an(unit = "NLPM") = 73.974 "Anodic dry gas inlet volumetric flow rate at constant load";
    parameter Real V_flow_cath(unit = "NLPM") = 148.076 "Cathodic dry gas inlet volumetric flow rate at constant load";
    parameter Real V_flow_water(unit = "LPM") = 4.95 "Water inlet volumetric flow rate at constant load";
    parameter Real V_flow_water_max(unit = "LPM") = 4.95 "Maximum value of water inlet volumetric flow rate at variable load";
    parameter Real V_flow_water_min(unit = "LPM") = 4.95 "Minimum value of water inlet volumetric flow rate at variable load";
    Modelica.Blocks.Interfaces.RealInput c1(start = 0.0) annotation(Placement(transformation(extent = {{-140,80.0},{-100,120.0}},rotation = 0.0,origin = {0.0,0.0})));
    constant Boolean constant_current(start = false) = false "If true, the load current is constant";
    record fmumodelica_rec_coolStack
        parameter Real A_anode "Cross section area of single anode channel";
        constant Real A_cathode "Cross section area of single cathode channel";
        parameter Real A_cell "Cell active area";
        parameter Real A_cooling "Cross-section area of single cooling channel)";
        parameter Real A_crosssection_cell "Cross section area of a single cell";
        parameter Real A_heat_anode "Heat transfer area of single anode channel";
        constant Real A_heat_cathode "Heat transfer area of single cathode channel";
        parameter Real A_heat_cooling "Heat transfer area of single cooling channel";
        parameter Real CF_AnodeSideHeatTransfer "Calibration factor for heat transfer in anode channel";
        parameter Real CF_AnodeSidePressureLoss "Calibration factor for pressure drop in anode channel";
        parameter Real CF_CathodeSideHeatTransfer "Calibration factor for heat transfer in cathode channel";
        parameter Real CF_CathodeSidePressureLoss "Calibration factor for pressure drop in cathode channel";
        parameter Real CF_CoolingHeatTransfer "Calibration factor for heat transfer in cooling pipe";
        parameter Real CF_CoolingPressureLoss "Calibration factor for pressure drop in cooling pipe";
        parameter Real C_anode "Circumference of single anode channel";
        constant Real C_cathode "Circumference of single cathode channel";
        parameter Real C_cooling "Circumference of single cooling channel";
        parameter Real D_anode "Diameter of single anode channel";
        constant Real D_cathode "Diameter of single cathode channel";
        parameter Real D_cooling "Diameter of single cooling channel";
        parameter Real Dhyd_anode "Hydraulic diameter of single channel";
        constant Real Dhyd_cathode "Hydraulic diameter of single cathode channel";
        parameter Real Dhyd_cooling "Hydraulic diameter of single cooling channel)";
        parameter Real E0_ref "Single cell Nernst's potential at standard conditions";
        parameter Real EW_m "Membrane equivalent weight";
        parameter Real L_anode "Length of anode channel";
        constant Real L_cathode "Length of cathode channel";
        parameter Real L_cooling "Cooling channel length";
        parameter Real M_stack "Stack mass";
        constant Integer N "Number of along-the-channel discretization nodes";
        parameter Real T_start_anode[6] "Initial temperature in control volumes and inlet port at anode";
        parameter Real T_start_cathode[6] "Initial temperature in control volumes and inlet port at cathode";
        parameter Real T_start_cooling[6] "Initial temperature in  control volumes and inlet port";
        parameter Real T_start_in_anode "Initial temperature at anode channel inlet";
        parameter Real T_start_in_cathode "Initial temperature at cathode channel inlet";
        parameter Real T_start_in_cooling "Initial inlet temperature";
        parameter Real T_start_out_anode "Initial temperature at anode channel outlet";
        parameter Real T_start_out_cathode "Initial temperature at cathode channel outlet";
        parameter Real T_start_out_cooling "Initial outlet temperature";
        parameter Real V_anode "Total volume of anode channels";
        constant Real V_cathode "Total volume of cathode channels";
        parameter Real V_cooling "Total volume of all cooling channels";
        Real X_feed_an[4] "Mass-based composition at anode inlet";
        Real X_feed_cath[5] "Mass-based composition at cathode inlet";
        constant Real X_start_anode[4] "Initial mass-based composition in all control volumes at anode";
        constant Real X_start_cathode[5] "Initial mass-based composition in all control volumes at cathode";
        parameter Real X_start_cooling[1] "Initial mass-based composition in all control volumes ";
        parameter Real alpha "Charge transfer coefficient";
        constant Real c1 "Voltage derivative by temperature";
        parameter Real c_stack "Specific heat capacity of stack material";
        Real checkEnergyBalance;
        Real checkMassBalance;
        fmumodelica_rec_coolStack_coolingPipe coolingPipe annotation(Dialog(tab = "Components"));
        Real dUdt;
        constant String diffusiveSpecies[2] "Species diffusing through membrane";
        Real dmdt;
        parameter Real dp_smooth "Pressure drop smoothing region around zero for anode and cathode channels";
        parameter Real dp_smooth_cooling "Pressure drop smoothing region around zero for cooling channel";
        fmumodelica_rec_coolStack_drain_an drain_an annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_drain_cath drain_cath annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_drain_cooling drain_cooling annotation(Dialog(tab = "Components"));
        constant Boolean enable_setting "If true, selecatbility of parameters enabled";
        constant Boolean enable_setting_advanced "If true, selectability of stack advanced parameters enabled";
        constant Boolean enable_setting_anode_geometry "If true, selectability of anode geometry parameters enabled";
        constant Boolean enable_setting_anode_init "If true, selectability of anode initialization parameters enabled";
        constant Boolean enable_setting_cathode_geometry "If true, selectability of cathode parameters enabled";
        constant Boolean enable_setting_cathode_init "If true, selectability of cathode initialization parameter enabled";
        constant Boolean enable_setting_cooling_advanced "If true, selectability of cooling chanell advanced parameters enabled";
        constant Boolean enable_setting_cooling_geometry "If true, selectability of cooling channel initialization parameter enabled";
        constant Boolean enable_setting_cooling_init "If true, selectability of cooling channel initialization parameters enabled";
        fmumodelica_rec_coolStack_feed_an feed_an annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_feed_cath feed_cath annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_feed_cooling feed_cooling annotation(Dialog(tab = "Components"));
        parameter Boolean from_dp_anode "If true, then massflow rate is computed from pressure drop";
        parameter Boolean from_dp_cathode "If true, then massflow rate is computed from pressure drop";
        constant Boolean from_dp_cooling "If true, then massflow rate is computed from pressure";
        constant Real g_cooling "Gravitational acceleration";
        constant Boolean generateEventForReversal_anode "Flag for switching events for flow reversal on/off";
        constant Boolean generateEventForReversal_cathode "Flag for switching events for flow reversal on/off";
        constant Boolean generateEventForReversal_cooling "Flag for switching events for flow reversal on/off";
        Real h_inflow_an "Specific enthalpy at anode inlet";
        Real h_inflow_cath "Specific enthalpy at cathode inlet";
        Real h_inflow_cooling "Specific enthalpy at cooling pipe inlet";
        parameter Real h_start_anode[6] "Initial specific enthalpy in control volumes and inlet port at anode";
        parameter Real h_start_cathode[6] "Initial specific enthalpy in control volumes and inlet port at cathode";
        parameter Real h_start_cooling[6] "Initial specific enthalpy in  control volumes and inlet port";
        parameter Real h_start_in_anode "Initial specific enthalpy at anode channel inlet";
        parameter Real h_start_in_cathode "Initial specific enthalpy at cathode channel inlet";
        parameter Real h_start_in_cooling "Initial inlet specific enthalpy";
        parameter Real h_start_out_anode "Initial specific enthalpy at anode channel outlet";
        parameter Real h_start_out_cathode "Initial specific enthalpy at cathode channel outlet";
        parameter Real h_start_out_cooling "Initial outlet specific enthalpy";
        parameter Real height_cooling "Height(outlet) - height(inlet)";
        constant Boolean includeCellConduction "If true, along-the-channel thermal conduction included";
        constant Boolean includeStaticHead_cooling "If true, static head considered";
        constant Boolean initFromEnthalpy_anode "If true, initialization from enthalpy, otherwise from temperature";
        constant Boolean initFromEnthalpy_cathode "If true, initialization from enthalpy, otherwise from temperature";
        constant Boolean initFromEnthalpy_cooling "If true, initialization from enthalpy, otherwise from temperature";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt_anode "Initialization option (steady state or fix value)";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt_cathode "Initialization option (steady state or fix value)";
        constant Modelon_ThermoFluid_Choices_InitOptions initOpt_cooling "Initialization option (steady state or fix value)";
        constant Real j_0 "Exchange current density for activation loss";
        constant Real j_loss "Activation current density loss";
        parameter Real lambda_cell "Cell internal thermal conductivity";
        parameter Real length_cell "Cell length";
        constant Real m_conc "Pre-exponential factor for concentration loss";
        parameter Real m_flow_start_anode "Initial mass flow rate (guessed value) at anode";
        parameter Real m_flow_start_cathode "Initial mass flow rate (guessed value) at cathode";
        parameter Real m_flow_start_cooling "Initial mass flow rate (guess value)";
        parameter Real mflow_smooth "Mass flow rate smoothing region around zero for anode and cathode channels";
        parameter Real mflow_smooth_cooling "Massflow smoothing region around zero for cooling channel";
        constant Integer n "Number of control volumes";
        parameter Integer n_cell "Number of series-connected cells in the stack";
        parameter Real n_channels_anode "Number of parallel channels at anode";
        constant Real n_channels_cathode "Number of parallel channels at cathode";
        parameter Real n_channels_cooling "Number of parallel channels";
        constant Real n_conc " Exponential factor for concentration loss";
        constant Integer ni_cooling "Number of control volumes";
        parameter Real p_start_anode[6] "Initial pressure in control volumes and outlet port at anode";
        parameter Real p_start_cathode[6] "Initial pressure in control volumes and outlet port at cathode";
        parameter Real p_start_cooling[6] "Initial pressure in control volumes and outlet port";
        parameter Real p_start_in_anode "Initial pressure at anode channel inlet";
        parameter Real p_start_in_cathode "Initial pressure at cathode channel inlet";
        parameter Real p_start_in_cooling "Initial inlet pressure";
        parameter Real p_start_out_anode "Initial pressure at anode channel outlet ";
        parameter Real p_start_out_cathode "Initial pressure at cathode channel outlet";
        parameter Real p_start_out_cooling "Initial outlet pressure";
        constant Real pi;
        fmumodelica_rec_coolStack_pin_n pin_n annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_pin_p pin_p annotation(Dialog(tab = "Components"));
        constant Boolean positiveFlow_anode "Assume positive flow for upstream fluid properties";
        constant Boolean positiveFlow_cathode "Assume positive flow for upstream fluid properties";
        parameter Boolean positiveFlow_cooling "Assume positive flow for upstream properties";
        parameter Boolean reaction_occurrence_an "If true, reactions occur in the anode channel";
        parameter Boolean reaction_occurrence_cath "If true, reactions occur in the cathode channel";
        parameter Real rho_dry_m "Dry membrane density";
        fmumodelica_rec_coolStack_subStack subStack annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_summary summary annotation(Dialog(tab = "Components"));
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack;
    record fmumodelica_rec_coolStack_coolingPipe
        parameter Real A[5] "Cross sectional area (single channel, per segment)";
        parameter Real A_heat[5] "Heat transfer area (single channel, per segment)";
        constant Boolean A_heat_fixed "Fixed attribute for heat transfer area";
        parameter Real A_heat_internal[5] "Modified heat transfer area for design calculation";
        parameter Real A_heat_max;
        parameter Real A_heat_min;
        parameter Real A_heat_nom;
        parameter Real A_heat_set "Actual heat transfer area, prescribed directly (via A_heat) or indirectly (via Q_flow)";
        parameter Real A_heat_start;
        parameter Real A_mean "Average cross sectional area";
        parameter Real CF_HeatTransfer "Calibration factor for heat transfer";
        parameter Real CF_PressureLoss "Calibration factor for pressure drop";
        constant Real CF_length "Calibration factor for pipe length";
        parameter Real Delta_max_twoPhaseFraction "Smooth function input value for cmax";
        parameter Real Delta_min_twoPhaseFraction "Smooth function input value for cmin";
        parameter Real Dhyd[5] "Hydraulic diameter (single channel, per segment)";
        constant Real Ek_flow[6] "Kinetic energy flow m_flow*v^2/2 over control volume boundaries";
        Real Fr[5] "Froude number";
        parameter Real L[5] "Length of each segment";
        parameter Real L_internal[5] "Modified pipe length for design calculation";
        parameter Real L_max;
        parameter Real L_min;
        parameter Real L_nom;
        parameter Real L_set "Actual total length, prescribed directly (via L) or indirectly (via dp0)";
        parameter Real L_start;
        parameter Real L_total "Total channel length";
        Real M[5] "Control volume masses";
        Real Mtot "Total mass";
        constant Integer NA "Number of ports";
        constant Integer NB "Number of ports";
        Real Q[5] "Heat flow rate into control volumes";
        parameter Real Q_flow0 "Initial heat flow rate to compute sizing";
        constant Real Q_fluid[5] "Heat flow rate from connector q_fluid";
        Real Q_tot "Total heat flow rate into pipe";
        Real Q_wall[5] "Heat flow rate from connector q";
        Real Re[5] "Reynolds number";
        Real Re_liq[5] "Reynolds number, boiling curve";
        Real TA "Upstream temperature when flow A -> B";
        Real TA_out "Outlet temperature when flow B -> A";
        Real TB "Upstream temperature when flow B -> A";
        Real TB_out "Outlet temperature when flow A -> B";
        Real T[5] "Temperature profile in channel";
        Real T_fluid[5] "Temperature for heat transfer modeling";
        Real T_liqA "Bubble line temperature, portA inlet";
        Real T_liqB "Bubble line temperature, portB inlet";
        Real T_liq[5] "Bubble line temperature";
        Real T_liq_out "Bubble line temperature";
        parameter Real T_out0 "Initial outlet temperature to compute sizing";
        parameter Real T_start[6] "Initial temperatures, inlet port and control volumes";
        parameter Real T_start_in "Initial inlet temperature";
        parameter Real T_start_out "Initial outlet temperature";
        Real T_vapA "Dew line temperature, portA inlet";
        Real T_vapB "Dew line temperature, portB inlet";
        Real T_vap[5] "Dew line temperature";
        Real T_vap_out "Dew line temperature";
        Real T_wall[5] "Wall temperature, if heat transfer enabled";
        parameter Real V[5] "Total control volume sizes (all channels per segment)";
        parameter Real V_internal[5] "Modified pipe volume for design calculation";
        parameter Real V_tot "Total volume";
        parameter Real Vtot "Total volume";
        parameter Real XA[1] "Mixture mass fractions of inlet flows at portA";
        parameter Real XB[1] "Mixture mass fractions of inlet flows at portB";
        constant Real X[1,5] "Mass fractions";
        parameter Real X_start[1] "Initial mass fractions (all control volumes)";
        Real alpha[5] "Heat transfer coefficient";
        constant Real c_pseudo_twoPhaseFraction[5];
        parameter Real c_pseudo_twoPhaseFraction_const "Constant pseudo state rapidity factor";
        parameter Real cmax_twoPhaseFraction "Maximum rapidity";
        parameter Real cmin_twoPhaseFraction "Minimum rapidity";
        Real cp[5] "Heat capacity at constant pressure";
        Real cv[5] "Heat capacity at constant volume";
        Real dA "Inlet density, nominal direction, portA";
        Real dA_out "Outlet density, nominal direction, portA";
        Real dB "Inlet density, nominal direction, portB";
        Real dB_out "Outlet density at portB";
        constant Real dEk_flow[5] "Difference of kinetic energy flow over boundaries, per control volume";
        Real dUdt "Time-derivative of internal energy";
        Real d[5];
        Real dmdt "Time-derivative of total mass";
        parameter Real dp0 "Initial pressure drop to compute sizing";
        Real dp[5] "Pressure drops from friction models, vector length depending on discretization option";
        Real dp_internal[6] "Pressure drop after each control volume";
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        constant Real dpaccel[5] "Resulting pressure drop from acceleration due to specific volume change";
        Real drhodx[6] "Density differences between adjacent control volumes";
        parameter Boolean dynamicStabilizerRapidity_twoPhaseFraction "Self adapting stabilizer rapidity";
        Real etaA "Inlet viscosity, nominal direction, portA";
        Real etaB "Inlet viscosity, nominal direction, portB";
        Real eta[5];
        parameter Real flowFraction0 "Fraction of nominal mass flow rate through this component";
        fmumodelica_rec_coolStack_coolingPipe_friction friction annotation(Dialog(tab = "Components"));
        constant Modelon_ThermoFluid_Choices_FrictionDistribution frictionDistribution "Discretization scheme for friction and control volumes (see info)";
        constant Boolean from_dp "If true, then massflow rate is computed from pressure";
        constant Real g "Gravitational acceleration";
        constant Boolean generateEventForReversal "Flag for switching events for flow reversal on/off";
        Real hA "Mixture enthalpy of inlet flows at portA";
        Real hB "Mixture enthalpy of inlet flows at portB";
        Real h[5] "Control volume specific enthalpies";
        Real h_liqA "Liquid enthalpy, portA inlet";
        Real h_liqB "Liquid enthalpy, portB inlet";
        Real h_liq[6] "Liquid enthalpy";
        parameter Real h_start[6] "Initial specific enthalpies, inlet port and control volumes";
        parameter Real h_start_in "Initial inlet specific enthalpy";
        parameter Real h_start_out "Initial outlet specific enthalpy";
        Real h_vapA "Vapour enthalpy, portA inlet";
        Real h_vapB "Vapour enthalpy, portB inlet";
        Real h_vap[6] "Vapour enthalpy";
        fmumodelica_rec_coolStack_coolingPipe_htcoeff htcoeff annotation(Dialog(tab = "Components"));
        constant Boolean includeAcceleration "If true, acceleration due to specific volume included in momentum balance equation";
        constant Boolean includeStaticHead "Consider static head";
        constant Boolean initFromEnthalpy "Initialize from enthalpy if true, otherwise from temperature";
        constant Modelon_ThermoFluid_Choices_InitOptions initOpt "Initialization option (steady state or fix value)";
        constant Boolean kineticEnergyInBalance "If true, kinetic energy included in energy balance";
        Real lam[5] "Thermal conductivity";
        constant Boolean length_fixed "Fixed attribute for length";
        parameter Real levels[5] "Relative levels of control volume outlets (inlet port at 0)";
        Real m_flow[6] "Mass flow over cv boundaries, positive from portA towards portB";
        Real m_flow_mean "Average mass flow rate in pipe, positive from portA to portB";
        parameter Real m_flow_start "Initial mass flow rate (guess value)";
        Real mflow_A_in "Total inlet flow rate at portA";
        Real mflow_B_in "Total inlet flow rate at portB";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Integer n "Number of control volumes";
        parameter Real n_channels[5] "Number of parallel channels";
        constant Integer n_fric;
        constant Integer ni "Number of control volumes";
        Real pA "Pressure in portA";
        Real pB "Pressure in portB";
        Real p[5] "Control volume pressures";
        Real p_redA "Reduced pressure: 1 at critical point, portA inlet";
        Real p_redB "Reduced pressure: 1 at critical point, portB inlet";
        Real p_red[5] "Reduced pressure: 1 at critical point";
        Real p_satA "Saturation pressure, portA inlet";
        Real p_satB "Saturation pressure, portB inlet";
        Real p_sat[5] "Saturation pressures";
        parameter Real p_start[6] "Initial pressure in control volumes and outlet port";
        parameter Real p_start_in "Initial inlet pressure";
        parameter Real p_start_out "Initial outlet pressure";
        fmumodelica_rec_coolStack_coolingPipe_portA portA[1] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_coolingPipe_portB portB[1] annotation(Dialog(tab = "Components"));
        parameter Real pos_rel_in "Relative position of channel inlet in flow direction (for correlations parameterized with inlet and outlet conditions)";
        parameter Real pos_rel_out "Relative position of channel outlet in flow direction (for correlations parameterized with inlet and outlet conditions)";
        parameter Boolean positiveFlow "Assume positive flow for upstream properties";
        fmumodelica_rec_coolStack_coolingPipe_q q[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_coolingPipe_q_fluid q_fluid[5] annotation(Dialog(tab = "Components"));
        Real quality[5] "Steam quality (0 <= quality <= 1)";
        fmumodelica_rec_coolStack_coolingPipe_satA satA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_coolingPipe_satB satB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_coolingPipe_sat sat[5] annotation(Dialog(tab = "Components"));
        Real sh[5] "Static head between control volumes";
        Real sigmaA "Inlet surface tension, nominal direction, portA";
        Real sigmaB "Inlet surface tension, nominal direction, portB";
        Real sigma[5] "Surface tension in two phase region";
        constant Boolean sizing "True, to prescribe pressure drop or heat flow rate, false for geometry";
        fmumodelica_rec_coolStack_coolingPipe_stateA_out stateA_out annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_coolingPipe_stateB_out stateB_out annotation(Dialog(tab = "Components"));
        constant Modelon_Types_ThermoStates stateChoice "State selection";
        fmumodelica_rec_coolStack_coolingPipe_state state[7] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_coolingPipe_summary summary annotation(Dialog(tab = "Components"));
        constant Modelon_ThermoFluid_Choices_ChannelThermalOpt thermalOpt "Choice of thermal variable to prescribe";
        Real twoPhaseFraction[5] "Default fraction of control volume in two phase";
        Real twoPhaseFraction_def[5] "Fraction of control volume in two phase region";
        constant Real twoPhaseFraction_pseudo[5] "Pseudo fraction of control volume in two phase";
        parameter Real twoPhaseFraction_start[5] "Initial values for two-phase fraction";
        constant Boolean useMeanTempDrivenQ "If true, heat flow in each control volume driven by the average temperature";
        constant Boolean use_stabilizer_twoPhaseFraction "If true, then filter on twoPhaseFraction";
        Real v[6] "Fluid velocities at control volume boundaries";
        fmumodelica_rec_coolStack_coolingPipe_volume volume[5] annotation(Dialog(tab = "Components"));
        Real x[5] "Equilibrium thermodynamic quality (<0 for subcooled, >1 for superheated)";
        parameter Real z[5] "Dimensionless positions of the control volume centers";
    end fmumodelica_rec_coolStack_coolingPipe;
    record fmumodelica_rec_coolStack_coolingPipe_friction
        parameter Real A[5] "Flow cross sectional area (single channel)";
        parameter Real Av "Av (metric) flow coefficient";
        parameter Real Dhyd[5] "Hydraulic diameter (single channel)";
        parameter Real F_user "Calibration factor for pressure loss";
        parameter Real L[5] "Flow path length";
        Real d[6] "Control volume densities";
        parameter Real dp0 "Nominal pressure drop over entire pipe";
        Real dp[5] "Pressure drop due to friction";
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        Real eta[6] "Dynamic viscosity";
        parameter Real flowFraction0 "Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)";
        constant Boolean from_dp "if true, then massflow rate is computed from pressure";
        Real m_flow[5] "Mass flow rate over control volume boundaries (single channel)";
        parameter Real m_flow_small "Small mass flow rate for regularization of zero flow";
        parameter Real mflow0 "Nominal mass flow";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Integer n "Number of flow resistance models";
        parameter Real n_channels[5] "Number of parallel channels (used by correlations based on total mass flow)";
        parameter Real n_exp "Exponent for pressure loss correlation (default: 2)";
        parameter Real pos_rel_in "Relative position of channel inlet in flow direction (for correlations parameterized with inlet and outlet conditions)";
        parameter Real pos_rel_out "Relative position of channel outlet in flow direction (for correlations parameterized with inlet and outlet conditions)";
        parameter Boolean positiveFlow "Assume positive flow for upstream fluid properties";
        fmumodelica_rec_coolStack_coolingPipe_friction_sat sat[6] annotation(Dialog(tab = "Components"));
        Real sigma[6] "Surface tension in two phase region";
        Real twoPhaseFraction[5] "Fraction of control volume in two phase region";
        parameter Boolean use_yd0 "True, if yd0 shall be used";
        parameter Real yd0 "Desired derivative at dp=0: dy/dp = yd0";
    end fmumodelica_rec_coolStack_coolingPipe_friction;
    record fmumodelica_rec_coolStack_coolingPipe_friction_sat
        Real cp_liq;
        Real cp_vap;
        Real d_liq;
        Real d_vap;
        Real eta_liq;
        Real eta_vap;
        Real lam_liq;
        Real lam_vap;
        Real x;
    end fmumodelica_rec_coolStack_coolingPipe_friction_sat;
    record fmumodelica_rec_coolStack_coolingPipe_htcoeff
        parameter Real A[5] "Flow cross sectional area (single channel)";
        parameter Real A_heat[5] "Heat transfer area (single channel)";
        constant Real CF_length "Calibration factor for pipe length";
        parameter Real Dhyd[5] "Hydraulic diameter (single channel)";
        parameter Real F_user "Calibration factor for heat transfer";
        Real Fr[5] "Froude number";
        parameter Real L "Channel length (total length in case of discretized channel)";
        Real Nu_1ph[5] "1-phase Nusselt number";
        Real Pr[5] "Prandl number";
        Real Q_s[5] "Heat flow for a single channel, per segment. Positive for cooling, negative for heating.";
        Real Re[5] "Reynolds number";
        Real Re_liq[5] "Reynolds number, boiling curve";
        Real T[5] "temperature";
        Real T_wall[5] "Wall temperature";
        Real alpha[5] "Heat transfer coefficient";
        Real cp[5] "specific heat capacity";
        Real eta[5] "dynamic viscosity";
        Real k_1ph[5] "1-phase heat transfer coefficient";
        Real lam[5] "thermal conductivity";
        Real m_flow[5] "mass flow (single channel)";
        constant Integer n "Total discretization number";
        Real p[5] "Pressure";
        parameter Real pcrit "Critical pressure of fluid for boiling correlations";
        fmumodelica_rec_coolStack_coolingPipe_htcoeff_sat sat[5] annotation(Dialog(tab = "Components"));
        Real twoPhaseFraction[5] "fraction of the overall control volume with two-phase conditions";
    end fmumodelica_rec_coolStack_coolingPipe_htcoeff;
    record fmumodelica_rec_coolStack_coolingPipe_htcoeff_sat
        Real cp_liq;
        Real cp_vap;
        Real d_liq;
        Real d_vap;
        Real eta_liq;
        Real eta_vap;
        Real lam_liq;
        Real lam_vap;
        Real x;
    end fmumodelica_rec_coolStack_coolingPipe_htcoeff_sat;
    record fmumodelica_rec_coolStack_coolingPipe_portA
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_coolingPipe_portA;
    record fmumodelica_rec_coolStack_coolingPipe_portB
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_coolingPipe_portB;
    record fmumodelica_rec_coolStack_coolingPipe_q
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_coolingPipe_q;
    record fmumodelica_rec_coolStack_coolingPipe_q_fluid
        constant Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_coolingPipe_q_fluid;
    record fmumodelica_rec_coolStack_coolingPipe_satA
        Real cp_liq;
        Real cp_vap;
        Real d_liq;
        Real d_vap;
        Real eta_liq;
        Real eta_vap;
        Real lam_liq;
        Real lam_vap;
        Real x;
    end fmumodelica_rec_coolStack_coolingPipe_satA;
    record fmumodelica_rec_coolStack_coolingPipe_satB
        Real cp_liq;
        Real cp_vap;
        Real d_liq;
        Real d_vap;
        Real eta_liq;
        Real eta_vap;
        Real lam_liq;
        Real lam_vap;
        Real x;
    end fmumodelica_rec_coolStack_coolingPipe_satB;
    record fmumodelica_rec_coolStack_coolingPipe_sat
        Real cp_liq;
        Real cp_vap;
        Real d_liq;
        Real d_vap;
        Real eta_liq;
        Real eta_vap;
        Real lam_liq;
        Real lam_vap;
        Real x;
    end fmumodelica_rec_coolStack_coolingPipe_sat;
    record fmumodelica_rec_coolStack_coolingPipe_stateA_out
        constant Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_coolingPipe_stateA_out;
    record fmumodelica_rec_coolStack_coolingPipe_stateB_out
        constant Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_coolingPipe_stateB_out;
    record fmumodelica_rec_coolStack_coolingPipe_state
        Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_coolingPipe_state;
    record fmumodelica_rec_coolStack_coolingPipe_summary
        Real M "Total mass of the pipe";
        Real T_in "Temperature of upstream fluid";
        Real T_out "Temperature of downstream fluid";
        parameter Real V "Total volume of the pipe";
        Real d_in "Density of upstream fluid";
        Real dp "Pressure drop over the pipe";
        Real h_in "Specific enthalpy of upstream fluid";
        Real h_out "Specific enthalpy of downstream fluid";
        Real m_flow "Mass flow rate through the pipe";
    end fmumodelica_rec_coolStack_coolingPipe_summary;
    record fmumodelica_rec_coolStack_coolingPipe_volume
        constant Real A "Cross section area for computation of static quantities";
        Real M;
        Real T "Temperature";
        Real T_in "Inlet temperature (from ideal mixing) in case thermal dynamics are disabled";
        parameter Real T_start "Initial temperature";
        Real Tt "Temperature of medium";
        parameter Real Tt_start "Initial total temperature";
        Real U;
        parameter Real U_start "Initial internal energy (guess)";
        parameter Real V_tot "Total volume";
        parameter Real V_tot_start "Initial volume (guess)";
        constant Real X[1] "Mass fractions";
        parameter Real X_start[1] "Initial mass fractions";
        Real d "Density";
        Real dE "Internal energy derivative";
        Real dMX[1] "Mass derivative of substances";
        Real dM_bulk "Optional input of total mass derivative from bulk mass flow rate";
        Real ddhp "density derivative w.r.t. specific enthalpy";
        Real ddph "density derivative w.r.t. pressure";
        constant Real der_p_factor "Factor to multiply der(p) with for real-time";
        constant Boolean enableFlowReversal "If true then support flow reversal";
        parameter Boolean enforceStates "Enforce specific numerical state variables";
        Real h "SpecificEnthalpy";
        parameter Real h_start "Initial specific Enthalpy";
        Real ht "Total specific enthalpy of medium";
        parameter Real ht_start "Initial total specific enthalpy";
        constant Modelon_ThermoFluid_Choices_InitOptions initOpt "Initialization option";
        parameter Real mX_start[1] "Initial species mass (guess)";
        constant Real m_flow "Mass flow rate for computation of static quantities";
        parameter Real m_start "Initial total mass (guess)";
        constant Integer nC "Number of trace components";
        constant Integer ns "Number of substances";
        constant Integer nsi "Reduced number of species";
        Real p "Pressure";
        parameter Real p_start "Initial pressure";
        Real pt "Total absolute pressure of medium";
        parameter Real pt_start "Initial total pressure";
        constant Boolean quasiStatic "If true then derivatives are set to zero";
        constant Boolean realTimeMode "Activates delay operators for real-time simulations";
        constant String stack "Component name to be included in error message for debugging";
        fmumodelica_rec_coolStack_coolingPipe_volume_state state annotation(Dialog(tab = "Components"));
        constant Modelon_Types_ThermoStates stateChoice "State selection";
        constant Modelon_ThermoFluid_Choices_StaticTotalConv staticTotalConv "Type of conversion between static, total. Equal by default";
        parameter Real stepSize "Step size used in real-time operators";
        parameter Boolean thermalDynamics "If true then dynamic energy balance, else temperature given by T_in";
        Real u;
    end fmumodelica_rec_coolStack_coolingPipe_volume;
    record fmumodelica_rec_coolStack_coolingPipe_volume_state
        constant Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_coolingPipe_volume_state;
    record fmumodelica_rec_coolStack_drain_an
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_drain_an;
    record fmumodelica_rec_coolStack_drain_cath
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_drain_cath;
    record fmumodelica_rec_coolStack_drain_cooling
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_drain_cooling;
    record fmumodelica_rec_coolStack_feed_an
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_feed_an;
    record fmumodelica_rec_coolStack_feed_cath
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_feed_cath;
    record fmumodelica_rec_coolStack_feed_cooling
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_feed_cooling;
    record fmumodelica_rec_coolStack_pin_n
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_pin_n;
    record fmumodelica_rec_coolStack_pin_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_pin_p;
    record fmumodelica_rec_coolStack_subStack
        parameter Real A_anode "Cross section area of single anode channel";
        constant Real A_cathode "Cross section area of single cathode channel";
        parameter Real A_cell "Cell active area";
        parameter Real A_crosssection_cell "Cross section area of a single cell";
        parameter Real A_heat_anode "Heat transfer area of single anode channel";
        constant Real A_heat_cathode "Heat transfer area of single cathode channel";
        parameter Real CF_AnodeSideHeatTransfer "Calibration factor for heat transfer at anodic side";
        parameter Real CF_AnodeSidePressureLoss "Calibration factor for pressure drop at anodic side";
        parameter Real CF_CathodeSideHeatTransfer "Calibration factor for heat transfer at cathodic side";
        parameter Real CF_CathodeSidePressureLoss "Calibration factor for pressure drop at cathodic side";
        parameter Real C_anode "Circumference of single anode channel";
        constant Real C_cathode "Circumference of single cathode channel";
        parameter Real D_anode "Diameter of single anode channel";
        constant Real D_cathode "Diameter of single cathode channel";
        parameter Real Dhyd_anode "Hydraulic diameter of single channel";
        constant Real Dhyd_cathode "Hydraulic diameter of single cathode channel";
        parameter Real E0_ref "Single cell Nernst's potential at standard conditions";
        parameter Real EW_m "Membrane equivalent weight";
        parameter Real G_cell "Cell thermal conductance";
        Real H2_utilization "H2 utilization";
        parameter Real L_anode "Length of anode channel";
        constant Real L_cathode "Length of cathode channel";
        parameter Real M_stack "Substack mass";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real P_stack "Substack power";
        Real T_stack[5] "Substack temperature in each node";
        parameter Real T_start_anode[6] "Initial temperature in control volumes and inlet port at anode";
        parameter Real T_start_cathode[6] "Initial temperature in control volumes and inlet port at cathode";
        parameter Real T_start_in_anode "Initial temperature at anode channel inlet";
        parameter Real T_start_in_cathode "Initial temperature at cathode channel inlet";
        parameter Real T_start_out_anode "Initial temperature at anode channel outlet";
        parameter Real T_start_out_cathode "Initial temperature at cathode channel outlet";
        parameter Real V_anode "Total volume of anode channels";
        constant Real V_cathode "Total volume of cathode channels";
        Real V_stack "Substack voltage";
        Real X_feed_an[4] "Mass-based composition in feed connector at anodic side";
        Real X_feed_cath[5] "Mass-based composition in feed connector at cathodic side";
        constant Real X_start_anode[4] "Initial mass-based composition in all control volumes at anode";
        constant Real X_start_cathode[5] "Initial mass-based composition in all control volumes at cathode";
        constant Boolean addProxToAnode "Add prox reactor before inlet to anode channel";
        parameter Real alpha "Charge transfer coefficient";
        fmumodelica_rec_coolStack_subStack_anode_channel anode_channel annotation(Dialog(tab = "Components"));
        Real anode_stoich "Anode stoichiometry";
        constant Real c1 "Voltage derivative by temperature";
        parameter Real c_stack "Specific heat capacity of substack material";
        fmumodelica_rec_coolStack_subStack_cathode_channel cathode_channel annotation(Dialog(tab = "Components"));
        Real cathode_stoich "Cathode stoichiometry";
        fmumodelica_rec_coolStack_subStack_cell cell annotation(Dialog(tab = "Components"));
        Real checkEnergyBalance;
        Real checkMassBalance;
        parameter Real d0_prox "Nominal density in prox loss (only used if addProxToAnode = true)";
        Real dUdt;
        constant String diffusiveSpecies[2] "Species diffusing through membrane";
        Real dmdt;
        parameter Real dp0_prox "Nominal pressure drop in prox loss (only used if addProxToAnode = true)";
        parameter Real dp_smooth "Pressure drop smoothing region around zero for anode and cathode channels";
        fmumodelica_rec_coolStack_subStack_drain_anode drain_anode annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_drain_cathode drain_cathode annotation(Dialog(tab = "Components"));
        constant Boolean enable_setting "If true, selectability of parameters enabled";
        constant Boolean enable_setting_advanced "If true, selectability of stack advanced parameters enabled";
        constant Boolean enable_setting_anode_geometry "If true, selectability of anode geometry parameters enabled";
        constant Boolean enable_setting_anode_init "If true, selectability of anode initialization parameters enabled";
        constant Boolean enable_setting_cathode_geometry "If true, selectability of cathode parameters enabled";
        constant Boolean enable_setting_cathode_init "If true, selectability of cathode initialization parameter enabled";
        fmumodelica_rec_coolStack_subStack_feed_anode feed_anode annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_feed_cathode feed_cathode annotation(Dialog(tab = "Components"));
        parameter Boolean from_dp_anode "If true, then massflow rate is computed from pressure drop";
        parameter Boolean from_dp_cathode "If true, then massflow rate is computed from pressure drop";
        constant Boolean generateEventForReversal_anode "Flag for switching events for flow reversal on/off";
        constant Boolean generateEventForReversal_cathode "Flag for switching events for flow reversal on/off";
        Real h_inflow_an "Specific enthalpy at anode inlet";
        Real h_inflow_cath "Specific enthalpy at cathode inlet";
        parameter Real h_start_anode[6] "Initial specific enthalpy in control volumes and inlet port at anode";
        parameter Real h_start_cathode[6] "Initial specific enthalpy in control volumes and inlet port at cathode";
        parameter Real h_start_in_anode "Initial specific enthalpy at anode channel inlet";
        parameter Real h_start_in_cathode "Initial specific enthalpy at cathode channel inlet";
        parameter Real h_start_out_anode "Initial specific enthalpy at anode channel outlet";
        parameter Real h_start_out_cathode "Initial specific enthalpy at cathode channel outlet";
        constant Boolean includeCellConduction "If true, along-the-channel thermal conduction included";
        constant Boolean initFromEnthalpy_anode "If true, initialization from enthalpy, otherwise from temperature";
        constant Boolean initFromEnthalpy_cathode "If true, initialization from enthalpy, otherwise from temperature";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt_anode "Initialization option (steady state or fix value)";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt_cathode "Initialization option (steady state or fix value)";
        constant Real j_0 "Exchange current density for activation loss";
        constant Real j_loss "Activation current density loss";
        parameter Real lambda_cell "Cell internal thermal conductivity";
        parameter Real length_cell "Cell length";
        constant Real m_conc "Pre-exponential factor for concentration loss";
        parameter Real m_flow_nom_prox "Nominal mass flow rate in prox loss (only used if addProxToAnode = true)";
        parameter Real m_flow_start_anode "Initial mass flow rate (guessed value) at anode";
        parameter Real m_flow_start_cathode "Initial mass flow rate (guessed value) at cathode";
        parameter Real mflow_smooth "Mass flow rate smoothing region around zero for anode and cathode channels";
        constant Integer n "Number of control volumes";
        constant Integer nS_an "Number of chemical species in anodic medium";
        constant Integer nS_cath "Number of chemical species in cathodic medium";
        parameter Integer n_cell "Number of series-connected cells in substack";
        parameter Real n_channels_anode "Number of parallel channels at anode";
        constant Real n_channels_cathode "Number of parallel channels at cathode";
        constant Real n_conc " Exponential factor for concentration loss";
        parameter Real p_start_anode[6] "Initial pressure in control volumes and outlet port at anode";
        parameter Real p_start_cathode[6] "Initial pressure in control volumes and outlet port at cathode";
        parameter Real p_start_in_anode "Initial pressure at anode channel inlet";
        parameter Real p_start_in_cathode "Initial pressure at cathode channel inlet";
        parameter Real p_start_out_anode "Initial pressure at anode channel outlet ";
        parameter Real p_start_out_cathode "Initial pressure at cathode channel outlet";
        constant Real pi;
        fmumodelica_rec_coolStack_subStack_pin_n pin_n annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_pin_p pin_p annotation(Dialog(tab = "Components"));
        constant Boolean positiveFlow_anode "Assume positive flow for upstream fluid properties";
        constant Boolean positiveFlow_cathode "Assume positive flow for upstream fluid properties";
        parameter Boolean reaction_occurrence_an "If true, reactions occur in the anode channel";
        parameter Boolean reaction_occurrence_cath "If true, reactions occur in the cathode channel";
        parameter Real rho_dry_m "Dry membrane density";
        fmumodelica_rec_coolStack_subStack_summary summary annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_wall wall[5] annotation(Dialog(tab = "Components"));
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack;
    record fmumodelica_rec_coolStack_subStack_anode_channel
        parameter Real A "Cross sectional area of single channel";
        parameter Real A_heat "Heat transfer area of single channel";
        parameter Real C "Circumference of single channel";
        parameter Real CF_HeatTransfer "Calibration factor for heat transfer";
        parameter Real CF_PressureLoss "Calibration factor for pressure drop";
        parameter Real D "Diameter of single channel";
        parameter Real Dhyd "Hydraulic diameter of single channel";
        parameter Real L "Channel length";
        parameter Real T_start[6] "Initial temperature in control volumes and inlet port";
        parameter Real T_start_in "Initial inlet temperature";
        parameter Real T_start_out "Initial outlet temperature";
        parameter Real V "Total volume of all channels";
        constant Real X_start[4] "Initial mass-based composition in all control volumes";
        parameter Real X_weight "Weight factor for inlet mass-based composition in lumped case";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel channel annotation(Dialog(tab = "Components"));
        Real checkEnergyBalance;
        Real checkMassBalance;
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        parameter Boolean from_dp "If true, then massflow rate is computed from pressure";
        constant Boolean generateEventForReversal "Flag for switching events for flow reversal on/off";
        Real h_inflow "Specific enthalpy at inlet";
        parameter Real h_start[6] "Initial specific enthalpy in control volumes and inlet port";
        parameter Real h_start_in "Initial inlet specific enthalpy";
        parameter Real h_start_out "Initial outlet specific enthalpy";
        parameter Real height "Height(outlet) - height(inlet)";
        parameter Boolean includeStaticHead " = true to inclue static head";
        constant Boolean initFromEnthalpy "If true, initialization from enthalpy, otherwise from temperature";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt "Initialization option (steady state or fix value)";
        parameter Real m_flow_start "Initial mass flow rate (guess value)";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Integer n "Number of control volumes";
        parameter Real n_channels "Number of parallel channels";
        constant Integer ni "Number of control volumes";
        parameter Real p_start[6] "Initial pressure in control volumes and outlet port";
        parameter Real p_start_in "Initial inlet pressure";
        parameter Real p_start_out "Initial outlet pressure";
        constant Real pi;
        fmumodelica_rec_coolStack_subStack_anode_channel_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_port port[5] annotation(Dialog(tab = "Components"));
        constant Boolean positiveFlow "Assume positive flow for upstream properties";
        parameter Boolean reaction_occurrence "If true, reactions occur in the channel: choose your reaction model";
        fmumodelica_rec_coolStack_subStack_anode_channel_summary summary annotation(Dialog(tab = "Components"));
        constant Boolean useHeatTransfer "If true, heat transfer between gas and channel wall (channel.q) considered (disabled when connected to a membrane)";
        fmumodelica_rec_coolStack_subStack_anode_channel_wall wall[5] annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_coolStack_subStack_anode_channel;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel
        parameter Real A[5] "Cross sectional area (single channel, per segment)";
        parameter Real A_heat[5] "Heat transfer area (single channel, per segment)";
        parameter Real A_mean "Average cross sectional area";
        parameter Real CF_HeatTransfer "Calibration factor for heat transfer";
        parameter Real CF_PressureLoss "Calibration factor for pressure drop";
        parameter Real Dhyd[5] "Hydraulic diameter (single channel, per segment)";
        parameter Real L[5] "Length of each segment";
        parameter Real L_total "Total channel length";
        Real MX[5,4] "Mass of each component in each control volume";
        Real M[5] "Total mass in each control volume";
        constant Integer NA "Number of ports";
        constant Integer NB "Number of ports";
        Real Q[5] "Heat flow rate into each control volume";
        Real Q_extra[5] "Extra energy per unit time into each control volume";
        Real Q_fluid[5] "Heat flow rate from connector q_fluid into each control volume";
        Real Q_tot "Total heat flow rate into pipe";
        constant Real Q_wall[5] "Heat flow rate from connector q into each control volume";
        Real TA "Upstream temperature when flow A -> B";
        Real TB "Upstream temperature when flow B -> A";
        Real T[5] "Temperature profile in channel";
        parameter Real T_start[6] "Initial temperatures, inlet port and control volumes";
        parameter Real T_start_in "Initial inlet temperature";
        parameter Real T_start_out "Initial outlet temperature";
        Real U[5] "Internal energy of each control volume";
        parameter Real V[5] "Total control volume sizes (all channels per segment)";
        parameter Real V_tot "Total volume";
        constant Real X_start[4] "Initial mass fractions (all control volumes)";
        Real alpha[5] "Heat transfer coefficient";
        Real dUdt "Time-derivative of channel internal energy";
        Real dp[6] "Pressure difference between portA, control volumes and portB";
        constant Boolean dp_asState "Use pressure difference as state variable";
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        constant Modelon_ThermoFluid_Choices_FrictionDistribution frictionDistribution "Discretization scheme for friction and control volumes (see info)";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction friction[5] annotation(Dialog(tab = "Components"));
        parameter Boolean from_dp "If true, then massflow rate is computed from pressure";
        parameter Real g "Gravitational acceleration";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_gas gas[5] annotation(Dialog(tab = "Components"));
        constant Boolean generateEventForReversal "Flag for switching events for flow reversal on/off";
        parameter Real h_start[6] "Initial specific enthalpies, inlet port and control volumes";
        parameter Real h_start_in "Initial inlet specific enthalpy";
        parameter Real h_start_out "Initial outlet specific enthalpy";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff htcoeff[5] annotation(Dialog(tab = "Components"));
        parameter Boolean includeStaticHead " = true to include static head";
        constant Boolean initFromEnthalpy "Initialize from enthalpy if true, otherwise from temperature";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt "Initialization option (steady state or fix value)";
        parameter Real levels[5] "Relative levels of control volume outlets (inlet port at 0)";
        Real m_flow_mean "Average mass flow rate in pipe, positive from portA to portB";
        parameter Real m_flow_start "Initial mass flow rate (guess value)";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Integer n "Number of control volumes";
        parameter Real n_channels[5] "Number of parallel channels";
        constant Integer n_fric;
        constant Integer ni "Number of control volumes";
        Real pA "Pressure in portA";
        Real pB "Pressure in portB";
        Real p[5] "Gas pressure in each control volume";
        parameter Real p_start[6] "Initial pressure in control volumes and outlet port";
        parameter Real p_start_in "Initial inlet pressure";
        parameter Real p_start_out "Initial outlet pressure";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_portA portA[1] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_portB portB[1] annotation(Dialog(tab = "Components"));
        constant Boolean positiveFlow "Assume positive flow for upstream properties";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_q q[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_q_fluid q_fluid[5] annotation(Dialog(tab = "Components"));
        Real rMX[5,4] "Mass residual of each component in each control volume for balance";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_reaction reaction annotation(Dialog(tab = "Components"));
        parameter Boolean reaction_occurrence "If true, reactions occur in the channel: choose your reaction model";
        Real sh[5] "Static head between control volumes";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_state state[7] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_summary summary annotation(Dialog(tab = "Components"));
        constant Boolean useHeatTransfer " = true if heat transfer between gas and channel wall is enabled (disabled with a membrane)";
        parameter String volName "Volume-name for better diagnosis";
        parameter Real z[5] "Dimensionless positions of the control volume centers";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction
        parameter Real A "Flow cross sectional area (single channel)";
        parameter Real Dhyd "Hydraulic diameter (single channel)";
        parameter Real F_user "Calibration factor for pressure loss";
        parameter Real L "Flow path length (one segment in case of discretized channels)";
        parameter Real d0 "Nominal density";
        Real dA "Density from stateA";
        Real dB "Density from stateB";
        Real dp "Pressure drop over component";
        parameter Real dp0 "Nominal pressure drop";
        parameter Real dpFraction0 "Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)";
        constant Boolean dp_from_isothermal "Pressure drop is computed from upstream properties";
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        parameter Real flowFraction0 "Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)";
        parameter Boolean from_dp "if true, then massflow rate is computed from pressure";
        parameter Real lengthFraction "Fraction of total channel length (used for discretization, all correlations)";
        Real m_flow "Mass flow rate (single channel)";
        parameter Real m_flow0 "Nominal mass flow rate (total for all channels)";
        parameter Real mflow_smooth "Massflow smoothing region around";
        parameter Real n_channels "Number of parallel channels (only for correlations parameterized with multi channel properties)";
        parameter Boolean outletInstance "Identifies instance at channel outlet, used for choking check only at outlet";
        constant Boolean positiveFlow "Assume positive flow for upstream fluid properties";
        parameter Real reference_d "Assumed upstream density if useFixedDensity = true";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateA_inflow stateA_inflow annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateA_outflow stateA_outflow annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateB_inflow stateB_inflow annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateB_outflow stateB_outflow annotation(Dialog(tab = "Components"));
        parameter Boolean useFixedDensity "Assume fixed upstream density in flow model";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateA_inflow
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateA_inflow;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateA_outflow
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateA_outflow;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateB_inflow
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateB_inflow;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateB_outflow
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_friction_stateB_outflow;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_gas
        Real MM "Molar mass (of mixture or single fluid)";
        Real Rg "Gas constant (of mixture if applicable)";
        Real T "Temperature of medium";
        Real T_degC "Temperature of medium in [degC]";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real Xi[4] "Structurally independent mass fractions";
        Real Z[4] "Component mole fractions";
        constant AssertionLevel assertlevel;
        Real cp "Specific heat capacity";
        Real d "Density of medium";
        Real dUZT[4] "Derivative of inner energy by moles at constant temperature";
        Real ddTp "Derivative of density by temperature at constant pressure";
        Real ddpT "Derivative of density by pressure at constant temperature";
        Real ddx[4] "Derivative vector of density by change in mass composition";
        Real duTp "Derivative of specific inner energy by temperature at constant p";
        constant Real dupT "Derivative of specific inner energy by pressure at constant T, zero for ideal gas";
        Real g_formation[4] "Component Gibbs energy of formation, molar base!";
        Real h "Specific enthalpy of medium";
        Real h_component[4] "Specific enthalpies of the component gases";
        Real p "Absolute pressure of medium";
        Real p_bar "Absolute pressure of medium in [bar]";
        constant Boolean preferredMediumStates "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
        Real s_component[4] "Component specific entropy";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_gas_state state annotation(Dialog(tab = "Components"));
        Real u "Specific internal energy of medium";
        Real u_comp[4] "Specific internal energy per component";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_gas;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_gas_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_gas_state;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff
        parameter Real A "Flow cross sectional area";
        constant Real CF_length "Calibration factor for pipe length";
        parameter Real Dhyd "Hydraulic diameter";
        parameter Real F_user "Calibration factor for heat transfer";
        parameter Real L "Channel length (total length in case of discretized channel)";
        Real Nu "Mean Nusselt number";
        Real Pr "Prandtl number";
        Real Re "Reynolds number";
        Real alphaA "Heat transfer coefficient, positive flow";
        constant Real alphaB "Heat transfer coefficient, negative flow";
        Real cp "Specific heat capacity";
        Real eta "Dynamic viscosity";
        constant Boolean ht_from_isothermal "Heat transfer is computed from upstream properties";
        Real lambda "Thermal conductivity";
        Real m_flow "Mass flow rate";
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateA stateA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateA_out stateA_out annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateB stateB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateB_out stateB_out annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateA
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateA;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateA_out
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateA_out;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateB
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateB;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateB_out
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_htcoeff_stateB_out;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_portA
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_portA;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_portB
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_portB;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_q
        constant Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_q;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_q_fluid
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_q_fluid;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_reaction
        parameter Real CF_conversion "Conversion efficiency, <= 1";
        constant Real Cp_reac[5] "Equivalent specific heat capacity at constant pressure for reactions";
        constant Real MMX[4] "Molar mass of each medium component";
        Real MM[5] "Mixture molar mass in each control volume";
        constant Integer N "Number of control volumes";
        constant Real Q[5] "Reaction heat, only if not included in enthalpy";
        Real T[5] "Reaction temperature in each control volume";
        parameter Real Tscale "Time factor for quasi-equilibrium reactions";
        parameter Real Tstart "Guessed start value for temperature";
        parameter Real V "Total volume";
        Real X_in[5,4] "Mass-based inlet composition for each control volume";
        Real X_out[5,4] "Mass-based outlet composition for each control volume";
        Real X_out_real[5,4] "Mass-based outlet composition for each control volume after processing";
        Real X_out_rescaled[5,4] "Mass-based outlet composition for each control volume after rescaling";
        constant Real Xout_start[4] "Guessed start mass-based composition composition at outlet";
        Real Ztot[5] "Total amount of moles in each control volume";
        parameter Real Ztot_start "Guessed start value of total amount of moles";
        Real Zx[5,4] "Amount of moles of each component in each control volume";
        Real Zx_flow[5,4] "Net molar flow rate of each component through each control volume (> 0 if entering the control volume) ";
        parameter Real Zx_nominal "Nominal value for amount of substance, used for numerical scaling";
        parameter Real Zx_start[4] "Guessed start value of amount of moles of each component";
        Real a[5] "Scaling coefficients for mass fractions if their sum is not 1 in each control volume";
        Real check_X_out_real[5] "Check for sum of mass fractions in each control volume";
        Real check_X_out_rescaled[5] "Check for sum of mass fractions in each control volume after rescaling";
        Real dmdt "Time-derivative of total mass";
        parameter Real epsZ "Depletion range";
        Real g_formation[5,4] "Gibbs energy of formation for each component in each control volume";
        Real log10_y_out[5,4] "Logarithm of outlet molar fractions for each control volume";
        constant Real log10_yout_start[4];
        Real mX_flow[5,4] "Net mass flow rate of each component through each control volume";
        constant Integer n_reac "Number of reactions";
        Real p[5] "Pressure in each control volume";
        constant Real pref "Reference pressure";
        parameter Real pstart "Guessed start value for pressure";
        constant Real rZ[5,4] "Molar rates of each component generated by reactions in each control volume";
        parameter Real scale "Speed factor for quasi-equilibrium reactions";
        parameter String volName "Volume-name for better diagnosis";
        Real y_out[5,4] "Outlet molar-based composition for each control volume";
        constant Real yout_start[4] "Guessed start molar-based composition at outlet";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_reaction;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_state;
    record fmumodelica_rec_coolStack_subStack_anode_channel_channel_summary
        Real M "Total mass of the pipe";
        Real T_in "Temperature of upstream fluid";
        Real T_out "Temperature of downstream fluid";
        parameter Real V "Total volume of the pipe";
        Real d_in "Density of upstream fluid";
        Real dp "Pressure drop over the pipe";
        Real h_in "Specific enthalpy of upstream fluid";
        Real h_out "Specific enthalpy of downstream fluid";
        Real m_flow "Mass flow rate through the pipe";
    end fmumodelica_rec_coolStack_subStack_anode_channel_channel_summary;
    record fmumodelica_rec_coolStack_subStack_anode_channel_portA
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_anode_channel_portA;
    record fmumodelica_rec_coolStack_subStack_anode_channel_portB
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_anode_channel_portB;
    record fmumodelica_rec_coolStack_subStack_anode_channel_port
        Real H_flow "Specific enthalpy flow rate";
        Real X[4] "Independent component mass fractions";
        Real h "Specific enthalpy of mixture";
        Real mX_flow[4] "Independent component mass flow rate";
        Real m_flow "mass flow rate";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_anode_channel_port;
    record fmumodelica_rec_coolStack_subStack_anode_channel_summary
        Real M "Total mass of the pipe";
        Real T_in "Temperature of upstream fluid";
        Real T_out "Temperature of downstream fluid";
        parameter Real V "Total volume of the pipe";
        Real d_in "Density of upstream fluid";
        Real dp "Pressure drop over the pipe";
        Real h_in "Specific enthalpy of upstream fluid";
        Real h_out "Specific enthalpy of downstream fluid";
        Real m_flow "Mass flow rate through the pipe";
    end fmumodelica_rec_coolStack_subStack_anode_channel_summary;
    record fmumodelica_rec_coolStack_subStack_anode_channel_wall
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_anode_channel_wall;
    record fmumodelica_rec_coolStack_subStack_cathode_channel
        constant Real A "Cross sectional area of single channel";
        parameter Real A_heat "Heat transfer area of single channel";
        constant Real C "Circumference of single channel";
        parameter Real CF_HeatTransfer "Calibration factor for heat transfer";
        parameter Real CF_PressureLoss "Calibration factor for pressure drop";
        constant Real D "Diameter of single channel";
        constant Real Dhyd "Hydraulic diameter of single channel";
        constant Real L "Channel length";
        parameter Real T_start[6] "Initial temperature in control volumes and inlet port";
        parameter Real T_start_in "Initial inlet temperature";
        parameter Real T_start_out "Initial outlet temperature";
        parameter Real V "Total volume of all channels";
        constant Real X_start[5] "Initial mass-based composition in all control volumes";
        parameter Real X_weight "Weight factor for inlet mass-based composition in lumped case";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel channel annotation(Dialog(tab = "Components"));
        Real checkEnergyBalance;
        Real checkMassBalance;
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        parameter Boolean from_dp "If true, then massflow rate is computed from pressure";
        constant Boolean generateEventForReversal "Flag for switching events for flow reversal on/off";
        Real h_inflow "Specific enthalpy at inlet";
        parameter Real h_start[6] "Initial specific enthalpy in control volumes and inlet port";
        parameter Real h_start_in "Initial inlet specific enthalpy";
        parameter Real h_start_out "Initial outlet specific enthalpy";
        parameter Real height "Height(outlet) - height(inlet)";
        parameter Boolean includeStaticHead " = true to inclue static head";
        constant Boolean initFromEnthalpy "If true, initialization from enthalpy, otherwise from temperature";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt "Initialization option (steady state or fix value)";
        parameter Real m_flow_start "Initial mass flow rate (guess value)";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Integer n "Number of control volumes";
        constant Real n_channels "Number of parallel channels";
        constant Integer ni "Number of control volumes";
        parameter Real p_start[6] "Initial pressure in control volumes and outlet port";
        parameter Real p_start_in "Initial inlet pressure";
        parameter Real p_start_out "Initial outlet pressure";
        constant Real pi;
        fmumodelica_rec_coolStack_subStack_cathode_channel_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_port port[5] annotation(Dialog(tab = "Components"));
        constant Boolean positiveFlow "Assume positive flow for upstream properties";
        parameter Boolean reaction_occurrence "If true, reactions occur in the channel: choose your reaction model";
        fmumodelica_rec_coolStack_subStack_cathode_channel_summary summary annotation(Dialog(tab = "Components"));
        constant Boolean useHeatTransfer "If true, heat transfer between gas and channel wall (channel.q) considered (disabled when connected to a membrane)";
        fmumodelica_rec_coolStack_subStack_cathode_channel_wall wall[5] annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_coolStack_subStack_cathode_channel;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel
        constant Real A[5] "Cross sectional area (single channel, per segment)";
        parameter Real A_heat[5] "Heat transfer area (single channel, per segment)";
        constant Real A_mean "Average cross sectional area";
        parameter Real CF_HeatTransfer "Calibration factor for heat transfer";
        parameter Real CF_PressureLoss "Calibration factor for pressure drop";
        constant Real Dhyd[5] "Hydraulic diameter (single channel, per segment)";
        constant Real L[5] "Length of each segment";
        constant Real L_total "Total channel length";
        Real MX[5,5] "Mass of each component in each control volume";
        Real M[5] "Total mass in each control volume";
        constant Integer NA "Number of ports";
        constant Integer NB "Number of ports";
        Real Q[5] "Heat flow rate into each control volume";
        Real Q_extra[5] "Extra energy per unit time into each control volume";
        Real Q_fluid[5] "Heat flow rate from connector q_fluid into each control volume";
        Real Q_tot "Total heat flow rate into pipe";
        constant Real Q_wall[5] "Heat flow rate from connector q into each control volume";
        Real TA "Upstream temperature when flow A -> B";
        Real TB "Upstream temperature when flow B -> A";
        Real T[5] "Temperature profile in channel";
        parameter Real T_start[6] "Initial temperatures, inlet port and control volumes";
        parameter Real T_start_in "Initial inlet temperature";
        parameter Real T_start_out "Initial outlet temperature";
        Real U[5] "Internal energy of each control volume";
        constant Real V[5] "Total control volume sizes (all channels per segment)";
        constant Real V_tot "Total volume";
        constant Real X_start[5] "Initial mass fractions (all control volumes)";
        Real alpha[5] "Heat transfer coefficient";
        Real dUdt "Time-derivative of channel internal energy";
        Real dp[6] "Pressure difference between portA, control volumes and portB";
        constant Boolean dp_asState "Use pressure difference as state variable";
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        constant Modelon_ThermoFluid_Choices_FrictionDistribution frictionDistribution "Discretization scheme for friction and control volumes (see info)";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction friction[5] annotation(Dialog(tab = "Components"));
        parameter Boolean from_dp "If true, then massflow rate is computed from pressure";
        parameter Real g "Gravitational acceleration";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_gas gas[5] annotation(Dialog(tab = "Components"));
        constant Boolean generateEventForReversal "Flag for switching events for flow reversal on/off";
        parameter Real h_start[6] "Initial specific enthalpies, inlet port and control volumes";
        parameter Real h_start_in "Initial inlet specific enthalpy";
        parameter Real h_start_out "Initial outlet specific enthalpy";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff htcoeff[5] annotation(Dialog(tab = "Components"));
        parameter Boolean includeStaticHead " = true to include static head";
        constant Boolean initFromEnthalpy "Initialize from enthalpy if true, otherwise from temperature";
        parameter Modelon_ThermoFluid_Choices_InitOptions initOpt "Initialization option (steady state or fix value)";
        parameter Real levels[5] "Relative levels of control volume outlets (inlet port at 0)";
        Real m_flow_mean "Average mass flow rate in pipe, positive from portA to portB";
        parameter Real m_flow_start "Initial mass flow rate (guess value)";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Integer n "Number of control volumes";
        constant Real n_channels[5] "Number of parallel channels";
        constant Integer n_fric;
        constant Integer ni "Number of control volumes";
        Real pA "Pressure in portA";
        Real pB "Pressure in portB";
        Real p[5] "Gas pressure in each control volume";
        parameter Real p_start[6] "Initial pressure in control volumes and outlet port";
        parameter Real p_start_in "Initial inlet pressure";
        parameter Real p_start_out "Initial outlet pressure";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_portA portA[1] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_portB portB[1] annotation(Dialog(tab = "Components"));
        constant Boolean positiveFlow "Assume positive flow for upstream properties";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_q q[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_q_fluid q_fluid[5] annotation(Dialog(tab = "Components"));
        Real rMX[5,5] "Mass residual of each component in each control volume for balance";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_reaction reaction annotation(Dialog(tab = "Components"));
        parameter Boolean reaction_occurrence "If true, reactions occur in the channel: choose your reaction model";
        Real sh[5] "Static head between control volumes";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_state state[7] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_summary summary annotation(Dialog(tab = "Components"));
        constant Boolean useHeatTransfer " = true if heat transfer between gas and channel wall is enabled (disabled with a membrane)";
        parameter String volName "Volume-name for better diagnosis";
        constant Real z[5] "Dimensionless positions of the control volume centers";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction
        constant Real A "Flow cross sectional area (single channel)";
        constant Real Dhyd "Hydraulic diameter (single channel)";
        parameter Real F_user "Calibration factor for pressure loss";
        constant Real L "Flow path length (one segment in case of discretized channels)";
        parameter Real d0 "Nominal density";
        Real dA "Density from stateA";
        Real dB "Density from stateB";
        Real dp "Pressure drop over component";
        parameter Real dp0 "Nominal pressure drop";
        parameter Real dpFraction0 "Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)";
        constant Boolean dp_from_isothermal "Pressure drop is computed from upstream properties";
        parameter Real dp_smooth "Pressure drop smoothing region around zero";
        parameter Real flowFraction0 "Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)";
        parameter Boolean from_dp "if true, then massflow rate is computed from pressure";
        constant Real lengthFraction "Fraction of total channel length (used for discretization, all correlations)";
        Real m_flow "Mass flow rate (single channel)";
        parameter Real m_flow0 "Nominal mass flow rate (total for all channels)";
        parameter Real mflow_smooth "Massflow smoothing region around";
        constant Real n_channels "Number of parallel channels (only for correlations parameterized with multi channel properties)";
        parameter Boolean outletInstance "Identifies instance at channel outlet, used for choking check only at outlet";
        constant Boolean positiveFlow "Assume positive flow for upstream fluid properties";
        parameter Real reference_d "Assumed upstream density if useFixedDensity = true";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateA_inflow stateA_inflow annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateA_outflow stateA_outflow annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateB_inflow stateB_inflow annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateB_outflow stateB_outflow annotation(Dialog(tab = "Components"));
        parameter Boolean useFixedDensity "Assume fixed upstream density in flow model";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateA_inflow
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateA_inflow;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateA_outflow
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateA_outflow;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateB_inflow
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateB_inflow;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateB_outflow
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_friction_stateB_outflow;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_gas
        Real MM "Molar mass (of mixture or single fluid)";
        Real Rg "Gas constant (of mixture if applicable)";
        Real T "Temperature of medium";
        Real T_degC "Temperature of medium in [degC]";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real Xi[5] "Structurally independent mass fractions";
        Real Z[5] "Component mole fractions";
        constant AssertionLevel assertlevel;
        Real cp "Specific heat capacity";
        Real d "Density of medium";
        Real dUZT[5] "Derivative of inner energy by moles at constant temperature";
        Real ddTp "Derivative of density by temperature at constant pressure";
        Real ddpT "Derivative of density by pressure at constant temperature";
        Real ddx[5] "Derivative vector of density by change in mass composition";
        Real duTp "Derivative of specific inner energy by temperature at constant p";
        constant Real dupT "Derivative of specific inner energy by pressure at constant T, zero for ideal gas";
        Real g_formation[5] "Component Gibbs energy of formation, molar base!";
        Real h "Specific enthalpy of medium";
        Real h_component[5] "Specific enthalpies of the component gases";
        Real p "Absolute pressure of medium";
        Real p_bar "Absolute pressure of medium in [bar]";
        constant Boolean preferredMediumStates "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
        Real s_component[5] "Component specific entropy";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_gas_state state annotation(Dialog(tab = "Components"));
        Real u "Specific internal energy of medium";
        Real u_comp[5] "Specific internal energy per component";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_gas;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_gas_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_gas_state;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff
        constant Real A "Flow cross sectional area";
        constant Real CF_length "Calibration factor for pipe length";
        constant Real Dhyd "Hydraulic diameter";
        parameter Real F_user "Calibration factor for heat transfer";
        constant Real L "Channel length (total length in case of discretized channel)";
        Real Nu "Mean Nusselt number";
        Real Pr "Prandtl number";
        Real Re "Reynolds number";
        Real alphaA "Heat transfer coefficient, positive flow";
        constant Real alphaB "Heat transfer coefficient, negative flow";
        Real cp "Specific heat capacity";
        Real eta "Dynamic viscosity";
        constant Boolean ht_from_isothermal "Heat transfer is computed from upstream properties";
        Real lambda "Thermal conductivity";
        Real m_flow "Mass flow rate";
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateA stateA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateA_out stateA_out annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateB stateB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateB_out stateB_out annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateA
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateA;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateA_out
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateA_out;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateB
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateB;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateB_out
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_htcoeff_stateB_out;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_portA
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_portA;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_portB
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_portB;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_q
        constant Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_q;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_q_fluid
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_q_fluid;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_reaction
        parameter Real CF_conversion "Conversion efficiency, <= 1";
        constant Real Cp_reac[5] "Equivalent specific heat capacity at constant pressure for reactions";
        constant Real MMX[5] "Molar mass of each medium component";
        Real MM[5] "Mixture molar mass in each control volume";
        constant Integer N "Number of control volumes";
        constant Real Q[5] "Reaction heat, only if not included in enthalpy";
        Real T[5] "Reaction temperature in each control volume";
        parameter Real Tscale "Time factor for quasi-equilibrium reactions";
        parameter Real Tstart "Guessed start value for temperature";
        constant Real V "Total volume";
        Real X_in[5,5] "Mass-based inlet composition for each control volume";
        Real X_out[5,5] "Mass-based outlet composition for each control volume";
        Real X_out_real[5,5] "Mass-based outlet composition for each control volume after processing";
        Real X_out_rescaled[5,5] "Mass-based outlet composition for each control volume after rescaling";
        constant Real Xout_start[5] "Guessed start mass-based composition composition at outlet";
        Real Ztot[5] "Total amount of moles in each control volume";
        parameter Real Ztot_start "Guessed start value of total amount of moles";
        Real Zx[5,5] "Amount of moles of each component in each control volume";
        Real Zx_flow[5,5] "Net molar flow rate of each component through each control volume (> 0 if entering the control volume) ";
        parameter Real Zx_nominal "Nominal value for amount of substance, used for numerical scaling";
        parameter Real Zx_start[5] "Guessed start value of amount of moles of each component";
        Real a[5] "Scaling coefficients for mass fractions if their sum is not 1 in each control volume";
        Real check_X_out_real[5] "Check for sum of mass fractions in each control volume";
        Real check_X_out_rescaled[5] "Check for sum of mass fractions in each control volume after rescaling";
        Real dmdt "Time-derivative of total mass";
        parameter Real epsZ "Depletion range";
        Real g_formation[5,5] "Gibbs energy of formation for each component in each control volume";
        Real log10_y_out[5,5] "Logarithm of outlet molar fractions for each control volume";
        constant Real log10_yout_start[5];
        Real mX_flow[5,5] "Net mass flow rate of each component through each control volume";
        constant Integer n_reac "Number of reactions";
        Real p[5] "Pressure in each control volume";
        constant Real pref "Reference pressure";
        parameter Real pstart "Guessed start value for pressure";
        constant Real rZ[5,5] "Molar rates of each component generated by reactions in each control volume";
        parameter Real scale "Speed factor for quasi-equilibrium reactions";
        parameter String volName "Volume-name for better diagnosis";
        Real y_out[5,5] "Outlet molar-based composition for each control volume";
        constant Real yout_start[5] "Guessed start molar-based composition at outlet";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_reaction;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_state;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_channel_summary
        Real M "Total mass of the pipe";
        Real T_in "Temperature of upstream fluid";
        Real T_out "Temperature of downstream fluid";
        constant Real V "Total volume of the pipe";
        Real d_in "Density of upstream fluid";
        Real dp "Pressure drop over the pipe";
        Real h_in "Specific enthalpy of upstream fluid";
        Real h_out "Specific enthalpy of downstream fluid";
        Real m_flow "Mass flow rate through the pipe";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_channel_summary;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_portA
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_portA;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_portB
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_portB;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_port
        Real H_flow "Specific enthalpy flow rate";
        Real X[5] "Independent component mass fractions";
        Real h "Specific enthalpy of mixture";
        Real mX_flow[5] "Independent component mass flow rate";
        Real m_flow "mass flow rate";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_port;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_summary
        Real M "Total mass of the pipe";
        Real T_in "Temperature of upstream fluid";
        Real T_out "Temperature of downstream fluid";
        constant Real V "Total volume of the pipe";
        Real d_in "Density of upstream fluid";
        Real dp "Pressure drop over the pipe";
        Real h_in "Specific enthalpy of upstream fluid";
        Real h_out "Specific enthalpy of downstream fluid";
        Real m_flow "Mass flow rate through the pipe";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_summary;
    record fmumodelica_rec_coolStack_subStack_cathode_channel_wall
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_cathode_channel_wall;
    record fmumodelica_rec_coolStack_subStack_cell
        parameter Real A_cell "Cell active area";
        parameter Real CF_0_eod "Calibration factor for electro-osmotic drag";
        parameter Real CF_0_gasDiffusion[2] "Calibration factor for each diffusive sepcies";
        parameter Real CF_0_waterContent "Calibration factor for water content";
        parameter Real CF_0_waterDiffusion "Calibration factor for water diffusion";
        parameter Real CF_N_eod[5] "Calibration factor for electro-osmotic drag (set if non-uniform)";
        parameter Real CF_N_gasDiffusion[5,2] "Calibration factor for each diffusive species (set if non-uniform)";
        parameter Real CF_N_waterContent[5] "Calibration factor for water content (set if non-uniform)";
        parameter Real CF_N_waterDiffusion[5] "Calibration factor for water diffusion (set if non-uniform)";
        parameter Real C_cell "Cell heat capacity, including substrate and electrolyte";
        Real E0_cell[5] "Single cell Nernst's potential in each node at operating conditions";
        parameter Real E0_ref "Single cell Nernst's potential at standard conditions";
        parameter Real EW_m "Membrane equivalent weight";
        Real E_act_cell[5] "Single cell activation loss in each node";
        Real E_conc_cell[5] "Single cell concentration loss in each node";
        constant Real E_cont_cell[5] "Single cell voltage loss due to contaminants in each node";
        Real E_ohm_cell[5] "Single cell ohmic loss in each node";
        Real I_stack "Stack current";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real P_cell[5] "Single cell electrical power output in each node";
        Real P_stack "Stack electrical power output";
        Real Q_cell[5] "Sigle cell heat production in each node, coming from enthalpy flows and generated power";
        Real Q_stack "Stack heat production, coming from enthalpy flows and generated power";
        Real Q_wall_an_cell[5] "Single cell heat flow rate between anode channel and cell substrate in each node";
        Real Q_wall_an_stack "Stack heat flow rate between anode channel and cell substrate";
        Real Q_wall_cath_cell[5] "Single cell heat flow rate between cathode channel and cell substrate in each node";
        Real Q_wall_cath_stack "Stack heat flow rate between cathode channel and cell substrate";
        Real Q_wall_cell[5] "Single cell heat flow rate between cell substrate and external object in each node";
        Real Q_wall_stack "Stack heat flow rate between cell substrate and external object";
        constant Real S_reac_an[4] "Stoichiometry vector for reactions at the anode side: - if consumed, + if generated";
        constant Real S_reac_cath[5] "Stoichiometry vector for reactions at the cathode side: - if consumed, + if generated";
        Real T_an[5] "Anodic gas temperature in each node at channel-membrane interface";
        Real T_cath[5] "Cathodic gas temperature in each node at channel-membrane interface";
        Real T_cell[5] "Cell substrate temperature in each node";
        Real T_cell_avg "Average cell substrate temperature";
        constant Boolean T_from_h "Calculate anode and cathode temperature explicitly from enthalpy";
        parameter Real Tstart "Temperature initialization value";
        Real V_cell "Single cell voltage";
        Real V_stack "Stack voltage";
        fmumodelica_rec_coolStack_subStack_cell_Voc_stack Voc_stack[5] annotation(Dialog(tab = "Components"));
        Real X_an[5,4] "Anodic gas mass fractions in each node at channel-membrane interface";
        Real X_cath[5,5] "Cathodic gas mass fractions in each node at channel-membrane interface";
        fmumodelica_rec_coolStack_subStack_cell_activationLoss activationLoss annotation(Dialog(tab = "Components"));
        parameter Real alpha "Charge transfer coefficient";
        constant String an_names[2] "Required species in the anodic medium";
        fmumodelica_rec_coolStack_subStack_cell_anode anode[5] annotation(Dialog(tab = "Components"));
        constant Real c1 "Voltage derivative by temperature";
        constant String cath_names[2] "Required species in the cathodic medium";
        fmumodelica_rec_coolStack_subStack_cell_cathode cathode[5] annotation(Dialog(tab = "Components"));
        Real checkEnergyBalance;
        Real checkMassBalance;
        fmumodelica_rec_coolStack_subStack_cell_concentrationLoss concentrationLoss annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss contaminantsLoss annotation(Dialog(tab = "Components"));
        Real dTdt[5] "Time-derivative of cell substrate temperature in each node";
        Real dUdt "Time-derivative of membrane internal energy";
        constant String diffusiveSpecies[2] "Species diffusing through membrane";
        Real eff_cell "Cell efficiency in terms of output power/energy content of consumed hydrogen";
        Real eff_volt_cell "Cell efficiency in terms of output voltage/ideal voltage";
        fmumodelica_rec_coolStack_subStack_cell_electroOsmoticDrag electroOsmoticDrag annotation(Dialog(tab = "Components"));
        constant Boolean enable_setting " = true to set cell parameters";
        fmumodelica_rec_coolStack_subStack_cell_gasDiffusion gasDiffusion annotation(Dialog(tab = "Components"));
        Real h_an[5] "Anodic gas specific enthalpy in each node at channel-membrane interface";
        Real h_cath[5] "Cathodic gas specific enthalpy in each node at channel-membrane interface";
        Real h_conv_an[5] "Heat transfer coefficient between fluid and anode substrate";
        Real h_conv_cath[5] "Heat transfer coefficient between fluid and cathode substrate";
        constant Integer iH2O_an[1] "Index of H2O in the anodic medium";
        constant Integer iH2O_cath[1] "Index of H2O in the cathodic medium";
        Real j "Current density referred to cell active area";
        constant Real j_0 "Exchange current density for activation loss";
        Real j_ionic[5] "Current density applied to each node";
        constant Real j_loss "Activation current density loss";
        constant Real m "Pre-exponential factor for concentration loss";
        Real mX_flow_an_reac[5,4] "Mass flow rates of each reacting species only from anode channel in each node for the stack (> 0 from anode channel to membrane)";
        Real mX_flow_an_transport[5,4] "Water/gas transport at anode side (> 0 from anode to cathode)";
        Real mX_flow_cath_reac[5,5] "Mass flow rates of each reacting species only from cathode channel in each node for the stack (> 0 from cathode channel to membrane)";
        Real mX_flow_cath_transport[5,5] "Water/gas transport at cathode side (> 0 from cathode to anode)";
        constant Real n "Exponential factor for concentration loss";
        constant Integer nS_an "Number of chemical species in the anodic medium";
        constant Integer nS_cath "Number of chemical species in the cathodic medium";
        parameter Integer n_cell "Number of series-connected cell";
        constant Real n_e "Number of exchanged electrons per unit amount of reference chemical species";
        constant Real n_e_exch "Number of exchanged electrons";
        fmumodelica_rec_coolStack_subStack_cell_ohmicLoss ohmicLoss annotation(Dialog(tab = "Components"));
        Real p_an[5] "Anodic gas pressure in each node at channel-membrane interface";
        Real p_an_partial[5,4] "Partial pressure of each chemical species in each node at membrane-anode interface ";
        Real p_cath[5] "Cathodic gas pressure in each node at channel-membrane interface";
        Real p_cath_partial[5,5] "Partial pressure of each chemical species in each node at membrane-cathode interface";
        fmumodelica_rec_coolStack_subStack_cell_pin_n pin_n annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_pin_p pin_p annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_port_an port_an[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_port_cath port_cath[5] annotation(Dialog(tab = "Components"));
        parameter Real pstart "Pressure initialization value";
        parameter Real rho_dry_m "Dry membrane density";
        fmumodelica_rec_coolStack_subStack_cell_sourceV sourceV[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_wall wall[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_wall_an wall_an[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_wall_cath wall_cath[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_waterContent waterContent annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_waterDiffusion waterDiffusion annotation(Dialog(tab = "Components"));
        Real y_an[5,4] "Anodic gas molar-based composition in each node";
        Real y_cath[5,5] "Cathodic gas molar-based composition in each node";
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack_cell;
    record fmumodelica_rec_coolStack_subStack_cell_Voc_stack
        Real y "Value of Real output";
    end fmumodelica_rec_coolStack_subStack_cell_Voc_stack;
    record fmumodelica_rec_coolStack_subStack_cell_activationLoss
        Real E_loss_cell[5] "Single cell voltage loss in each node";
        Real E_loss_stack[5] "Stack voltage loss in each node";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_cell[5] "Cell substrate temperature in each node";
        parameter Real alpha "Charge transfer coefficient";
        constant Boolean enableInternal;
        constant Real j_0 "Exchange current density";
        Real j_ionic[5] "Current density in each node";
        constant Real j_loss "Current density loss";
        parameter Integer n_cell "Number of series-connected cells";
        constant Real n_e "Number of exchanged electrons";
        fmumodelica_rec_coolStack_subStack_cell_activationLoss_pin_n pin_n[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_activationLoss_pin_p pin_p[5] annotation(Dialog(tab = "Components"));
        Real powerLoss_stack "Stack power loss";
    end fmumodelica_rec_coolStack_subStack_cell_activationLoss;
    record fmumodelica_rec_coolStack_subStack_cell_activationLoss_pin_n
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_activationLoss_pin_n;
    record fmumodelica_rec_coolStack_subStack_cell_activationLoss_pin_p
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_activationLoss_pin_p;
    record fmumodelica_rec_coolStack_subStack_cell_anode
        Real MM "Molar mass (of mixture or single fluid)";
        Real Rg "Gas constant (of mixture if applicable)";
        Real T "Temperature of medium";
        Real T_degC "Temperature of medium in [degC]";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real Xi[4] "Structurally independent mass fractions";
        Real Z[4] "Component mole fractions";
        constant AssertionLevel assertlevel;
        Real cp "Specific heat capacity";
        Real d "Density of medium";
        Real dUZT[4] "Derivative of inner energy by moles at constant temperature";
        Real ddTp "Derivative of density by temperature at constant pressure";
        Real ddpT "Derivative of density by pressure at constant temperature";
        Real ddx[4] "Derivative vector of density by change in mass composition";
        Real duTp "Derivative of specific inner energy by temperature at constant p";
        constant Real dupT "Derivative of specific inner energy by pressure at constant T, zero for ideal gas";
        Real g_formation[4] "Component Gibbs energy of formation, molar base!";
        Real h "Specific enthalpy of medium";
        Real h_component[4] "Specific enthalpies of the component gases";
        Real p "Absolute pressure of medium";
        Real p_bar "Absolute pressure of medium in [bar]";
        constant Boolean preferredMediumStates "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
        Real s_component[4] "Component specific entropy";
        fmumodelica_rec_coolStack_subStack_cell_anode_state state annotation(Dialog(tab = "Components"));
        Real u "Specific internal energy of medium";
        Real u_comp[4] "Specific internal energy per component";
    end fmumodelica_rec_coolStack_subStack_cell_anode;
    record fmumodelica_rec_coolStack_subStack_cell_anode_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cell_anode_state;
    record fmumodelica_rec_coolStack_subStack_cell_cathode
        Real MM "Molar mass (of mixture or single fluid)";
        Real Rg "Gas constant (of mixture if applicable)";
        Real T "Temperature of medium";
        Real T_degC "Temperature of medium in [degC]";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real Xi[5] "Structurally independent mass fractions";
        Real Z[5] "Component mole fractions";
        constant AssertionLevel assertlevel;
        Real cp "Specific heat capacity";
        Real d "Density of medium";
        Real dUZT[5] "Derivative of inner energy by moles at constant temperature";
        Real ddTp "Derivative of density by temperature at constant pressure";
        Real ddpT "Derivative of density by pressure at constant temperature";
        Real ddx[5] "Derivative vector of density by change in mass composition";
        Real duTp "Derivative of specific inner energy by temperature at constant p";
        constant Real dupT "Derivative of specific inner energy by pressure at constant T, zero for ideal gas";
        Real g_formation[5] "Component Gibbs energy of formation, molar base!";
        Real h "Specific enthalpy of medium";
        Real h_component[5] "Specific enthalpies of the component gases";
        Real p "Absolute pressure of medium";
        Real p_bar "Absolute pressure of medium in [bar]";
        constant Boolean preferredMediumStates "= true if StateSelect.prefer shall be used for the independent property variables of the medium";
        Real s_component[5] "Component specific entropy";
        fmumodelica_rec_coolStack_subStack_cell_cathode_state state annotation(Dialog(tab = "Components"));
        Real u "Specific internal energy of medium";
        Real u_comp[5] "Specific internal energy per component";
    end fmumodelica_rec_coolStack_subStack_cell_cathode;
    record fmumodelica_rec_coolStack_subStack_cell_cathode_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_coolStack_subStack_cell_cathode_state;
    record fmumodelica_rec_coolStack_subStack_cell_concentrationLoss
        Real E_loss_cell[5] "Single cell voltage loss in each node";
        Real E_loss_stack[5] "Stack voltage loss in each node";
        constant Integer N "Number of along-the-channel discretization nodes";
        constant Boolean enableInternal;
        Real j_ionic[5] "Current density in each node";
        constant Real m "Pre-exponential coefficient";
        constant Real n "Exponential coefficient";
        parameter Integer n_cell "Number of series-connected cells";
        fmumodelica_rec_coolStack_subStack_cell_concentrationLoss_pin_n pin_n[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_concentrationLoss_pin_p pin_p[5] annotation(Dialog(tab = "Components"));
        Real powerLoss_stack "Stack power loss";
    end fmumodelica_rec_coolStack_subStack_cell_concentrationLoss;
    record fmumodelica_rec_coolStack_subStack_cell_concentrationLoss_pin_n
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_concentrationLoss_pin_n;
    record fmumodelica_rec_coolStack_subStack_cell_concentrationLoss_pin_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_concentrationLoss_pin_p;
    record fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss
        constant Real E_loss_cell[5] "Single cell voltage loss in each node";
        constant Real E_loss_stack[5] "Stack voltage loss in each node";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_cell[5] "Cell substrate temperature in each node";
        constant Boolean enableInternal;
        constant Integer nCont "Number of considered contaminants";
        parameter Integer n_cell "Number of series-connected cells";
        Real p_an_partial[5,4] "Partial pressure of each chemical species in each node at anode-membrane interface";
        fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss_pin_n pin_n[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss_pin_p pin_p[5] annotation(Dialog(tab = "Components"));
        constant Real powerLoss_stack "Stack power loss";
        Real y_an[5,4] "Molar-based composition at anode-membrane interface";
    end fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss;
    record fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss_pin_n
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss_pin_n;
    record fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss_pin_p
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_contaminantsLoss_pin_p;
    record fmumodelica_rec_coolStack_subStack_cell_electroOsmoticDrag
        parameter Real A_cell "Cell active area";
        parameter Real CF_0 "Correction factor (1 by default)";
        parameter Real CF_N[5] "Set if CF_0 is non-uniform";
        parameter Real EW_m "Membrane equivalent weight";
        Real I_cell[5] "Electrical current per each cell node";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_an[5] "Temperature at the anode side in each node";
        Real T_cath[5] "Temperature at the cathode side in each node";
        Real T_cell[5] "Temperature of each cell node";
        constant Real coeffs[2] "Coefficients for c[1] + c[2]*lambda + ...";
        constant Boolean enableInternal " = true to enable selectability of 'Internal' parameters";
        constant Integer iH2O_an "Index of H2O in anodic medium";
        constant Integer iH2O_cath "Index of H2O in cathodic medium";
        Real lambda[5] "Membrane water content";
        Real m_flow[5] "Mass flow rate through the membrane in each node (> 0 from anode to cathode)";
        parameter Integer n_cell "Number of series-connected cells";
        Real n_eod[5] "Electro-osmotic drag coefficient (approximately 0.27 to 5)";
        Real p_an_partial[5,4] "Partial pressure of each chemical species at the anode in each node";
        Real p_cath_partial[5,5] "Partial pressure of each chemical species at the cathode in each node";
        parameter Real rho_dry_m "Dry membrane density";
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack_cell_electroOsmoticDrag;
    record fmumodelica_rec_coolStack_subStack_cell_gasDiffusion
        parameter Real A_cell "Cell active area";
        parameter Real CF_0[2] "Correction factor (1 by default)";
        parameter Real CF_N[5,2] "Set if CF_0 is non-uniform";
        parameter Real EW_m "Membrane equivalent weight";
        constant Real K_perm[5,2] "Permeability coefficient (diffusion*solubility)";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_an[5] "Temperature at the anode side in each node";
        Real T_cath[5] "Temperature at the cathode side in each node";
        Real T_cell[5] "Temperature of each cell node";
        constant String diffusiveSpecies[2] "Name of chemical species to include in diffusion (e.g., {'N2'})";
        constant Boolean enableInternal " = true to enable selectability of 'Internal' parameters";
        Real f_w[5] "Volume fraction of water in each membrane node";
        Real lambda[5] "Membrane average water content in each node";
        constant Real mX_flow_an[5,4] "Diffusive mass flow rates of each chemical species in each node (> 0 from anode to cathode)";
        constant Real mX_flow_cath[5,5] "Diffusive mass flow rates of each chemical species in each node (> 0 from cathode to anode)";
        constant Real mX_flow_diff[5,2] "Mass flow rates of diffusive species only (> 0 from anode to cathode)";
        constant Integer nDiff;
        parameter Integer n_cell "Number of series-connected cells";
        Real p_an_partial[5,4] "Partial pressure of each chemical species at the anode in each node";
        Real p_cath_partial[5,5] "Partial pressure of each chemical species at the cathode in each node";
        parameter Real rho_dry_m "Dry membrane density";
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack_cell_gasDiffusion;
    record fmumodelica_rec_coolStack_subStack_cell_ohmicLoss
        Real ASR[5] "Area specific resistance in each node";
        parameter Real A_cell "Cell active area";
        Real E_loss_cell[5] "Single cell voltage loss in each node";
        Real E_loss_stack[5] "Stack voltage loss in each node";
        Real I[5] "Current in each node";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_cell[5] "Cell substrate temperature in each node";
        constant Boolean enableInternal;
        Real lambda_mean[5] "Average water content in each membrane node";
        parameter Integer n_cell "Number of series-connected cells";
        fmumodelica_rec_coolStack_subStack_cell_ohmicLoss_pin_n pin_n[5] annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_ohmicLoss_pin_p pin_p[5] annotation(Dialog(tab = "Components"));
        Real powerLoss_stack "Stack power loss";
        Real sigma[5] "Membrane conductivity in each node";
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack_cell_ohmicLoss;
    record fmumodelica_rec_coolStack_subStack_cell_ohmicLoss_pin_n
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_ohmicLoss_pin_n;
    record fmumodelica_rec_coolStack_subStack_cell_ohmicLoss_pin_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_ohmicLoss_pin_p;
    record fmumodelica_rec_coolStack_subStack_cell_pin_n
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_pin_n;
    record fmumodelica_rec_coolStack_subStack_cell_pin_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_pin_p;
    record fmumodelica_rec_coolStack_subStack_cell_port_an
        Real H_flow "Specific enthalpy flow rate";
        Real X[4] "Independent component mass fractions";
        Real h "Specific enthalpy of mixture";
        Real mX_flow[4] "Independent component mass flow rate";
        Real m_flow "mass flow rate";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cell_port_an;
    record fmumodelica_rec_coolStack_subStack_cell_port_cath
        Real H_flow "Specific enthalpy flow rate";
        Real X[5] "Independent component mass fractions";
        Real h "Specific enthalpy of mixture";
        Real mX_flow[5] "Independent component mass flow rate";
        Real m_flow "mass flow rate";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_cell_port_cath;
    record fmumodelica_rec_coolStack_subStack_cell_sourceV
        Real i "Current flowing from pin p to pin n";
        fmumodelica_rec_coolStack_subStack_cell_sourceV_n n annotation(Dialog(tab = "Components"));
        fmumodelica_rec_coolStack_subStack_cell_sourceV_p p annotation(Dialog(tab = "Components"));
        Real v "Voltage between pin p and n (= p.v - n.v) as input signal";
    end fmumodelica_rec_coolStack_subStack_cell_sourceV;
    record fmumodelica_rec_coolStack_subStack_cell_sourceV_n
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_sourceV_n;
    record fmumodelica_rec_coolStack_subStack_cell_sourceV_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_cell_sourceV_p;
    record fmumodelica_rec_coolStack_subStack_cell_wall
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_cell_wall;
    record fmumodelica_rec_coolStack_subStack_cell_wall_an
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_cell_wall_an;
    record fmumodelica_rec_coolStack_subStack_cell_wall_cath
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_cell_wall_cath;
    record fmumodelica_rec_coolStack_subStack_cell_waterContent
        parameter Real A_cell "Cell active area";
        parameter Real CF_0 "Correction factor (1 by default)";
        parameter Real CF_N[5] "Set if CF_0 is non-uniform";
        parameter Real EW_m "Membrane equivalent weight";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_an[5] "Temperature at the anode side in each node";
        Real T_cath[5] "Temperature at the cathode side in each node";
        Real T_cell[5] "Temperature of each cell node";
        Real a_an_H2O[5] "H2O activity at anode side in each node";
        Real a_cath_H2O[5] "H2O activity at cathode side in each node";
        Real a_cell_H2O[5] "Membrane average water activity in each node";
        constant Boolean enableInternal " = true to enable selectability of 'Internal' parameters";
        Real f_w[5] "Volume fraction of water in each membrane node";
        constant Integer iH2O_an "Index of H2O in anodic medium";
        constant Integer iH2O_cath "Index of H2O in cathodic medium";
        Real lambda[5] "Membrane average water content in each node | Number of water molecules per available site (HSO3- group)";
        Real lambda_an[5] "Membrane water content at the anode-side in each node";
        Real lambda_cath[5] "Membrane water content at the cathode-side in each node";
        parameter Integer n_cell "Number of series-connected cells";
        Real p_an_partial[5,4] "Partial pressure of each chemical species at the anode in each node";
        Real p_cath_partial[5,5] "Partial pressure of each chemical species at the cathode in each node";
        parameter Real rho_dry_m "Dry membrane density";
        parameter Real v_dry "Dry membrane molar-based specific volume";
        constant Real v_w "Water molar-based specific volume";
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack_cell_waterContent;
    record fmumodelica_rec_coolStack_subStack_cell_waterDiffusion
        parameter Real A_cell "Cell active area";
        parameter Real CF_0 "Correction factor (1 by default)";
        parameter Real CF_N[5] "Set if CF_0 is non-uniform";
        Real D_diff[5] "Water diffusion coefficient through membrane in each node";
        parameter Real EW_m "Membrane equivalent weight";
        constant Integer N "Number of along-the-channel discretization nodes";
        Real T_an[5] "Temperature at the anode side in each node";
        Real T_cath[5] "Temperature at the cathode side in each node";
        Real T_cell[5] "Temperature of each cell node";
        Real c_an_H2O[5] "H2O concentration at the anode side in each node";
        Real c_cath_H2O[5] "H2O concentration at the cathode side in each node";
        constant Boolean enableInternal " = true to enable selectability of 'Internal' parameters";
        constant Integer iH2O_an "Index of H2O in anodic medium";
        constant Integer iH2O_cath "Index of H2O in cathodic medium";
        Real lambda[5] "Membrane water content";
        Real lambda_an[5] "Membrane water content at the anode-side in each node";
        Real lambda_cath[5] "Membrane water content at the cathode-side in each node";
        Real m_flow[5] "Mass flow rate through the membrane in each node (> 0 from anode to cathode)";
        parameter Integer n_cell "Number of series-connected cells";
        Real p_an_partial[5,4] "Partial pressure of each chemical species at the anode in each node";
        Real p_cath_partial[5,5] "Partial pressure of each chemical species at the cathode in each node";
        parameter Real rho_dry_m "Dry membrane density";
        parameter Real z "Membrane thickness";
    end fmumodelica_rec_coolStack_subStack_cell_waterDiffusion;
    record fmumodelica_rec_coolStack_subStack_drain_anode
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_drain_anode;
    record fmumodelica_rec_coolStack_subStack_drain_cathode
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_drain_cathode;
    record fmumodelica_rec_coolStack_subStack_feed_anode
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_feed_anode;
    record fmumodelica_rec_coolStack_subStack_feed_cathode
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_coolStack_subStack_feed_cathode;
    record fmumodelica_rec_coolStack_subStack_pin_n
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_pin_n;
    record fmumodelica_rec_coolStack_subStack_pin_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_coolStack_subStack_pin_p;
    record fmumodelica_rec_coolStack_subStack_summary
        constant Integer N "Number of discretizations";
        Real P_stack "Total stack power";
        Real Q_stack "Total heat produced in cell";
        Real T_stack[5] "Stack temperature";
        Real V_cell "Cell voltage";
        Real V_stack "Stack voltage";
        Real anode_stoich "Anode stoichiometry";
        Real cathode_stoich "Cathode stoichiometry";
        Real dp_anode "Pressure drop anode side";
        Real dp_cathode "Pressure drop cathode side";
        Real j_external "External current density";
        Real m_flow_an "Anode outlet mass flow rate";
        Real m_flow_cath "Cathode outlet mass flow rate";
        parameter Integer n_cell "Number of cells";
    end fmumodelica_rec_coolStack_subStack_summary;
    record fmumodelica_rec_coolStack_subStack_wall
        Real Q_flow "Heat flow rate (positive if flowing from outside into the component)";
        Real T "Port temperature";
    end fmumodelica_rec_coolStack_subStack_wall;
    record fmumodelica_rec_coolStack_summary
        constant Integer N "Number of discretizations";
        Real P_stack "Total stack power";
        Real Q_stack "Total heat produced in cell";
        Real T_cool[5] "Temperature in cooling channel";
        Real T_stack[5] "Stack temperature";
        Real V_cell "Cell voltage";
        Real V_stack "Stack voltage";
        Real anode_stoich "Anode stoichiometry";
        Real cathode_stoich "Cathode stoichiometry";
        Real dp_anode "Pressure drop anode side";
        Real dp_cathode "Pressure drop cathode side";
        Real dp_cooling "Pressure drop cooling pipe";
        Real j_external "External current density";
        Real m_flow_an "Anode outlet mass flow rate";
        Real m_flow_cath "Cathode outlet mass flow rate";
        Real m_flow_cool "Mass flow rate in cooling channel";
        parameter Integer n_cell "Number of cells";
    end fmumodelica_rec_coolStack_summary;
    fmumodelica_rec_coolStack coolStack(A_anode(fixed = false,unit = "m2"),A_cathode = 0.0015552847130677967,A_cell(unit = "m2") = 0.03,A_cooling(fixed = false,unit = "m2"),A_crosssection_cell(unit = "m2") = 3.6e-05,A_heat_anode(fixed = false,unit = "m2"),A_heat_cathode = 0.011365810981789832,A_heat_cooling(fixed = false,unit = "m2"),CF_AnodeSideHeatTransfer = 1.0,CF_AnodeSidePressureLoss = 1.0,CF_CathodeSideHeatTransfer = 1.0,CF_CathodeSidePressureLoss = 0.4,CF_CoolingHeatTransfer = 1.0,CF_CoolingPressureLoss = 1.0,C_anode(fixed = false,unit = "m"),C_cathode = 0.13980087308474579,C_cooling(fixed = false,unit = "m"),D_anode(unit = "m") = 0.023,D_cathode = 0.0445,D_cooling(unit = "m") = 0.0375,Dhyd_anode(fixed = false,unit = "m"),Dhyd_cathode = 0.0445,Dhyd_cooling(fixed = false,unit = "m"),E0_ref = 1.229,EW_m = 1.1,L_anode(unit = "m") = 0.0813,L_cathode = 0.0813,L_cooling(unit = "m") = 8.13,M_stack(min = 0.0,unit = "kg") = 10.1,N(start = 5) = 5,T_start_anode(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_cathode(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_cooling(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in_anode(fixed = false,min = 0.0,unit = "K"),T_start_in_cathode(fixed = false,min = 0.0,unit = "K"),T_start_in_cooling(fixed = false,min = 0.0,unit = "K"),T_start_out_anode(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out_cathode(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out_cooling(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V_anode(fixed = false,unit = "m3"),V_cathode = 0.00012644464717241188,V_cooling(fixed = false,unit = "m3"),X_feed_an(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_feed_cath(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_start_anode = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},X_start_cathode = {0.0,0.0,0.0,0.77,0.23},X_start_cooling(min = {0.0},max = {1.0},unit = "1") = {1.0},alpha = 0.5,c1 = 0.00085,c_stack(unit = "J/(kg.K)") = 2000.0,checkEnergyBalance(unit = "W"),checkMassBalance(unit = "kg/s"),coolingPipe(A(each fixed = false,each unit = "m2"),A_heat(each fixed = false,each unit = "m2"),A_heat_fixed(start = true) = true,A_heat_internal(each fixed = false,each unit = "m2"),A_heat_max(unit = "m2") = 1000.0,A_heat_min(unit = "m2") = 1e-09,A_heat_nom(unit = "m2") = 1.0,A_heat_set(fixed = false,unit = "m2"),A_heat_start(fixed = false,unit = "m2"),A_mean(fixed = false,unit = "m2"),CF_HeatTransfer(fixed = false),CF_PressureLoss(fixed = false),CF_length = 1.0,Delta_max_twoPhaseFraction = 100.0,Delta_min_twoPhaseFraction = 1.0,Dhyd(each fixed = false,each unit = "m"),Ek_flow = {0.0,0.0,0.0,0.0,0.0,0.0},Fr(each unit = "1"),L(each fixed = false,each unit = "m"),L_internal(each fixed = false,each unit = "m"),L_max(unit = "m") = 1000.0,L_min(unit = "m") = 0.001,L_nom(unit = "m") = 1.0,L_set(fixed = false,unit = "m"),L_start(fixed = false,unit = "m"),L_total(fixed = false,unit = "m"),M(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg"),Mtot(min = 0.0,unit = "kg"),NA(start = 1) = 1,NB(start = 1) = 1,Q(each unit = "W"),Q_flow0(unit = "W") = 100.0,Q_fluid = {0.0,0.0,0.0,0.0,0.0},Q_tot(unit = "W"),Q_wall(each unit = "W"),Re(each unit = "1"),Re_liq(each unit = "1"),TA(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),TA_out(min = 0.0,max = 10000.0,unit = "K"),TB(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),TB_out(min = 0.0,max = 10000.0,unit = "K"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_fluid(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_liqA(min = 0.0,max = 10000.0,unit = "K"),T_liqB(min = 0.0,max = 10000.0,unit = "K"),T_liq(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_liq_out(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),T_out0(min = 0.0,max = 10000.0,unit = "K") = 273.15,T_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_vapA(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),T_vapB(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),T_vap(min = {0.0,0.0,0.0,0.0,0.0},start = {288.15,288.15,288.15,288.15,288.15},each unit = "K"),T_vap_out(min = 0.0,max = 10000.0,unit = "K"),T_wall(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),V(each fixed = false,each unit = "m3"),V_internal(each fixed = false,each unit = "m3"),V_tot(fixed = false,unit = "m3"),Vtot(fixed = false,unit = "m3"),XA(fixed = false,min = {0.0},max = {1.0},unit = "1"),XB(fixed = false,min = {0.0},max = {1.0},unit = "1"),X = {{1.0,1.0,1.0,1.0,1.0}},X_start(fixed = false,min = {0.0},max = {1.0},unit = "1"),alpha(each unit = "W/(m2.K)"),c_pseudo_twoPhaseFraction = {0.0,0.0,0.0,0.0,0.0},c_pseudo_twoPhaseFraction_const = 0.035,cmax_twoPhaseFraction = 0.2,cmin_twoPhaseFraction = 0.05,cp(each unit = "J/(kg.K)"),cv(each unit = "J/(kg.K)"),dA(min = 0.0,unit = "kg/m3"),dA_out(min = 0.0,unit = "kg/m3"),dB(min = 0.0,unit = "kg/m3"),dB_out(min = 0.0,unit = "kg/m3"),dEk_flow = {0.0,0.0,0.0,0.0,0.0},dUdt(unit = "W"),d(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dmdt(unit = "kg/s"),dp0(unit = "Pa") = 100.0,dp(each unit = "Pa"),dp_smooth(fixed = false,unit = "Pa"),dpaccel = {0.0,0.0,0.0,0.0,0.0},drhodx(each unit = "kg/m3"),dynamicStabilizerRapidity_twoPhaseFraction = false,etaA(min = 0.0,unit = "Pa.s"),etaB(min = 0.0,unit = "Pa.s"),eta(min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa.s"),flowFraction0 = 1.0,friction(A(each fixed = false,each unit = "m2"),Av(fixed = false,unit = "m2"),Dhyd(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "m"),F_user(fixed = false),L(each fixed = false,each unit = "m"),d(min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dp0(fixed = false,unit = "Pa"),dp(each unit = "Pa"),dp_smooth(fixed = false,unit = "Pa"),eta(min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "Pa.s"),flowFraction0(fixed = false,min = 1e-15),from_dp(start = false) = false,m_flow(each unit = "kg/s"),m_flow_small(fixed = false,unit = "kg/s"),mflow0(fixed = false,unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,n_channels(each fixed = false,min = {1.0,1.0,1.0,1.0,1.0}),n_exp(min = 1.0,max = 3.0) = 2.0,pos_rel_in(fixed = false),pos_rel_out(fixed = false),positiveFlow(fixed = false),sat(cp_liq(min = {0.0,0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},each unit = "J/(kg.K)"),cp_vap(min = {0.0,0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},each unit = "J/(kg.K)"),d_liq(min = {1e-08,1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0,100000.0},each unit = "kg/m3"),d_vap(min = {1e-08,1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0,100000.0},each unit = "kg/m3"),eta_liq(min = {0.0,0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa.s"),eta_vap(min = {0.0,0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa.s"),lam_liq(min = {0.0,0.0,0.0,0.0,0.0,0.0},max = {500.0,500.0,500.0,500.0,500.0,500.0},each unit = "W/(m.K)"),lam_vap(min = {0.0,0.0,0.0,0.0,0.0,0.0},max = {500.0,500.0,500.0,500.0,500.0,500.0},each unit = "W/(m.K)"),x(min = {-1.0,-1.0,-1.0,-1.0,-1.0,-1.0},max = {2.0,2.0,2.0,2.0,2.0,2.0},each unit = "kg/kg")),sigma(each unit = "N/m"),twoPhaseFraction(each unit = "1"),use_yd0 = false,yd0(min = 0.0) = 1.0),frictionDistribution = Modelon_ThermoFluid_Choices_FrictionDistribution.VolFric,from_dp(start = false) = false,g = 9.80665,generateEventForReversal(start = false) = false,hA(unit = "J/kg"),hB(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),h_liqA(unit = "J/kg"),h_liqB(unit = "J/kg"),h_liq(each unit = "J/kg"),h_start(each fixed = false,each unit = "J/kg"),h_start_in(fixed = false,unit = "J/kg"),h_start_out(fixed = false,unit = "J/kg"),h_vapA(unit = "J/kg"),h_vapB(unit = "J/kg"),h_vap(each unit = "J/kg"),htcoeff(A(each fixed = false,each unit = "m2"),A_heat(each fixed = false,each unit = "m2"),CF_length = 1.0,Dhyd(each fixed = false,each unit = "m"),F_user(fixed = false),Fr(each unit = "1"),L(fixed = false,unit = "m"),Nu_1ph(each unit = "1"),Pr(each unit = "1"),Q_s(each unit = "W"),Re(each unit = "1"),Re_liq(each unit = "1"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_wall(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),alpha(start = {1500.0,1500.0,1500.0,1500.0,1500.0},each unit = "W/(m2.K)"),cp(each unit = "J/(kg.K)"),eta(min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa.s"),k_1ph(each unit = "W/(m2.K)"),lam(each unit = "W/(m.K)"),m_flow(each unit = "kg/s"),n(start = 5) = 5,p(each unit = "Pa"),pcrit(unit = "Pa") = 22064000.0,sat(cp_liq(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},each unit = "J/(kg.K)"),cp_vap(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},each unit = "J/(kg.K)"),d_liq(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},each unit = "kg/m3"),d_vap(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},each unit = "kg/m3"),eta_liq(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa.s"),eta_vap(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa.s"),lam_liq(min = {0.0,0.0,0.0,0.0,0.0},max = {500.0,500.0,500.0,500.0,500.0},each unit = "W/(m.K)"),lam_vap(min = {0.0,0.0,0.0,0.0,0.0},max = {500.0,500.0,500.0,500.0,500.0},each unit = "W/(m.K)"),x(min = {-1.0,-1.0,-1.0,-1.0,-1.0},max = {2.0,2.0,2.0,2.0,2.0},each unit = "kg/kg"))),includeAcceleration(start = false) = false,includeStaticHead(start = false) = false,initFromEnthalpy(start = false) = false,initOpt = Modelon_ThermoFluid_Choices_InitOptions.initialValues,kineticEnergyInBalance(start = false) = false,lam(each unit = "W/(m.K)"),length_fixed(start = true) = true,levels(each fixed = false,each unit = "m"),m_flow(each unit = "kg/s"),m_flow_mean(unit = "kg/s"),m_flow_start(fixed = false,unit = "kg/s"),mflow_A_in(unit = "kg/s"),mflow_B_in(unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,n_channels(each fixed = false,min = {1.0,1.0,1.0,1.0,1.0}),n_fric(start = 5) = 5,ni(start = 5) = 5,pA(min = 0.0,unit = "Pa"),pB(min = 0.0,unit = "Pa"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_satA(min = 0.0,unit = "Pa"),p_satB(min = 0.0,unit = "Pa"),p_sat(min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa"),p_start(each fixed = false,each unit = "Pa"),p_start_in(fixed = false,unit = "Pa"),p_start_out(fixed = false,unit = "Pa"),portA(X_outflow = {{1.0}},h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),portB(X_outflow = {{1.0}},h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),pos_rel_in = 0.0,pos_rel_out = 1.0,positiveFlow(fixed = false),q(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),q_fluid(Q_flow = {0.0,0.0,0.0,0.0,0.0},T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),quality(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),satA(cp_liq(min = 0.0,max = 1000000.0,start = 1000.0,unit = "J/(kg.K)"),cp_vap(min = 0.0,max = 1000000.0,start = 1000.0,unit = "J/(kg.K)"),d_liq(min = 1e-08,max = 100000.0,start = 1.0,unit = "kg/m3"),d_vap(min = 1e-08,max = 100000.0,start = 1.0,unit = "kg/m3"),eta_liq(min = 0.0,max = 100000000.0,start = 0.001,unit = "Pa.s"),eta_vap(min = 0.0,max = 100000000.0,start = 0.001,unit = "Pa.s"),lam_liq(min = 0.0,max = 500.0,start = 1.0,unit = "W/(m.K)"),lam_vap(min = 0.0,max = 500.0,start = 1.0,unit = "W/(m.K)"),x(min = -1.0,max = 2.0,unit = "kg/kg")),satB(cp_liq(min = 0.0,max = 1000000.0,start = 1000.0,unit = "J/(kg.K)"),cp_vap(min = 0.0,max = 1000000.0,start = 1000.0,unit = "J/(kg.K)"),d_liq(min = 1e-08,max = 100000.0,start = 1.0,unit = "kg/m3"),d_vap(min = 1e-08,max = 100000.0,start = 1.0,unit = "kg/m3"),eta_liq(min = 0.0,max = 100000000.0,start = 0.001,unit = "Pa.s"),eta_vap(min = 0.0,max = 100000000.0,start = 0.001,unit = "Pa.s"),lam_liq(min = 0.0,max = 500.0,start = 1.0,unit = "W/(m.K)"),lam_vap(min = 0.0,max = 500.0,start = 1.0,unit = "W/(m.K)"),x(min = -1.0,max = 2.0,unit = "kg/kg")),sat(cp_liq(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),cp_vap(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),d_liq(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/m3"),d_vap(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/m3"),eta_liq(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},start = {0.001,0.001,0.001,0.001,0.001},each unit = "Pa.s"),eta_vap(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},start = {0.001,0.001,0.001,0.001,0.001},each unit = "Pa.s"),lam_liq(min = {0.0,0.0,0.0,0.0,0.0},max = {500.0,500.0,500.0,500.0,500.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "W/(m.K)"),lam_vap(min = {0.0,0.0,0.0,0.0,0.0},max = {500.0,500.0,500.0,500.0,500.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "W/(m.K)"),x(min = {-1.0,-1.0,-1.0,-1.0,-1.0},max = {2.0,2.0,2.0,2.0,2.0},each unit = "kg/kg")),sh(each unit = "Pa"),sigmaA(unit = "N/m"),sigmaB(unit = "N/m"),sigma(each unit = "N/m"),sizing(start = false) = false,stateA_out(X = {1.0},h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),stateB_out(X = {1.0},h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),stateChoice = Modelon_Types_ThermoStates.ph_States,state(h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),p(min = {0.0,0.0,0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),summary(M(min = 0.0,unit = "kg"),T_in(min = 0.0,max = 10000.0,unit = "K"),T_out(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),V(fixed = false,unit = "m3"),d_in(min = 0.0,unit = "kg/m3"),dp(unit = "Pa"),h_in(unit = "J/kg"),h_out(unit = "J/kg"),m_flow(unit = "kg/s")),thermalOpt = Modelon_ThermoFluid_Choices_ChannelThermalOpt.Q_flow,twoPhaseFraction(each unit = "1"),twoPhaseFraction_def(each unit = "1"),twoPhaseFraction_pseudo = {0.0,0.0,0.0,0.0,0.0},twoPhaseFraction_start(each unit = "1") = {0.0,0.0,0.0,0.0,0.0},useMeanTempDrivenQ(start = false) = false,use_stabilizer_twoPhaseFraction(start = false) = false,v(each unit = "m/s"),volume(A = {0.0,0.0,0.0,0.0,0.0},M(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_in(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),Tt(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),Tt_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),U(each unit = "J"),U_start(each fixed = false,each unit = "J"),V_tot(each fixed = false,each unit = "m3"),V_tot_start(each unit = "m3") = {0.1,0.1,0.1,0.1,0.1},X = {{1.0},{1.0},{1.0},{1.0},{1.0}},X_start(each fixed = false,min = {{0.0},{0.0},{0.0},{0.0},{0.0}},max = {{1.0},{1.0},{1.0},{1.0},{1.0}},each unit = "kg/kg"),d(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dE(each unit = "W"),dMX(min = {{-100000000.0},{-100000000.0},{-100000000.0},{-100000000.0},{-100000000.0}},max = {{100000000.0},{100000000.0},{100000000.0},{100000000.0},{100000000.0}},each unit = "kg/s"),dM_bulk(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/s"),ddhp(each unit = "kg.s2/m5"),ddph(each unit = "s2/(m2)"),der_p_factor = {1.0,1.0,1.0,1.0,1.0},enableFlowReversal(start = {true,true,true,true,true}) = {true,true,true,true,true},enforceStates = {false,false,false,false,false},h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),h_start(each fixed = false,min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),ht(each unit = "J/kg"),ht_start(each fixed = false,min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),initOpt = {Modelon_ThermoFluid_Choices_InitOptions.initialValues,Modelon_ThermoFluid_Choices_InitOptions.initialValues,Modelon_ThermoFluid_Choices_InitOptions.initialValues,Modelon_ThermoFluid_Choices_InitOptions.initialValues,Modelon_ThermoFluid_Choices_InitOptions.initialValues},mX_start(each fixed = false,min = {{0.0},{0.0},{0.0},{0.0},{0.0}},each unit = "kg"),m_flow = {0.0,0.0,0.0,0.0,0.0},m_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg"),nC(start = {0,0,0,0,0}) = {0,0,0,0,0},ns(start = {1,1,1,1,1}) = {1,1,1,1,1},nsi(start = {0,0,0,0,0}) = {0,0,0,0,0},p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),pt(min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa"),pt_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa"),quasiStatic(start = {false,false,false,false,false}) = {false,false,false,false,false},realTimeMode(start = {false,false,false,false,false}) = {false,false,false,false,false},stack(start = {"","","","",""}) = {"","","","",""},state(X = {{1.0},{1.0},{1.0},{1.0},{1.0}},h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateChoice = {Modelon_Types_ThermoStates.ph_States,Modelon_Types_ThermoStates.ph_States,Modelon_Types_ThermoStates.ph_States,Modelon_Types_ThermoStates.ph_States,Modelon_Types_ThermoStates.ph_States},staticTotalConv = {Modelon_ThermoFluid_Choices_StaticTotalConv.None,Modelon_ThermoFluid_Choices_StaticTotalConv.None,Modelon_ThermoFluid_Choices_StaticTotalConv.None,Modelon_ThermoFluid_Choices_StaticTotalConv.None,Modelon_ThermoFluid_Choices_StaticTotalConv.None},stepSize(each unit = "s") = {0.001,0.001,0.001,0.001,0.001},thermalDynamics = {true,true,true,true,true},u(each unit = "J/kg")),x(min = {-1.0,-1.0,-1.0,-1.0,-1.0},max = {2.0,2.0,2.0,2.0,2.0},each unit = "1"),z(each fixed = false)),dUdt(unit = "W"),diffusiveSpecies(start = {"O2","N2"}) = {"O2","N2"},dmdt(unit = "kg/s"),dp_smooth(unit = "Pa") = 0.01,dp_smooth_cooling(unit = "Pa") = 0.01,drain_an(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),drain_cath(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),drain_cooling(X_outflow = {1.0},h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,start = 100000.0,unit = "Pa")),enable_setting(start = true) = true,enable_setting_advanced(start = true) = true,enable_setting_anode_geometry(start = true) = true,enable_setting_anode_init(start = true) = true,enable_setting_cathode_geometry(start = true) = true,enable_setting_cathode_init(start = true) = true,enable_setting_cooling_advanced(start = true) = true,enable_setting_cooling_geometry(start = true) = true,enable_setting_cooling_init(start = true) = true,feed_an(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),feed_cath(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),feed_cooling(X_outflow = {1.0},h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),from_dp_anode = false,from_dp_cathode = false,from_dp_cooling(start = false) = false,g_cooling = 9.80665,generateEventForReversal_anode(start = false) = false,generateEventForReversal_cathode(start = false) = false,generateEventForReversal_cooling(start = false) = false,h_inflow_an(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_inflow_cath(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_inflow_cooling(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_start_anode(each fixed = false,each unit = "J/kg"),h_start_cathode(each fixed = false,each unit = "J/kg"),h_start_cooling(each fixed = false,each unit = "J/kg"),h_start_in_anode(unit = "J/kg") = 300000.0,h_start_in_cathode(unit = "J/kg") = 300000.0,h_start_in_cooling(unit = "J/kg") = 300000.0,h_start_out_anode(unit = "J/kg") = 300000.0,h_start_out_cathode(unit = "J/kg") = 300000.0,h_start_out_cooling(unit = "J/kg") = 300000.0,height_cooling(unit = "m") = 0.0,includeCellConduction(start = false) = false,includeStaticHead_cooling(start = false) = false,initFromEnthalpy_anode(start = false) = false,initFromEnthalpy_cathode(start = false) = false,initFromEnthalpy_cooling(start = false) = false,initOpt_anode = Modelon_ThermoFluid_Choices_InitOptions.initialValues,initOpt_cathode = Modelon_ThermoFluid_Choices_InitOptions.initialValues,initOpt_cooling = Modelon_ThermoFluid_Choices_InitOptions.initialValues,j_0 = 1.0,j_loss = 0.0,lambda_cell(unit = "W/(m.K)") = 20.0,length_cell(unit = "m") = 0.15,m_conc = 0.00034,m_flow_start_anode(fixed = false,unit = "kg/s"),m_flow_start_cathode(fixed = false,unit = "kg/s"),m_flow_start_cooling(fixed = false,unit = "kg/s"),mflow_smooth(unit = "kg/s") = 1e-08,mflow_smooth_cooling(unit = "kg/s") = 1e-08,n(start = 5) = 5,n_cell(min = 1) = 11,n_channels_anode(min = 1.0) = 1.0,n_channels_cathode = 1.0,n_channels_cooling(min = 1.0) = 1.0,n_conc = 0.00032,ni_cooling(start = 5) = 5,p_start_anode(each fixed = false,each unit = "Pa"),p_start_cathode(each fixed = false,each unit = "Pa"),p_start_cooling(each fixed = false,each unit = "Pa"),p_start_in_anode(fixed = false,unit = "Pa"),p_start_in_cathode(fixed = false,unit = "Pa"),p_start_in_cooling(fixed = false,unit = "Pa"),p_start_out_anode(fixed = false,unit = "Pa"),p_start_out_cathode(fixed = false,unit = "Pa"),p_start_out_cooling(fixed = false,unit = "Pa"),pi = 3.141592653589793,pin_n(i(unit = "A"),v = 0.0),pin_p(i(unit = "A"),v(unit = "V")),positiveFlow_anode(start = true) = true,positiveFlow_cathode(start = true) = true,positiveFlow_cooling = true,reaction_occurrence_an = false,reaction_occurrence_cath = false,rho_dry_m = 1980.0,subStack(A_anode(fixed = false,unit = "m2"),A_cathode = 0.0015552847130677967,A_cell(fixed = false,unit = "m2"),A_crosssection_cell(fixed = false,unit = "m2"),A_heat_anode(fixed = false,unit = "m2"),A_heat_cathode = 0.011365810981789832,CF_AnodeSideHeatTransfer(fixed = false),CF_AnodeSidePressureLoss(fixed = false),CF_CathodeSideHeatTransfer(fixed = false),CF_CathodeSidePressureLoss(fixed = false),C_anode(fixed = false,unit = "m"),C_cathode = 0.13980087308474579,D_anode(fixed = false,unit = "m"),D_cathode = 0.0445,Dhyd_anode(fixed = false,unit = "m"),Dhyd_cathode = 0.0445,E0_ref(fixed = false),EW_m(fixed = false,min = 0.0),G_cell(fixed = false,unit = "W/K"),H2_utilization(min = 0.0,max = 1.0,unit = "1"),L_anode(fixed = false,unit = "m"),L_cathode = 0.0813,M_stack(fixed = false,min = 0.0,unit = "kg"),N(start = 5) = 5,P_stack(unit = "W"),T_stack(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_anode(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_cathode(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in_anode(fixed = false,min = 0.0,unit = "K"),T_start_in_cathode(fixed = false,min = 0.0,unit = "K"),T_start_out_anode(fixed = false,min = 0.0,unit = "K"),T_start_out_cathode(fixed = false,min = 0.0,unit = "K"),V_anode(fixed = false,unit = "m3"),V_cathode = 0.00012644464717241188,V_stack(unit = "V"),X_feed_an(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_feed_cath(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_start_anode = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},X_start_cathode = {0.0,0.0,0.0,0.77,0.23},addProxToAnode(start = false) = false,alpha(fixed = false),anode_channel(A(fixed = false,unit = "m2"),A_heat(fixed = false,unit = "m2"),C(fixed = false,unit = "m"),CF_HeatTransfer(fixed = false),CF_PressureLoss(fixed = false),D(fixed = false,unit = "m"),Dhyd(fixed = false,unit = "m"),L(fixed = false,unit = "m"),T_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V(fixed = false,unit = "m3"),X_start = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},X_weight(min = 0.0,max = 1.0) = 0.05,channel(A(each fixed = false,each unit = "m2"),A_heat(each fixed = false,each unit = "m2"),A_mean(fixed = false,unit = "m2"),CF_HeatTransfer(fixed = false),CF_PressureLoss(fixed = false),Dhyd(each fixed = false,each unit = "m"),L(each fixed = false,each unit = "m"),L_total(fixed = false,unit = "m"),MX(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},each unit = "kg"),M(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg"),NA(start = 1) = 1,NB(start = 1) = 1,Q(each unit = "W"),Q_extra(each unit = "W"),Q_fluid(each unit = "W"),Q_tot(unit = "W"),Q_wall = {0.0,0.0,0.0,0.0,0.0},TA(min = 0.0,unit = "K"),TB(min = 0.0,max = 10000.0,start = 288.15,unit = "K"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out(fixed = false,min = 0.0,max = 10000.0,unit = "K"),U(each unit = "J"),V(each fixed = false,each unit = "m3"),V_tot(fixed = false,unit = "m3"),X_start = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},alpha(each unit = "W/(m2.K)"),dUdt(unit = "W"),dp_asState(start = false) = false,dp_smooth(fixed = false,unit = "Pa"),frictionDistribution = Modelon_ThermoFluid_Choices_FrictionDistribution.VolFric,friction(A(each fixed = false,each unit = "m2"),Dhyd(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "m"),F_user(each fixed = false),L(each fixed = false,each unit = "m"),d0(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dA(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dB(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dp(each unit = "Pa"),dp0(each fixed = false,each unit = "Pa"),dpFraction0(min = {1e-15,1e-15,1e-15,1e-15,1e-15}) = {1.0,1.0,1.0,1.0,1.0},dp_from_isothermal(start = {true,true,true,true,true}) = {true,true,true,true,true},dp_smooth(each fixed = false,each unit = "Pa"),flowFraction0(min = {1e-15,1e-15,1e-15,1e-15,1e-15}) = {1.0,1.0,1.0,1.0,1.0},from_dp(each fixed = false),lengthFraction(each fixed = false,min = {1e-15,1e-15,1e-15,1e-15,1e-15}),m_flow(each unit = "kg/s"),m_flow0(each fixed = false,each unit = "kg/s"),mflow_smooth(each fixed = false,each unit = "kg/s"),n_channels(each fixed = false,min = {1.0,1.0,1.0,1.0,1.0}),outletInstance = {true,true,true,true,true},positiveFlow(start = {true,true,true,true,true}) = {true,true,true,true,true},reference_d(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3") = {1.0,1.0,1.0,1.0,1.0},stateA_inflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateA_outflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB_inflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB_outflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),useFixedDensity = {false,false,false,false,false}),from_dp(fixed = false),g(unit = "m/s2") = 9.80665,gas(MM(min = {0.001,0.001,0.001,0.001,0.001},max = {0.25,0.25,0.25,0.25,0.25},start = {0.04,0.04,0.04,0.04,0.04},each unit = "kg/mol"),Rg(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_degC(each unit = "degC"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),Xi(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),Z(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "mol/mol"),assertlevel = {AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error},cp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),d(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/m3"),dUZT(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),ddTp(each unit = "kg/(m3.K)"),ddpT(each unit = "s2/(m2)"),ddx(min = {{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08}},max = {{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0}},start = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/m3"),duTp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),dupT = {0.0,0.0,0.0,0.0,0.0},g_formation(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),h_component(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_bar(each unit = "bar"),preferredMediumStates(start = {false,false,false,false,false}) = {false,false,false,false,false},s_component(min = {{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0}},max = {{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0}},each unit = "J/(kg.K)"),state(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),u(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "J/kg"),u_comp(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg")),generateEventForReversal(start = false) = false,h_start(each fixed = false,each unit = "J/kg"),h_start_in(fixed = false,unit = "J/kg"),h_start_out(fixed = false,unit = "J/kg"),htcoeff(A(each fixed = false,each unit = "m2"),CF_length = {1.0,1.0,1.0,1.0,1.0},Dhyd(each fixed = false,each unit = "m"),F_user(each fixed = false),L(each fixed = false,each unit = "m"),Nu(each unit = "1"),Pr(each unit = "1"),Re(each unit = "1"),alphaA(each unit = "W/(m2.K)"),alphaB = {1000.0,1000.0,1000.0,1000.0,1000.0},cp(each unit = "J/(kg.K)"),eta(min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa.s"),ht_from_isothermal(start = {true,true,true,true,true}) = {true,true,true,true,true},lambda(each unit = "W/(m.K)"),m_flow(each unit = "kg/s"),stateA(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateA_out(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB_out(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"))),includeStaticHead(fixed = false),initFromEnthalpy(start = false) = false,initOpt(fixed = false) = Modelon_ThermoFluid_Choices_InitOptions.initialValues,levels(each fixed = false,each unit = "m"),m_flow_mean(unit = "kg/s"),m_flow_start(fixed = false,unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,n_channels(each fixed = false,min = {1.0,1.0,1.0,1.0,1.0}),n_fric(start = 5) = 5,ni(start = 5) = 5,pA(min = 0.0,unit = "Pa"),pB(min = 0.0,unit = "Pa"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_start(each fixed = false,each unit = "Pa"),p_start_in(fixed = false,unit = "Pa"),p_start_out(fixed = false,unit = "Pa"),portA(X_outflow(min = {{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),portB(X_outflow(min = {{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),positiveFlow(start = true) = true,q(Q_flow = {0.0,0.0,0.0,0.0,0.0},T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),q_fluid(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),reaction(CF_conversion(min = 0.0,max = 1.0) = 1.0,Cp_reac = {0.0,0.0,0.0,0.0,0.0},MMX = {0.00201588,0.01801528,0.0280134,0.0319988},MM(min = {0.001,0.001,0.001,0.001,0.001},max = {0.25,0.25,0.25,0.25,0.25},start = {0.020010840000000002,0.020010840000000002,0.020010840000000002,0.020010840000000002,0.020010840000000002},each unit = "kg/mol"),N(start = 5) = 5,Q = {0.0,0.0,0.0,0.0,0.0},T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),Tscale = 1.0,Tstart(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V(fixed = false,unit = "m3"),X_in(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),X_out(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),X_out_real(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "1"),X_out_rescaled(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "1"),Xout_start = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},Ztot(min = {0.0,0.0,0.0,0.0,0.0},each unit = "mol"),Ztot_start(fixed = false,min = 0.0,unit = "mol"),Zx(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},each unit = "mol"),Zx_flow(each unit = "mol/s"),Zx_nominal = 0.001,Zx_start(each fixed = false,min = {0.0,0.0,0.0,0.0},each unit = "mol"),check_X_out_real(start = {1.0,1.0,1.0,1.0,1.0}),check_X_out_rescaled(start = {1.0,1.0,1.0,1.0,1.0}),dmdt(unit = "kg/s"),epsZ(min = 0.0,unit = "mol") = 1e-06,g_formation(each unit = "J/mol"),log10_y_out(start = {{-0.6020599913279624,-0.6020599913279624,-0.6020599913279624,-0.6020599913279624},{-0.6020599913279624,-0.6020599913279624,-0.6020599913279624,-0.6020599913279624},{-0.6020599913279624,-0.6020599913279624,-0.6020599913279624,-0.6020599913279624},{-0.6020599913279624,-0.6020599913279624,-0.6020599913279624,-0.6020599913279624},{-0.6020599913279624,-0.6020599913279624,-0.6020599913279624,-0.6020599913279624}}),log10_yout_start = {-0.6020599913279624,-0.6020599913279624,-0.6020599913279624,-0.6020599913279624},mX_flow(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "kg/s"),n_reac(start = 0) = 0,p(each unit = "Pa"),pref = 100000.0,pstart(fixed = false,min = 0.0,max = 100000000.0,unit = "Pa"),rZ = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},scale = 1.0,volName = string_parameters[1],y_out(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},start = {{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25}},each unit = "mol/mol"),yout_start = {0.25,0.25,0.25,0.25}),reaction_occurrence(fixed = false),sh(each unit = "Pa"),state(T(min = {0.0,0.0,0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),summary(M(min = 0.0,unit = "kg"),T_in(min = 0.0,max = 10000.0,unit = "K"),T_out(min = 0.0,max = 10000.0,unit = "K"),V(fixed = false,unit = "m3"),d_in(min = 0.0,unit = "kg/m3"),dp(unit = "Pa"),h_in(unit = "J/kg"),h_out(unit = "J/kg"),m_flow(unit = "kg/s")),useHeatTransfer(start = false) = false,volName = "CoolStack_variablepressure_humidified_PID5_fmu.coolStack.subStack.anode_channel.channel",z(each fixed = false)),checkEnergyBalance(unit = "W"),checkMassBalance(unit = "kg/s"),dp_smooth(fixed = false,unit = "Pa"),from_dp(fixed = false),generateEventForReversal(start = false) = false,h_inflow(unit = "J/kg"),h_start(each fixed = false,each unit = "J/kg"),h_start_in(fixed = false,unit = "J/kg"),h_start_out(fixed = false,unit = "J/kg"),height(unit = "m") = 0.0,includeStaticHead = false,initFromEnthalpy(start = false) = false,initOpt(fixed = false) = Modelon_ThermoFluid_Choices_InitOptions.initialValues,m_flow_start(fixed = false,unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,n_channels(fixed = false,min = 1.0),ni(start = 5) = 5,p_start(each fixed = false,each unit = "Pa"),p_start_in(fixed = false,unit = "Pa"),p_start_out(fixed = false,unit = "Pa"),pi = 3.141592653589793,portA(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),port(H_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "W"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),m_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "kg/s"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),positiveFlow(start = true) = true,reaction_occurrence(fixed = false),summary(M(min = 0.0,unit = "kg"),T_in(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),T_out(min = 0.0,max = 10000.0,unit = "K"),V(fixed = false,unit = "m3"),d_in(min = 0.0,unit = "kg/m3"),dp(unit = "Pa"),h_in(unit = "J/kg"),h_out(unit = "J/kg"),m_flow(unit = "kg/s")),useHeatTransfer(start = false) = false,wall(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"))),anode_stoich(min = 0.0,max = 1.0,unit = "1"),c1 = 0.00085,c_stack(fixed = false,unit = "J/(kg.K)"),cathode_channel(A = 0.0015552847130677967,A_heat(fixed = false,unit = "m2"),C = 0.13980087308474579,CF_HeatTransfer(fixed = false),CF_PressureLoss(fixed = false),D = 0.0445,Dhyd = 0.0445,L = 0.0813,T_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V(fixed = false,unit = "m3"),X_start = {0.0,0.0,0.0,0.77,0.23},X_weight(min = 0.0,max = 1.0) = 0.05,channel(A = {0.0015552847130677967,0.0015552847130677967,0.0015552847130677967,0.0015552847130677967,0.0015552847130677967},A_heat(each fixed = false,each unit = "m2"),A_mean = 0.0015552847130677967,CF_HeatTransfer(fixed = false),CF_PressureLoss(fixed = false),Dhyd = {0.0445,0.0445,0.0445,0.0445,0.0445},L = {0.01626,0.01626,0.01626,0.01626,0.01626},L_total = 0.0813,MX(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},each unit = "kg"),M(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg"),NA(start = 1) = 1,NB(start = 1) = 1,Q(each unit = "W"),Q_extra(each unit = "W"),Q_fluid(each unit = "W"),Q_tot(unit = "W"),Q_wall = {0.0,0.0,0.0,0.0,0.0},TA(min = 0.0,unit = "K"),TB(min = 0.0,max = 10000.0,start = 288.15,unit = "K"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_start_in(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_start_out(fixed = false,min = 0.0,max = 10000.0,unit = "K"),U(each unit = "J"),V = {2.5288929434482376e-05,2.5288929434482376e-05,2.5288929434482376e-05,2.5288929434482376e-05,2.5288929434482376e-05},V_tot = 0.00012644464717241188,X_start = {0.0,0.0,0.0,0.77,0.23},alpha(each unit = "W/(m2.K)"),dUdt(unit = "W"),dp_asState(start = false) = false,dp_smooth(fixed = false,unit = "Pa"),frictionDistribution = Modelon_ThermoFluid_Choices_FrictionDistribution.VolFric,friction(A = {0.0015552847130677967,0.0015552847130677967,0.0015552847130677967,0.0015552847130677967,0.0015552847130677967},Dhyd = {0.0445,0.0445,0.0445,0.0445,0.0445},F_user(each fixed = false),L = {0.0813,0.0813,0.0813,0.0813,0.0813},d0(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dA(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dB(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3"),dp(each unit = "Pa"),dp0(each fixed = false,each unit = "Pa"),dpFraction0(min = {1e-15,1e-15,1e-15,1e-15,1e-15}) = {1.0,1.0,1.0,1.0,1.0},dp_from_isothermal(start = {true,true,true,true,true}) = {true,true,true,true,true},dp_smooth(each fixed = false,each unit = "Pa"),flowFraction0(min = {1e-15,1e-15,1e-15,1e-15,1e-15}) = {1.0,1.0,1.0,1.0,1.0},from_dp(each fixed = false),lengthFraction = {0.2,0.2,0.2,0.2,0.2},m_flow(each unit = "kg/s"),m_flow0(each fixed = false,each unit = "kg/s"),mflow_smooth(each fixed = false,each unit = "kg/s"),n_channels = {1.0,1.0,1.0,1.0,1.0},outletInstance = {true,true,true,true,true},positiveFlow(start = {true,true,true,true,true}) = {true,true,true,true,true},reference_d(min = {0.0,0.0,0.0,0.0,0.0},each unit = "kg/m3") = {1.0,1.0,1.0,1.0,1.0},stateA_inflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateA_outflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB_inflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB_outflow(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),useFixedDensity = {false,false,false,false,false}),from_dp(fixed = false),g(unit = "m/s2") = 9.80665,gas(MM(min = {0.001,0.001,0.001,0.001,0.001},max = {0.25,0.25,0.25,0.25,0.25},start = {0.04,0.04,0.04,0.04,0.04},each unit = "kg/mol"),Rg(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_degC(each unit = "degC"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),Xi(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),Z(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "mol/mol"),assertlevel = {AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error},cp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),d(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/m3"),dUZT(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),ddTp(each unit = "kg/(m3.K)"),ddpT(each unit = "s2/(m2)"),ddx(min = {{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08}},max = {{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0}},start = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/m3"),duTp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),dupT = {0.0,0.0,0.0,0.0,0.0},g_formation(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),h_component(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_bar(each unit = "bar"),preferredMediumStates(start = {false,false,false,false,false}) = {false,false,false,false,false},s_component(min = {{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0}},max = {{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0}},each unit = "J/(kg.K)"),state(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),u(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "J/kg"),u_comp(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg")),generateEventForReversal(start = false) = false,h_start(each fixed = false,each unit = "J/kg"),h_start_in(fixed = false,unit = "J/kg"),h_start_out(fixed = false,unit = "J/kg"),htcoeff(A = {0.0015552847130677967,0.0015552847130677967,0.0015552847130677967,0.0015552847130677967,0.0015552847130677967},CF_length = {1.0,1.0,1.0,1.0,1.0},Dhyd = {0.0445,0.0445,0.0445,0.0445,0.0445},F_user(each fixed = false),L = {0.01626,0.01626,0.01626,0.01626,0.01626},Nu(each unit = "1"),Pr(each unit = "1"),Re(each unit = "1"),alphaA(each unit = "W/(m2.K)"),alphaB = {1000.0,1000.0,1000.0,1000.0,1000.0},cp(each unit = "J/(kg.K)"),eta(min = {0.0,0.0,0.0,0.0,0.0},each unit = "Pa.s"),ht_from_isothermal(start = {true,true,true,true,true}) = {true,true,true,true,true},lambda(each unit = "W/(m.K)"),m_flow(each unit = "kg/s"),stateA(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateA_out(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),stateB_out(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"))),includeStaticHead(fixed = false),initFromEnthalpy(start = false) = false,initOpt(fixed = false) = Modelon_ThermoFluid_Choices_InitOptions.initialValues,levels(each fixed = false,each unit = "m"),m_flow_mean(unit = "kg/s"),m_flow_start(fixed = false,unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,n_channels = {1.0,1.0,1.0,1.0,1.0},n_fric(start = 5) = 5,ni(start = 5) = 5,pA(min = 0.0,unit = "Pa"),pB(min = 0.0,unit = "Pa"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_start(each fixed = false,each unit = "Pa"),p_start_in(fixed = false,unit = "Pa"),p_start_out(fixed = false,unit = "Pa"),portA(X_outflow(min = {{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),portB(X_outflow(min = {{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),positiveFlow(start = true) = true,q(Q_flow = {0.0,0.0,0.0,0.0,0.0},T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),q_fluid(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),reaction(CF_conversion(min = 0.0,max = 1.0) = 1.0,Cp_reac = {0.0,0.0,0.0,0.0,0.0},MMX = {0.039948,0.0440095,0.01801528,0.0280134,0.0319988},MM(min = {0.001,0.001,0.001,0.001,0.001},max = {0.25,0.25,0.25,0.25,0.25},start = {0.02883954144754042,0.02883954144754042,0.02883954144754042,0.02883954144754042,0.02883954144754042},each unit = "kg/mol"),N(start = 5) = 5,Q = {0.0,0.0,0.0,0.0,0.0},T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),Tscale = 1.0,Tstart(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V = 0.00012644464717241188,X_in(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),X_out(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),X_out_real(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "1"),X_out_rescaled(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "1"),Xout_start = {0.0,0.0,0.0,0.77,0.23},Ztot(min = {0.0,0.0,0.0,0.0,0.0},each unit = "mol"),Ztot_start(fixed = false,min = 0.0,unit = "mol"),Zx(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},each unit = "mol"),Zx_flow(each unit = "mol/s"),Zx_nominal = 0.001,Zx_start(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},each unit = "mol"),check_X_out_real(start = {1.0,1.0,1.0,1.0,1.0}),check_X_out_rescaled(start = {1.0,1.0,1.0,1.0,1.0}),dmdt(unit = "kg/s"),epsZ(min = 0.0,unit = "mol") = 1e-06,g_formation(each unit = "J/mol"),log10_y_out(start = {{-15.0,-15.0,-15.0,-0.10088674661931178,-0.683417505190324},{-15.0,-15.0,-15.0,-0.10088674661931178,-0.683417505190324},{-15.0,-15.0,-15.0,-0.10088674661931178,-0.683417505190324},{-15.0,-15.0,-15.0,-0.10088674661931178,-0.683417505190324},{-15.0,-15.0,-15.0,-0.10088674661931178,-0.683417505190324}}),log10_yout_start = {-15.0,-15.0,-15.0,-0.10088674661931178,-0.683417505190324},mX_flow(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "kg/s"),n_reac(start = 0) = 0,p(each unit = "Pa"),pref = 100000.0,pstart(fixed = false,min = 0.0,max = 100000000.0,unit = "Pa"),rZ = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},scale = 1.0,volName = string_parameters[2],y_out(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},start = {{0.0,0.0,0.0,0.7927080223966432,0.2072919776033569},{0.0,0.0,0.0,0.7927080223966432,0.2072919776033569},{0.0,0.0,0.0,0.7927080223966432,0.2072919776033569},{0.0,0.0,0.0,0.7927080223966432,0.2072919776033569},{0.0,0.0,0.0,0.7927080223966432,0.2072919776033569}},each unit = "mol/mol"),yout_start = {0.0,0.0,0.0,0.7927080223966432,0.2072919776033569}),reaction_occurrence(fixed = false),sh(each unit = "Pa"),state(T(min = {0.0,0.0,0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),summary(M(min = 0.0,unit = "kg"),T_in(min = 0.0,max = 10000.0,unit = "K"),T_out(min = 0.0,max = 10000.0,unit = "K"),V = 0.00012644464717241188,d_in(min = 0.0,unit = "kg/m3"),dp(unit = "Pa"),h_in(unit = "J/kg"),h_out(unit = "J/kg"),m_flow(unit = "kg/s")),useHeatTransfer(start = false) = false,volName = "CoolStack_variablepressure_humidified_PID5_fmu.coolStack.subStack.cathode_channel.channel",z = {0.1,0.30000000000000004,0.5,0.7000000000000001,0.9}),checkEnergyBalance(unit = "W"),checkMassBalance(unit = "kg/s"),dp_smooth(fixed = false,unit = "Pa"),from_dp(fixed = false),generateEventForReversal(start = false) = false,h_inflow(unit = "J/kg"),h_start(each fixed = false,each unit = "J/kg"),h_start_in(fixed = false,unit = "J/kg"),h_start_out(fixed = false,unit = "J/kg"),height(unit = "m") = 0.0,includeStaticHead = false,initFromEnthalpy(start = false) = false,initOpt(fixed = false) = Modelon_ThermoFluid_Choices_InitOptions.initialValues,m_flow_start(fixed = false,unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,n_channels = 1.0,ni(start = 5) = 5,p_start(each fixed = false,each unit = "Pa"),p_start_in(fixed = false,unit = "Pa"),p_start_out(fixed = false,unit = "Pa"),pi = 3.141592653589793,portA(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),port(H_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "W"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),m_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "kg/s"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),positiveFlow(start = true) = true,reaction_occurrence(fixed = false),summary(M(min = 0.0,unit = "kg"),T_in(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),T_out(min = 0.0,max = 10000.0,unit = "K"),V = 0.00012644464717241188,d_in(min = 0.0,unit = "kg/m3"),dp(unit = "Pa"),h_in(unit = "J/kg"),h_out(unit = "J/kg"),m_flow(unit = "kg/s")),useHeatTransfer(start = false) = false,wall(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"))),cathode_stoich(min = 0.0,max = 1.0,unit = "1"),cell(A_cell(fixed = false,unit = "m2"),CF_0_eod = 0.8,CF_0_gasDiffusion = {1.0,1.0},CF_0_waterContent = 1.0,CF_0_waterDiffusion = 1.0,CF_N_eod(each fixed = false),CF_N_gasDiffusion(each fixed = false),CF_N_waterContent(each fixed = false),CF_N_waterDiffusion(each fixed = false),C_cell(fixed = false,unit = "J/K"),E0_cell(each unit = "V"),E0_ref(fixed = false,unit = "V"),EW_m(fixed = false,min = 0.0,unit = "kg/mol"),E_act_cell(each unit = "V"),E_conc_cell(each unit = "V"),E_cont_cell = {0.0,0.0,0.0,0.0,0.0},E_ohm_cell(each unit = "V"),I_stack(unit = "A"),N(start = 5) = 5,P_cell(each unit = "W"),P_stack(unit = "W"),Q_cell(each unit = "W"),Q_stack(unit = "W"),Q_wall_an_cell(each unit = "W"),Q_wall_an_stack(unit = "W"),Q_wall_cath_cell(each unit = "W"),Q_wall_cath_stack(unit = "W"),Q_wall_cell(each unit = "W"),Q_wall_stack(unit = "W"),S_reac_an = {-1.0,0.0,0.0,0.0},S_reac_cath = {0.0,0.0,1.0,0.0,-0.5},T_an(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cath(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cell(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_cell_avg(min = 0.0,start = 288.15,unit = "K"),T_from_h(start = false) = false,Tstart(fixed = false,min = 0.0,unit = "K"),V_cell(unit = "V"),V_stack(unit = "V"),X_an(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "1"),X_cath(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "1"),activationLoss(E_loss_cell(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "V"),E_loss_stack(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "V"),N(start = 5) = 5,T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),alpha(fixed = false),enableInternal(start = false) = false,j_0 = 1.0,j_ionic(each unit = "A/m2"),j_loss = 0.0,n_cell(fixed = false,min = 1),n_e = 2.0,pin_n(i(each unit = "A"),v(each unit = "V")),pin_p(i(each unit = "A"),v = {0.0,0.0,0.0,0.0,0.0}),powerLoss_stack(unit = "W")),alpha(fixed = false),an_names(start = {"H2","H2O"}) = {"H2","H2O"},anode(MM(min = {0.001,0.001,0.001,0.001,0.001},max = {0.25,0.25,0.25,0.25,0.25},start = {0.04,0.04,0.04,0.04,0.04},each unit = "kg/mol"),Rg(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_degC(each unit = "degC"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),Xi(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},start = {{0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},{0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},{0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},{0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},{0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424}},each unit = "kg/kg"),Z(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "mol/mol"),assertlevel = {AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error},cp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),d(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/m3"),dUZT(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),ddTp(each unit = "kg/(m3.K)"),ddpT(each unit = "s2/(m2)"),ddx(min = {{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08}},max = {{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0}},start = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/m3"),duTp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),dupT = {0.0,0.0,0.0,0.0,0.0},g_formation(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),h_component(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_bar(each unit = "bar"),preferredMediumStates(start = {false,false,false,false,false}) = {false,false,false,false,false},s_component(min = {{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0}},max = {{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0}},each unit = "J/(kg.K)"),state(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),u(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "J/kg"),u_comp(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg")),c1 = 0.00085,cath_names(start = {"O2","H2O"}) = {"O2","H2O"},cathode(MM(min = {0.001,0.001,0.001,0.001,0.001},max = {0.25,0.25,0.25,0.25,0.25},start = {0.04,0.04,0.04,0.04,0.04},each unit = "kg/mol"),Rg(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),T_degC(each unit = "degC"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),Xi(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},start = {{0.0,0.0,0.0,0.77,0.23},{0.0,0.0,0.0,0.77,0.23},{0.0,0.0,0.0,0.77,0.23},{0.0,0.0,0.0,0.77,0.23},{0.0,0.0,0.0,0.77,0.23}},each unit = "kg/kg"),Z(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "mol/mol"),assertlevel = {AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error,AssertionLevel.error},cp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),d(min = {1e-08,1e-08,1e-08,1e-08,1e-08},max = {100000.0,100000.0,100000.0,100000.0,100000.0},start = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/m3"),dUZT(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),ddTp(each unit = "kg/(m3.K)"),ddpT(each unit = "s2/(m2)"),ddx(min = {{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08},{1e-08,1e-08,1e-08,1e-08,1e-08}},max = {{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0},{100000.0,100000.0,100000.0,100000.0,100000.0}},start = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/m3"),duTp(min = {0.0,0.0,0.0,0.0,0.0},max = {1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},start = {1000.0,1000.0,1000.0,1000.0,1000.0},each unit = "J/(kg.K)"),dupT = {0.0,0.0,0.0,0.0,0.0},g_formation(min = {{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},{-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0}},max = {{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},{100000000.0,100000000.0,100000000.0,100000000.0,100000000.0}},each unit = "J/mol"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),h_component(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa"),p_bar(each unit = "bar"),preferredMediumStates(start = {false,false,false,false,false}) = {false,false,false,false,false},s_component(min = {{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0},{-1000000.0,-1000000.0,-1000000.0,-1000000.0,-1000000.0}},max = {{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0},{1000000.0,1000000.0,1000000.0,1000000.0,1000000.0}},each unit = "J/(kg.K)"),state(T(min = {0.0,0.0,0.0,0.0,0.0},max = {10000.0,10000.0,10000.0,10000.0,10000.0},each unit = "K"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),u(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "J/kg"),u_comp(min = {{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},{-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0}},max = {{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},{10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0}},each unit = "J/kg")),checkEnergyBalance(unit = "W"),checkMassBalance(unit = "kg/s"),concentrationLoss(E_loss_cell(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "V"),E_loss_stack(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "V"),N(start = 5) = 5,enableInternal(start = false) = false,j_ionic(each unit = "A/m2"),m = 0.00034,n = 0.00032,n_cell(fixed = false,min = 1),pin_n(i(each unit = "A"),v(each unit = "V")),pin_p(i(each unit = "A"),v(each unit = "V")),powerLoss_stack(unit = "W")),contaminantsLoss(E_loss_cell = {0.0,0.0,0.0,0.0,0.0},E_loss_stack = {0.0,0.0,0.0,0.0,0.0},N(start = 5) = 5,T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),enableInternal(start = false) = false,nCont(start = 0) = 0,n_cell(fixed = false,min = 1),p_an_partial(each unit = "Pa"),pin_n(i(each unit = "A"),v = {0.0,0.0,0.0,0.0,0.0}),pin_p(i(each unit = "A"),v = {0.0,0.0,0.0,0.0,0.0}),powerLoss_stack = 0.0,y_an(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "1")),dTdt(each unit = "K/s"),dUdt(unit = "W"),diffusiveSpecies(start = {"O2","N2"}) = {"O2","N2"},electroOsmoticDrag(A_cell(fixed = false,unit = "m2"),CF_0(fixed = false),CF_N(each fixed = false),EW_m(fixed = false,min = 0.0,unit = "kg/mol"),I_cell(each unit = "A"),N(start = 5) = 5,T_an(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cath(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),coeffs = {0.0,0.11363636363636363},enableInternal(start = false) = false,iH2O_an(start = 2) = 2,iH2O_cath(start = 3) = 3,m_flow(each unit = "kg/s"),n_cell(fixed = false,min = 1),n_eod(each unit = "1"),p_an_partial(each unit = "Pa"),p_cath_partial(each unit = "Pa"),rho_dry_m(fixed = false,min = 0.0,unit = "kg/m3"),z(fixed = false,unit = "m")),enable_setting(start = false) = false,gasDiffusion(A_cell(fixed = false,unit = "m2"),CF_0(each fixed = false),CF_N(each fixed = false),EW_m(fixed = false,min = 0.0,unit = "kg/mol"),K_perm = {{0.0,0.0},{0.0,0.0},{0.0,0.0},{0.0,0.0},{0.0,0.0}},N(start = 5) = 5,T_an(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cath(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),diffusiveSpecies(start = {"O2","N2"}) = {"O2","N2"},enableInternal(start = false) = false,f_w(each unit = "1"),mX_flow_an = {{0.0,0.0,-0.0,-0.0},{0.0,0.0,-0.0,-0.0},{0.0,0.0,-0.0,-0.0},{0.0,0.0,-0.0,-0.0},{0.0,0.0,-0.0,-0.0}},mX_flow_cath = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},mX_flow_diff = {{-0.0,-0.0},{-0.0,-0.0},{-0.0,-0.0},{-0.0,-0.0},{-0.0,-0.0}},nDiff(start = 2) = 2,n_cell(fixed = false,min = 1),p_an_partial(each unit = "Pa"),p_cath_partial(each unit = "Pa"),rho_dry_m(fixed = false,min = 0.0,unit = "kg/m3"),z(fixed = false,unit = "m")),h_an(each unit = "J/kg"),h_cath(each unit = "J/kg"),h_conv_an(each unit = "W/(m2.K)"),h_conv_cath(each unit = "W/(m2.K)"),iH2O_an(start = {2}) = {2},iH2O_cath(start = {3}) = {3},j(min = 0.0,unit = "A/m2"),j_0 = 1.0,j_ionic(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0001,0.0001,0.0001,0.0001,0.0001},each unit = "A/m2"),j_loss = 0.0,m = 0.00034,n = 0.00032,nS_an(start = 4) = 4,nS_cath(start = 5) = 5,n_cell(fixed = false,min = 1),n_e = 2.0,n_e_exch = 2.0,ohmicLoss(ASR(each unit = "Ohm.m2"),A_cell(fixed = false,unit = "m2"),E_loss_cell(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "V"),E_loss_stack(min = {0.0,0.0,0.0,0.0,0.0},start = {0.0,0.0,0.0,0.0,0.0},each unit = "V"),I(each unit = "A"),N(start = 5) = 5,T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),enableInternal(start = false) = false,lambda_mean(min = {0.0,0.0,0.0,0.0,0.0}),n_cell(fixed = false,min = 1),pin_n(i(each unit = "A"),v(each unit = "V")),pin_p(i(each unit = "A"),v(each unit = "V")),powerLoss_stack(unit = "W"),sigma(each unit = "S/m"),z(min = 0.0,unit = "m") = 2e-05),p_an(each unit = "Pa"),p_an_partial(each unit = "Pa"),p_cath(each unit = "Pa"),p_cath_partial(each unit = "Pa"),pin_n(i(unit = "A"),v = 0.0),pin_p(i(unit = "A"),v(unit = "V")),port_an(H_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "W"),X(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),m_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "kg/s"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),port_cath(H_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "W"),X(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h(min = {-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0,-10000000000.0},max = {10000000000.0,10000000000.0,10000000000.0,10000000000.0,10000000000.0},each unit = "J/kg"),m_flow(min = {-100000000.0,-100000000.0,-100000000.0,-100000000.0,-100000000.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "kg/s"),p(min = {0.0,0.0,0.0,0.0,0.0},max = {100000000.0,100000000.0,100000000.0,100000000.0,100000000.0},each unit = "Pa")),pstart(fixed = false,unit = "Pa"),rho_dry_m(fixed = false,min = 0.0,unit = "kg/m3"),sourceV(i(each unit = "A"),n(i(each unit = "A"),v(each unit = "V")),p(i(each unit = "A"),v(each unit = "V")),v(each unit = "V")),wall(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),wall_an(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),wall_cath(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),waterContent(A_cell(fixed = false,unit = "m2"),CF_0(fixed = false),CF_N(each fixed = false),EW_m(fixed = false,min = 0.0,unit = "kg/mol"),N(start = 5) = 5,T_an(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cath(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),enableInternal(start = false) = false,f_w(each unit = "1"),iH2O_an(start = 2) = 2,iH2O_cath(start = 3) = 3,lambda(min = {0.0,0.0,0.0,0.0,0.0}),lambda_an(min = {0.0,0.0,0.0,0.0,0.0}),lambda_cath(min = {0.0,0.0,0.0,0.0,0.0}),n_cell(fixed = false,min = 1),p_an_partial(each unit = "Pa"),p_cath_partial(each unit = "Pa"),rho_dry_m(fixed = false,min = 0.0,unit = "kg/m3"),v_dry(fixed = false,min = 0.0,unit = "m3/mol"),v_w = 1.81e-05,z(fixed = false,unit = "m")),waterDiffusion(A_cell(fixed = false,unit = "m2"),CF_0(fixed = false),CF_N(each fixed = false),D_diff(each unit = "m2/s"),EW_m(fixed = false,min = 0.0,unit = "kg/mol"),N(start = 5) = 5,T_an(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cath(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_cell(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),c_an_H2O(each unit = "mol/m3"),c_cath_H2O(each unit = "mol/m3"),enableInternal(start = false) = false,iH2O_an(start = 2) = 2,iH2O_cath(start = 3) = 3,lambda_an(min = {0.0,0.0,0.0,0.0,0.0}),lambda_cath(min = {0.0,0.0,0.0,0.0,0.0}),m_flow(each unit = "kg/s"),n_cell(fixed = false,min = 1),p_an_partial(each unit = "Pa"),p_cath_partial(each unit = "Pa"),rho_dry_m(fixed = false,min = 0.0,unit = "kg/m3"),z(fixed = false,unit = "m")),y_an(min = {{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0}},start = {{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25},{0.25,0.25,0.25,0.25}},each unit = "1"),y_cath(min = {{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0},{1.0,1.0,1.0,1.0,1.0}},start = {{0.2,0.2,0.2,0.2,0.2},{0.2,0.2,0.2,0.2,0.2},{0.2,0.2,0.2,0.2,0.2},{0.2,0.2,0.2,0.2,0.2},{0.2,0.2,0.2,0.2,0.2}},each unit = "1"),z(fixed = false,unit = "m")),checkEnergyBalance(unit = "W"),checkMassBalance(unit = "kg/s"),d0_prox(min = 0.0,unit = "kg/m3") = 400.0,dUdt(unit = "W"),diffusiveSpecies(start = {"O2","N2"}) = {"O2","N2"},dmdt(unit = "kg/s"),dp0_prox(unit = "Pa") = 100.0,dp_smooth(fixed = false,unit = "Pa"),drain_anode(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),drain_cathode(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),enable_setting(start = false) = false,enable_setting_advanced(start = false) = false,enable_setting_anode_geometry(start = false) = false,enable_setting_anode_init(start = false) = false,enable_setting_cathode_geometry(start = false) = false,enable_setting_cathode_init(start = false) = false,feed_anode(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),feed_cathode(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),from_dp_anode(fixed = false),from_dp_cathode(fixed = false),generateEventForReversal_anode(start = false) = false,generateEventForReversal_cathode(start = false) = false,h_inflow_an(unit = "J/kg"),h_inflow_cath(unit = "J/kg"),h_start_anode(each fixed = false,each unit = "J/kg"),h_start_cathode(each fixed = false,each unit = "J/kg"),h_start_in_anode(fixed = false,unit = "J/kg"),h_start_in_cathode(fixed = false,unit = "J/kg"),h_start_out_anode(fixed = false,unit = "J/kg"),h_start_out_cathode(fixed = false,unit = "J/kg"),includeCellConduction(start = false) = false,initFromEnthalpy_anode(start = false) = false,initFromEnthalpy_cathode(start = false) = false,initOpt_anode(fixed = false) = Modelon_ThermoFluid_Choices_InitOptions.initialValues,initOpt_cathode(fixed = false) = Modelon_ThermoFluid_Choices_InitOptions.initialValues,j_0 = 1.0,j_loss = 0.0,lambda_cell(fixed = false,unit = "W/(m.K)"),length_cell(fixed = false,unit = "m"),m_conc = 0.00034,m_flow_nom_prox(unit = "kg/s") = 0.1,m_flow_start_anode(fixed = false,unit = "kg/s"),m_flow_start_cathode(fixed = false,unit = "kg/s"),mflow_smooth(fixed = false,unit = "kg/s"),n(start = 5) = 5,nS_an(start = 4) = 4,nS_cath(start = 5) = 5,n_cell(fixed = false,min = 1),n_channels_anode(fixed = false,min = 1.0),n_channels_cathode = 1.0,n_conc = 0.00032,p_start_anode(each fixed = false,each unit = "Pa"),p_start_cathode(each fixed = false,each unit = "Pa"),p_start_in_anode(fixed = false,unit = "Pa"),p_start_in_cathode(fixed = false,unit = "Pa"),p_start_out_anode(fixed = false,unit = "Pa"),p_start_out_cathode(fixed = false,unit = "Pa"),pi = 3.141592653589793,pin_n(i(unit = "A"),v = 0.0),pin_p(i(unit = "A"),v(unit = "V")),positiveFlow_anode(start = true) = true,positiveFlow_cathode(start = true) = true,reaction_occurrence_an(fixed = false),reaction_occurrence_cath(fixed = false),rho_dry_m(fixed = false,min = 0.0),summary(N(start = 5) = 5,P_stack(unit = "W"),Q_stack(unit = "W"),T_stack(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),V_cell(unit = "V"),V_stack(unit = "V"),anode_stoich(min = 0.0,max = 1.0,unit = "1"),cathode_stoich(min = 0.0,max = 1.0,unit = "1"),dp_anode(unit = "Pa"),dp_cathode(unit = "Pa"),j_external(unit = "A/m2"),m_flow_an(unit = "kg/s"),m_flow_cath(unit = "kg/s"),n_cell(fixed = false)),wall(Q_flow(each unit = "W"),T(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K")),z(fixed = false)),summary(N(start = 5) = 5,P_stack(unit = "W"),Q_stack(unit = "W"),T_cool(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),T_stack(min = {0.0,0.0,0.0,0.0,0.0},each unit = "K"),V_cell(unit = "V"),V_stack(unit = "V"),anode_stoich(min = 0.0,max = 1.0,unit = "1"),cathode_stoich(min = 0.0,max = 1.0,unit = "1"),dp_anode(unit = "Pa"),dp_cathode(unit = "Pa"),dp_cooling(unit = "Pa"),j_external(min = 0.0,unit = "A/m2"),m_flow_an(unit = "kg/s"),m_flow_cath(unit = "kg/s"),m_flow_cool(unit = "kg/s"),n_cell(fixed = false)),z = 5e-05) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_current_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_current_variation;
    fmumodelica_rec_current_variation current_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,1.0},{225.0,9.0},{450.0,22.5},{675.0,45.0},{900.0,60.0},{1125.0,67.5},{1350.0,90.0},{1575.0,112.5},{1800.0,135.0},{2025.0,180.0},{2250.0,225.0},{2475.0,270.0},{2700.0,300.0},{2925.0,315.0},{3150.0,360.0},{3375.0,405.0},{3600.0,450.0}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_I
        parameter Integer precision "Number of decimals to show";
        Real showNumber;
    end fmumodelica_rec_display_I;
    fmumodelica_rec_display_I display_I(precision(min = 0) = 2) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_P
        parameter Integer precision "Number of decimals to show";
        Real showNumber;
    end fmumodelica_rec_display_P;
    fmumodelica_rec_display_P display_P(precision(min = 0) = 0) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_Q
        parameter Integer precision "Number of decimals to show";
        Real showNumber;
    end fmumodelica_rec_display_Q;
    fmumodelica_rec_display_Q display_Q(precision(min = 0) = 1) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_T
        parameter Integer precision "Number of decimals to show";
        Real showNumber;
    end fmumodelica_rec_display_T;
    fmumodelica_rec_display_T display_T(precision(min = 0) = 1) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_V
        parameter Integer precision "Number of decimals to show";
        Real showNumber;
    end fmumodelica_rec_display_V;
    fmumodelica_rec_display_V display_V(precision(min = 0) = 3) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_an_in
        constant Integer CH4_index "CH4 substance index";
        constant Integer CO2_index "CO2 substance index";
        constant Integer CO_index "CO substance index";
        constant Integer H2O_index "H2O substance index";
        constant Integer H2_index "H2 substance index";
        constant Integer N2_index "N2 substance index";
        constant Integer O2_index "O2 substance index";
        constant Real X_CH4;
        constant Real X_CO;
        constant Real X_CO2;
        Real X_H2;
        Real X_H2O;
        Real X_N2;
        Real X_O2;
        constant Boolean compatibleMedium;
        fmumodelica_rec_display_an_in_data data annotation(Dialog(tab = "Components"));
        constant Boolean displayMassUnit "If false visualizer show concentration in mole";
        constant Real flow_conversion "Kg/s to g/s";
        constant Integer nbrOfPresentSubstances;
        constant Integer precision "Number of significant digits";
        constant FuelCell_Sensors_Types_SensorType sensorType "Sensor type";
        constant Boolean visible_massflow;
        constant Boolean visible_massfraction;
        constant Boolean visible_moleflow;
        constant Boolean visible_molefraction;
        Real y[4];
    end fmumodelica_rec_display_an_in;
    record fmumodelica_rec_display_an_in_data
        Real X[4] "Mass Fraction";
        Real X_flow[4] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_an_in_data;
    fmumodelica_rec_display_an_in display_an_in(CH4_index(start = -1) = -1,CO2_index(start = -1) = -1,CO_index(start = -1) = -1,H2O_index(start = 2) = 2,H2_index(start = 1) = 1,N2_index(start = 3) = 3,O2_index(start = 4) = 4,X_CH4 = 0.0,X_CO = 0.0,X_CO2 = 0.0,compatibleMedium(start = true) = true,data(X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,start = 300.0,unit = "K")),displayMassUnit(start = false) = false,flow_conversion = 1000.0,nbrOfPresentSubstances(start = 4) = 4,precision(start = 2) = 2,sensorType = FuelCell_Sensors_Types_SensorType.Composition,visible_massflow(start = false) = false,visible_massfraction(start = false) = false,visible_moleflow(start = false) = false,visible_molefraction(start = true) = true,y(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_an_out
        constant Integer CH4_index "CH4 substance index";
        constant Integer CO2_index "CO2 substance index";
        constant Integer CO_index "CO substance index";
        constant Integer H2O_index "H2O substance index";
        constant Integer H2_index "H2 substance index";
        constant Integer N2_index "N2 substance index";
        constant Integer O2_index "O2 substance index";
        constant Real X_CH4;
        constant Real X_CO;
        constant Real X_CO2;
        Real X_H2;
        Real X_H2O;
        Real X_N2;
        Real X_O2;
        constant Boolean compatibleMedium;
        fmumodelica_rec_display_an_out_data data annotation(Dialog(tab = "Components"));
        constant Boolean displayMassUnit "If false visualizer show concentration in mole";
        constant Real flow_conversion "Kg/s to g/s";
        constant Integer nbrOfPresentSubstances;
        constant Integer precision "Number of significant digits";
        constant FuelCell_Sensors_Types_SensorType sensorType "Sensor type";
        constant Boolean visible_massflow;
        constant Boolean visible_massfraction;
        constant Boolean visible_moleflow;
        constant Boolean visible_molefraction;
        Real y[4];
    end fmumodelica_rec_display_an_out;
    record fmumodelica_rec_display_an_out_data
        Real X[4] "Mass Fraction";
        Real X_flow[4] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_an_out_data;
    fmumodelica_rec_display_an_out display_an_out(CH4_index(start = -1) = -1,CO2_index(start = -1) = -1,CO_index(start = -1) = -1,H2O_index(start = 2) = 2,H2_index(start = 1) = 1,N2_index(start = 3) = 3,O2_index(start = 4) = 4,X_CH4 = 0.0,X_CO = 0.0,X_CO2 = 0.0,compatibleMedium(start = true) = true,data(X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,start = 300.0,unit = "K")),displayMassUnit(start = false) = false,flow_conversion = 1000.0,nbrOfPresentSubstances(start = 4) = 4,precision(start = 2) = 2,sensorType = FuelCell_Sensors_Types_SensorType.Composition,visible_massflow(start = false) = false,visible_massfraction(start = false) = false,visible_moleflow(start = false) = false,visible_molefraction(start = true) = true,y(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_cath_in
        constant Integer Ar_index "Ar substance index";
        constant Integer CO2_index "CO2 substance index";
        constant Integer H2O_index "H2O substance index";
        constant Integer N2_index "N2 substance index";
        constant Integer O2_index "O2 substance index";
        Real X_Ar;
        Real X_CO2;
        Real X_H2O;
        Real X_N2;
        Real X_O2;
        constant Boolean compatibleMedium;
        fmumodelica_rec_display_cath_in_data data annotation(Dialog(tab = "Components"));
        constant Boolean displayMassUnit "If false visualizer show concentration in mole";
        constant Real flow_conversion "Kg/s to g/s";
        constant Integer nbrOfPresentSubstances;
        constant Integer precision "Number of significant digits";
        constant FuelCell_Sensors_Types_SensorType sensorType "Sensor type";
        constant Boolean visible_massflow;
        constant Boolean visible_massfraction;
        constant Boolean visible_moleflow;
        constant Boolean visible_molefraction;
        Real y[5];
    end fmumodelica_rec_display_cath_in;
    record fmumodelica_rec_display_cath_in_data
        Real X[5] "Mass Fraction";
        Real X_flow[5] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_cath_in_data;
    fmumodelica_rec_display_cath_in display_cath_in(Ar_index(start = 1) = 1,CO2_index(start = 2) = 2,H2O_index(start = 3) = 3,N2_index(start = 4) = 4,O2_index(start = 5) = 5,compatibleMedium(start = true) = true,data(X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,start = 300.0,unit = "K")),displayMassUnit(start = false) = false,flow_conversion = 1000.0,nbrOfPresentSubstances(start = 5) = 5,precision(start = 2) = 2,sensorType = FuelCell_Sensors_Types_SensorType.Composition,visible_massflow(start = false) = false,visible_massfraction(start = false) = false,visible_moleflow(start = false) = false,visible_molefraction(start = true) = true,y(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_cath_out
        constant Integer Ar_index "Ar substance index";
        constant Integer CO2_index "CO2 substance index";
        constant Integer H2O_index "H2O substance index";
        constant Integer N2_index "N2 substance index";
        constant Integer O2_index "O2 substance index";
        Real X_Ar;
        Real X_CO2;
        Real X_H2O;
        Real X_N2;
        Real X_O2;
        constant Boolean compatibleMedium;
        fmumodelica_rec_display_cath_out_data data annotation(Dialog(tab = "Components"));
        constant Boolean displayMassUnit "If false visualizer show concentration in mole";
        constant Real flow_conversion "Kg/s to g/s";
        constant Integer nbrOfPresentSubstances;
        constant Integer precision "Number of significant digits";
        constant FuelCell_Sensors_Types_SensorType sensorType "Sensor type";
        constant Boolean visible_massflow;
        constant Boolean visible_massfraction;
        constant Boolean visible_moleflow;
        constant Boolean visible_molefraction;
        Real y[5];
    end fmumodelica_rec_display_cath_out;
    record fmumodelica_rec_display_cath_out_data
        Real X[5] "Mass Fraction";
        Real X_flow[5] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_cath_out_data;
    fmumodelica_rec_display_cath_out display_cath_out(Ar_index(start = 1) = 1,CO2_index(start = 2) = 2,H2O_index(start = 3) = 3,N2_index(start = 4) = 4,O2_index(start = 5) = 5,compatibleMedium(start = true) = true,data(X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,start = 300.0,unit = "K")),displayMassUnit(start = false) = false,flow_conversion = 1000.0,nbrOfPresentSubstances(start = 5) = 5,precision(start = 2) = 2,sensorType = FuelCell_Sensors_Types_SensorType.Composition,visible_massflow(start = false) = false,visible_massfraction(start = false) = false,visible_moleflow(start = false) = false,visible_molefraction(start = true) = true,y(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_j
        parameter Integer precision "Number of decimals to show";
        Real showNumber;
    end fmumodelica_rec_display_j;
    fmumodelica_rec_display_j display_j(precision(min = 0) = 1) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_phTmdot_an_in
        Real T_degC;
        parameter Boolean displayUnits "If true the actual units are displayed";
        Real h_kJ;
        Real mdot;
        Real p_bar;
        constant Integer precision_T "Number of significant digits - temperature";
        constant Integer precision_h "Number of significant digits - specific enthalpy";
        constant Integer precision_mdot "Number of significant digits - mass flow";
        constant Integer precision_p "Number of significant digits - pressure";
        fmumodelica_rec_display_phTmdot_an_in_y y annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_display_phTmdot_an_in;
    record fmumodelica_rec_display_phTmdot_an_in_y
        Real X[4] "Mass Fraction";
        Real X_flow[4] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_phTmdot_an_in_y;
    fmumodelica_rec_display_phTmdot_an_in display_phTmdot_an_in(T_degC(unit = "degC"),displayUnits = true,h_kJ(unit = "J/kg"),mdot(unit = "kg/s"),p_bar(unit = "bar"),precision_T(start = 1) = 1,precision_h(start = 1) = 1,precision_mdot(start = 2) = 2,precision_p(start = 5) = 5,y(X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_phTmdot_an_out
        Real T_degC;
        parameter Boolean displayUnits "If true the actual units are displayed";
        Real h_kJ;
        Real mdot;
        Real p_bar;
        constant Integer precision_T "Number of significant digits - temperature";
        constant Integer precision_h "Number of significant digits - specific enthalpy";
        constant Integer precision_mdot "Number of significant digits - mass flow";
        constant Integer precision_p "Number of significant digits - pressure";
        fmumodelica_rec_display_phTmdot_an_out_y y annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_display_phTmdot_an_out;
    record fmumodelica_rec_display_phTmdot_an_out_y
        Real X[4] "Mass Fraction";
        Real X_flow[4] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_phTmdot_an_out_y;
    fmumodelica_rec_display_phTmdot_an_out display_phTmdot_an_out(T_degC(unit = "degC"),displayUnits = true,h_kJ(unit = "J/kg"),mdot(unit = "kg/s"),p_bar(unit = "bar"),precision_T(start = 1) = 1,precision_h(start = 1) = 1,precision_mdot(start = 1) = 1,precision_p(start = 2) = 2,y(X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_phTmdot_cath_in
        Real T_degC;
        parameter Boolean displayUnits "If true the actual units are displayed";
        Real h_kJ;
        Real mdot;
        Real p_bar;
        constant Integer precision_T "Number of significant digits - temperature";
        constant Integer precision_h "Number of significant digits - specific enthalpy";
        constant Integer precision_mdot "Number of significant digits - mass flow";
        constant Integer precision_p "Number of significant digits - pressure";
        fmumodelica_rec_display_phTmdot_cath_in_y y annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_display_phTmdot_cath_in;
    record fmumodelica_rec_display_phTmdot_cath_in_y
        Real X[5] "Mass Fraction";
        Real X_flow[5] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_phTmdot_cath_in_y;
    fmumodelica_rec_display_phTmdot_cath_in display_phTmdot_cath_in(T_degC(unit = "degC"),displayUnits = true,h_kJ(unit = "J/kg"),mdot(unit = "kg/s"),p_bar(unit = "bar"),precision_T(start = 1) = 1,precision_h(start = 1) = 1,precision_mdot(start = 2) = 2,precision_p(start = 5) = 5,y(X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_phTmdot_cath_out
        Real T_degC;
        parameter Boolean displayUnits "If true the actual units are displayed";
        Real h_kJ;
        Real mdot;
        Real p_bar;
        constant Integer precision_T "Number of significant digits - temperature";
        constant Integer precision_h "Number of significant digits - specific enthalpy";
        constant Integer precision_mdot "Number of significant digits - mass flow";
        constant Integer precision_p "Number of significant digits - pressure";
        fmumodelica_rec_display_phTmdot_cath_out_y y annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_display_phTmdot_cath_out;
    record fmumodelica_rec_display_phTmdot_cath_out_y
        Real X[5] "Mass Fraction";
        Real X_flow[5] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_phTmdot_cath_out_y;
    fmumodelica_rec_display_phTmdot_cath_out display_phTmdot_cath_out(T_degC(unit = "degC"),displayUnits = true,h_kJ(unit = "J/kg"),mdot(unit = "kg/s"),p_bar(unit = "bar"),precision_T(start = 1) = 1,precision_h(start = 1) = 1,precision_mdot(start = 1) = 1,precision_p(start = 2) = 2,y(X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_phTmdot_w_in
        Real T_degC;
        parameter Boolean displayUnits "If true the actual units are displayed";
        Real h_kJ;
        Real mdot;
        Real p_bar;
        constant Integer precision_T "Number of significant digits - temperature";
        constant Integer precision_h "Number of significant digits - specific enthalpy";
        constant Integer precision_mdot "Number of significant digits - mass flow";
        constant Integer precision_p "Number of significant digits - pressure";
        fmumodelica_rec_display_phTmdot_w_in_y y annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_display_phTmdot_w_in;
    record fmumodelica_rec_display_phTmdot_w_in_y
        Real X[1] "Mass Fraction";
        Real X_flow[1] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_phTmdot_w_in_y;
    fmumodelica_rec_display_phTmdot_w_in display_phTmdot_w_in(T_degC(unit = "degC"),displayUnits = true,h_kJ(unit = "J/kg"),mdot(unit = "kg/s"),p_bar(unit = "bar"),precision_T(start = 1) = 1,precision_h(start = 1) = 1,precision_mdot(start = 1) = 1,precision_p(start = 2) = 2,y(X(min = {0.0},max = {1.0},unit = "1"),X_flow(unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_display_phTmdot_w_out
        Real T_degC;
        parameter Boolean displayUnits "If true the actual units are displayed";
        Real h_kJ;
        Real mdot;
        Real p_bar;
        constant Integer precision_T "Number of significant digits - temperature";
        constant Integer precision_h "Number of significant digits - specific enthalpy";
        constant Integer precision_mdot "Number of significant digits - mass flow";
        constant Integer precision_p "Number of significant digits - pressure";
        fmumodelica_rec_display_phTmdot_w_out_y y annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_display_phTmdot_w_out;
    record fmumodelica_rec_display_phTmdot_w_out_y
        Real X[1] "Mass Fraction";
        Real X_flow[1] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_display_phTmdot_w_out_y;
    fmumodelica_rec_display_phTmdot_w_out display_phTmdot_w_out(T_degC(unit = "degC"),displayUnits = true,h_kJ(unit = "J/kg"),mdot(unit = "kg/s"),p_bar(unit = "bar"),precision_T(start = 1) = 1,precision_h(start = 1) = 1,precision_mdot(start = 1) = 1,precision_p(start = 2) = 2,y(X(min = {0.0},max = {1.0},unit = "1"),X_flow(unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,start = 300.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    parameter Real dp_an_nom = 20000.0 "Nominal value of pressure drop at anode for linear friction loss model";
    record fmumodelica_rec_dp_an_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_dp_an_variation;
    fmumodelica_rec_dp_an_variation dp_an_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,4000.0},{225.0,4000.0},{450.0,4000.0},{675.0,4000.0},{900.0,4000.0},{1125.0,4000.0},{1350.0,4000.0},{1575.0,4000.0},{1800.0,4000.0},{2025.0,4000.0},{2250.0,6666.55},{2475.0,9333.45},{2700.0,11111.03},{2925.0,12000.0},{3150.0,14666.55},{3375.0,17333.45},{3600.0,20000.0}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    parameter Real dp_cath_nom = 22500.0 "Nominal value of pressure drop at cathode for linear friction loss model";
    record fmumodelica_rec_dp_cath_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_dp_cath_variation;
    fmumodelica_rec_dp_cath_variation dp_cath_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,10000.0},{225.0,10000.0},{450.0,10000.0},{675.0,10000.0},{900.0,10000.0},{1125.0,10000.0},{1350.0,10000.0},{1575.0,10000.0},{1800.0,10000.0},{2025.0,10000.0},{2250.0,12083.38},{2475.0,14166.62},{2700.0,15555.54},{2925.0,16250.0},{3150.0,18333.38},{3375.0,20416.62},{3600.0,22500.0}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_dp_water
        constant Real y "Value of Real output";
    end fmumodelica_rec_dp_water;
    fmumodelica_rec_dp_water dp_water(y = 43000.0) annotation(Dialog(tab = "Components"));
    parameter Real dp_water_nom = 43000.0 "Nominal value of cooling channel pressure drop for density profile friction model";
    Real err_rel(unit = "%");
    record fmumodelica_rec_error
        parameter Real k1 "Gain of input signal 1";
        parameter Real k2 "Gain of input signal 2";
        Real u1 "Connector of Real input signal 1";
        Real u2 "Connector of Real input signal 2";
        Real y "Connector of Real output signal";
    end fmumodelica_rec_error;
    fmumodelica_rec_error error(k1 = 1.0,k2 = -1.0) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_flowAnode
        parameter Real T "Temperature of the source";
        parameter Real V_flow "Fixed volume flow rate going out of the fluid port";
        constant Real X[4] "Composition of source";
        Real X_in[4] "Prescribed composition";
        fmumodelica_rec_flowAnode_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        parameter Real m_flow "Fixed mass flow rate going out of the fluid port";
        Real m_flow_in "Prescribed mass flow rate [kg/s]";
        fmumodelica_rec_flowAnode_massFlowBoundary massFlowBoundary annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_flowAnode;
    record fmumodelica_rec_flowAnode_fluidPort
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_flowAnode_fluidPort;
    record fmumodelica_rec_flowAnode_massFlowBoundary
        parameter Real T "Temperature of the source";
        parameter Real T_set "Set temperature, for all options";
        parameter Real V_flow "Fixed volume flow rate going out of the fluid port";
        constant Real Vflow_scale;
        constant Real X[4] "Composition of source";
        Real X_in[4] "Prescribed composition";
        Real d "Fluid density";
        parameter Boolean enable_p_iv "Use pressure as iteration variable";
        fmumodelica_rec_flowAnode_massFlowBoundary_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        Real h_set "Set spec. enthalpy, for all options";
        constant Boolean isSource "true, if source (flow leaving the source, as opposed to sink)";
        parameter Real m_flow "Fixed mass flow rate going out of the fluid port";
        Real m_flow_in "Prescribed mass flow rate [kg/s]";
        Real p "Pressure";
        parameter Real p_start "Initial Pressure";
        fmumodelica_rec_flowAnode_massFlowBoundary_state state annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_flowAnode_massFlowBoundary;
    record fmumodelica_rec_flowAnode_massFlowBoundary_fluidPort
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_flowAnode_massFlowBoundary_fluidPort;
    record fmumodelica_rec_flowAnode_massFlowBoundary_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_flowAnode_massFlowBoundary_state;
    fmumodelica_rec_flowAnode flowAnode(T(fixed = false,min = 0.0,unit = "K"),V_flow(unit = "m3/s") = 0.0,X = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},X_in(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0}),fluidPort(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg") = 200000.0,m_flow(unit = "kg/s") = 0.0,massFlowBoundary(T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_set(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V_flow(fixed = false,unit = "m3/s"),Vflow_scale = 1.0,X = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},d(min = 0.0,unit = "kg/m3"),enable_p_iv = true,fluidPort(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(fixed = false,min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_set(unit = "J/kg"),isSource(start = true) = true,m_flow(fixed = false,min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,unit = "Pa"),p_start(min = 0.0,unit = "Pa") = 100000.0,state(T(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_flowCathode
        parameter Real T "Temperature of the source";
        parameter Real V_flow "Fixed volume flow rate going out of the fluid port";
        constant Real X[5] "Composition of source";
        Real X_in[5] "Prescribed composition";
        fmumodelica_rec_flowCathode_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        parameter Real m_flow "Fixed mass flow rate going out of the fluid port";
        Real m_flow_in "Prescribed mass flow rate [kg/s]";
        fmumodelica_rec_flowCathode_massFlowBoundary massFlowBoundary annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_flowCathode;
    record fmumodelica_rec_flowCathode_fluidPort
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_flowCathode_fluidPort;
    record fmumodelica_rec_flowCathode_massFlowBoundary
        parameter Real T "Temperature of the source";
        parameter Real T_set "Set temperature, for all options";
        parameter Real V_flow "Fixed volume flow rate going out of the fluid port";
        constant Real Vflow_scale;
        constant Real X[5] "Composition of source";
        Real X_in[5] "Prescribed composition";
        Real d "Fluid density";
        parameter Boolean enable_p_iv "Use pressure as iteration variable";
        fmumodelica_rec_flowCathode_massFlowBoundary_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        Real h_set "Set spec. enthalpy, for all options";
        constant Boolean isSource "true, if source (flow leaving the source, as opposed to sink)";
        parameter Real m_flow "Fixed mass flow rate going out of the fluid port";
        Real m_flow_in "Prescribed mass flow rate [kg/s]";
        Real p "Pressure";
        parameter Real p_start "Initial Pressure";
        fmumodelica_rec_flowCathode_massFlowBoundary_state state annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_flowCathode_massFlowBoundary;
    record fmumodelica_rec_flowCathode_massFlowBoundary_fluidPort
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_flowCathode_massFlowBoundary_fluidPort;
    record fmumodelica_rec_flowCathode_massFlowBoundary_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_flowCathode_massFlowBoundary_state;
    fmumodelica_rec_flowCathode flowCathode(T(fixed = false,min = 0.0,unit = "K"),V_flow(unit = "m3/s") = 0.0,X = {0.0,0.0,0.0,0.77,0.23},X_in(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0}),fluidPort(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg") = 200000.0,m_flow(unit = "kg/s") = 0.0,massFlowBoundary(T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_set(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V_flow(fixed = false,unit = "m3/s"),Vflow_scale = 1.0,X = {0.0,0.0,0.0,0.77,0.23},d(min = 0.0,unit = "kg/m3"),enable_p_iv = true,fluidPort(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(fixed = false,min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_set(unit = "J/kg"),isSource(start = true) = true,m_flow(fixed = false,min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,unit = "Pa"),p_start(min = 0.0,unit = "Pa") = 100000.0,state(T(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_flow_rate_an_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[8,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_flow_rate_an_variation;
    fmumodelica_rec_flow_rate_an_variation flow_rate_an_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {29.59},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 2025.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,0.0},{225.0,7.397},{450.0,14.795},{675.0,19.726},{900.0,22.192},{1125.0,29.589},{1350.0,36.987},{1575.0,44.384}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_flow_rate_cath_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[8,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_flow_rate_cath_variation;
    fmumodelica_rec_flow_rate_cath_variation flow_rate_cath_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {59.23},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 2025.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,0.0},{225.0,14.808},{450.0,29.615},{675.0,39.487},{900.0,44.423},{1125.0,59.231},{1350.0,74.038},{1575.0,88.846}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_gain
        parameter Real k "Gain value multiplied with input signal";
        Real u "Input signal connector";
        Real y "Output signal connector";
    end fmumodelica_rec_gain;
    fmumodelica_rec_gain gain(k(fixed = false,unit = "1")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_gasSensor1
        fmumodelica_rec_gasSensor1_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor1_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor1_state state annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor1_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_gasSensor1;
    record fmumodelica_rec_gasSensor1_portA
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor1_portA;
    record fmumodelica_rec_gasSensor1_portB
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor1_portB;
    record fmumodelica_rec_gasSensor1_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_gasSensor1_state;
    record fmumodelica_rec_gasSensor1_u
        Real X[5] "Mass Fraction";
        Real X_flow[5] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_gasSensor1_u;
    fmumodelica_rec_gasSensor1 gasSensor1(portA(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,start = 100000.0,unit = "Pa")),portB(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),state(T(min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_gasSensor2
        fmumodelica_rec_gasSensor2_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor2_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor2_state state annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor2_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_gasSensor2;
    record fmumodelica_rec_gasSensor2_portA
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor2_portA;
    record fmumodelica_rec_gasSensor2_portB
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor2_portB;
    record fmumodelica_rec_gasSensor2_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_gasSensor2_state;
    record fmumodelica_rec_gasSensor2_u
        Real X[4] "Mass Fraction";
        Real X_flow[4] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_gasSensor2_u;
    fmumodelica_rec_gasSensor2 gasSensor2(portA(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,start = 100000.0,unit = "Pa")),portB(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),state(T(min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_gasSensor3
        fmumodelica_rec_gasSensor3_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor3_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor3_state state annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor3_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_gasSensor3;
    record fmumodelica_rec_gasSensor3_portA
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor3_portA;
    record fmumodelica_rec_gasSensor3_portB
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor3_portB;
    record fmumodelica_rec_gasSensor3_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_gasSensor3_state;
    record fmumodelica_rec_gasSensor3_u
        Real X[4] "Mass Fraction";
        Real X_flow[4] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_gasSensor3_u;
    fmumodelica_rec_gasSensor3 gasSensor3(portA(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),state(T(min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_gasSensor4
        fmumodelica_rec_gasSensor4_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor4_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor4_state state annotation(Dialog(tab = "Components"));
        fmumodelica_rec_gasSensor4_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_gasSensor4;
    record fmumodelica_rec_gasSensor4_portA
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor4_portA;
    record fmumodelica_rec_gasSensor4_portB
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_gasSensor4_portB;
    record fmumodelica_rec_gasSensor4_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_gasSensor4_state;
    record fmumodelica_rec_gasSensor4_u
        Real X[5] "Mass Fraction";
        Real X_flow[5] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_gasSensor4_u;
    fmumodelica_rec_gasSensor4 gasSensor4(portA(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),state(T(min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),X_flow(each unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_ground
        fmumodelica_rec_ground_p p annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_ground;
    record fmumodelica_rec_ground_p
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_ground_p;
    fmumodelica_rec_ground ground(p(i(unit = "A"),v = 0.0)) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_humidification_an
        parameter Real MM_dry "Dry gas molar mass";
        Real RH;
        parameter Real T_dew "Wet gas dew point";
        parameter Real T_in "Gas inlet temperature";
        constant Real T_ref "Standard temperature";
        Real V_flow_dry_in "Dry gas inlet volumetric flow rate";
        Real m_flow_dry_in "Dry gas inlet mass flow rate";
        Real m_flow_wet_in "Wet gas inlet mass flow rate";
        Real p_in "Gas inlet pressure";
        constant Real p_ref "Standard pressure";
        parameter Real rho_dry "Dry gas density in standard conditions";
        Real x_wet_in[4] "Wet gas inlet mass-based composition";
        Real y_H2O "H2O molar fraction in wet gas";
        parameter Real y_dry_in[4] "Dry gas inlet molar-based composition";
        Real y_wet_in[4];
    end fmumodelica_rec_humidification_an;
    fmumodelica_rec_humidification_an humidification_an(MM_dry(fixed = false,min = 0.0,unit = "kg/mol"),RH(unit = "1"),T_dew(fixed = false,min = 0.0,unit = "K"),T_in(fixed = false,min = 0.0,unit = "K"),T_ref = 273.15,V_flow_dry_in(unit = "NLPM"),m_flow_dry_in(unit = "kg/s"),m_flow_wet_in(unit = "kg/s"),p_in(unit = "Pa"),p_ref = 101325.0,rho_dry(fixed = false,min = 0.0,unit = "kg/m3"),y_H2O(min = 0.0,max = 1.0,unit = "1"),y_dry_in(each fixed = false,min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1"),y_wet_in(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_humidification_cath
        parameter Real MM_dry "Dry gas molar mass";
        Real RH;
        parameter Real T_dew "Wet gas dew point";
        parameter Real T_in "Gas inlet temperature";
        constant Real T_ref "Standard temperature";
        Real V_flow_dry_in "Dry gas inlet volumetric flow rate";
        Real m_flow_dry_in "Dry gas inlet mass flow rate";
        Real m_flow_wet_in "Wet gas inlet mass flow rate";
        Real p_in "Gas inlet pressure";
        constant Real p_ref "Standard pressure";
        parameter Real rho_dry "Dry gas density in standard conditions";
        Real x_wet_in[5] "Wet gas inlet mass-based composition";
        Real y_H2O "H2O molar fraction in wet gas";
        parameter Real y_dry_in[5] "Dry gas inlet molar-based composition";
        Real y_wet_in[5];
    end fmumodelica_rec_humidification_cath;
    fmumodelica_rec_humidification_cath humidification_cath(MM_dry(fixed = false,min = 0.0,unit = "kg/mol"),RH(unit = "1"),T_dew(fixed = false,min = 0.0,unit = "K"),T_in(fixed = false,min = 0.0,unit = "K"),T_ref = 273.15,V_flow_dry_in(unit = "NLPM"),m_flow_dry_in(unit = "kg/s"),m_flow_wet_in(unit = "kg/s"),p_in(unit = "Pa"),p_ref = 101325.0,rho_dry(fixed = false,min = 0.0,unit = "kg/m3"),y_H2O(min = 0.0,max = 1.0,unit = "1"),y_dry_in(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1"),y_wet_in(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1")) annotation(Dialog(tab = "Components"));
    Modelica.Blocks.Interfaces.RealInput j_0(start = 0.0) annotation(Placement(transformation(extent = {{-140,30.0},{-100,70.0}},rotation = 0.0,origin = {0.0,0.0})));
    Modelica.Blocks.Interfaces.RealInput j_loss(start = 0.0) annotation(Placement(transformation(extent = {{-140,-20.0},{-100,20.0}},rotation = 0.0,origin = {0.0,0.0})));
    Modelica.Blocks.Interfaces.RealInput m_conc(start = 0.0) annotation(Placement(transformation(extent = {{-140,-70.0},{-100,-30.0}},rotation = 0.0,origin = {0.0,0.0})));
    parameter Real m_flow_an_nom = 0.0006072 "Nominal value of anodic wet gas inlet mass flow rate for linear friction loss model";
    parameter Real m_flow_cath_nom = 0.0006072 "Nominal value of cathodic wet gas inlet mass flow rate for linear friction loss model";
    parameter Real m_flow_water_max(fixed = false,unit = "kg/s");
    parameter Real m_flow_water_min(fixed = false,unit = "kg/s");
    parameter Real m_flow_water_nom = 0.0825 "Nominal value of water inlet mass flow rate for density profile friction model";
    record fmumodelica_rec_multiDisplaySensor1
        fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor multiDisplaySensor annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor1_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor1_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor1_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_multiDisplaySensor1;
    record fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor
        fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_state state annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor;
    record fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_portA
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_portA;
    record fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_portB
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_portB;
    record fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_state
        constant Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_state;
    record fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_u
        Real X[1] "Mass Fraction";
        Real X_flow[1] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_multiDisplaySensor1_multiDisplaySensor_u;
    record fmumodelica_rec_multiDisplaySensor1_portA
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor1_portA;
    record fmumodelica_rec_multiDisplaySensor1_portB
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor1_portB;
    record fmumodelica_rec_multiDisplaySensor1_u
        Real X[1] "Mass Fraction";
        Real X_flow[1] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_multiDisplaySensor1_u;
    fmumodelica_rec_multiDisplaySensor1 multiDisplaySensor1(multiDisplaySensor(portA(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow = {1.0},h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),state(X = {1.0},h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0},max = {1.0},unit = "1"),X_flow(unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))),portA(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow = {1.0},h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0},max = {1.0},unit = "1"),X_flow(unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_multiDisplaySensor4
        fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor multiDisplaySensor annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor4_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor4_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor4_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_multiDisplaySensor4;
    record fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor
        fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_portA portA annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_portB portB annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_state state annotation(Dialog(tab = "Components"));
        fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_u u annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor;
    record fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_portA
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_portA;
    record fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_portB
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_portB;
    record fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_state
        parameter Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_state;
    record fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_u
        Real X[1] "Mass Fraction";
        Real X_flow[1] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_multiDisplaySensor4_multiDisplaySensor_u;
    record fmumodelica_rec_multiDisplaySensor4_portA
        constant Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor4_portA;
    record fmumodelica_rec_multiDisplaySensor4_portB
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_multiDisplaySensor4_portB;
    record fmumodelica_rec_multiDisplaySensor4_u
        Real X[1] "Mass Fraction";
        Real X_flow[1] "Mass flow";
        Real enthalpy;
        Real mdot;
        Real pressure;
        Real temp;
    end fmumodelica_rec_multiDisplaySensor4_u;
    fmumodelica_rec_multiDisplaySensor4 multiDisplaySensor4(multiDisplaySensor(portA(X_outflow = {1.0},h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),state(X(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0},max = {1.0},unit = "1"),X_flow(unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))),portA(X_outflow = {1.0},h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),portB(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),u(X(min = {0.0},max = {1.0},unit = "1"),X_flow(unit = "kg/s"),enthalpy(unit = "J/kg"),mdot(unit = "kg/s"),pressure(unit = "Pa"),temp(min = 0.0,max = 10000.0,unit = "K"))) annotation(Dialog(tab = "Components"));
    Modelica.Blocks.Interfaces.RealInput n_conc(start = 0.0) annotation(Placement(transformation(extent = {{-140,-120.0},{-100,-80.0}},rotation = 0.0,origin = {0.0,0.0})));
    parameter Real p_an(unit = "Pa") = 160000.0 "Anodic gas pressure at constant load";
    record fmumodelica_rec_p_an_out
        parameter Real k1 "Gain of input signal 1";
        parameter Real k2 "Gain of input signal 2";
        Real u1 "Connector of Real input signal 1";
        Real u2 "Connector of Real input signal 2";
        Real y "Connector of Real output signal";
    end fmumodelica_rec_p_an_out;
    fmumodelica_rec_p_an_out p_an_out(k1 = -1.0,k2 = 1.0) annotation(Dialog(tab = "Components"));
    parameter Real p_an_start(unit = "Pa") = 140000.0 "Start value of anodic gas pressure at variable load";
    record fmumodelica_rec_p_an_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_p_an_variation;
    fmumodelica_rec_p_an_variation p_an_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,141325.0},{225.0,141325.0},{450.0,141325.0},{675.0,141325.0},{900.0,141325.0},{1125.0,151325.0},{1350.0,151325.0},{1575.0,151325.0},{1800.0,191325.0},{2025.0,191325.0},{2250.0,221325.0},{2475.0,221325.0},{2700.0,221325.0},{2925.0,221325.0},{3150.0,221325.0},{3375.0,221325.0},{3600.0,221325.0}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    parameter Real p_cath(unit = "Pa") = 160000.0 "Cathodic gas pressure at constant load";
    record fmumodelica_rec_p_cath_out
        parameter Real k1 "Gain of input signal 1";
        parameter Real k2 "Gain of input signal 2";
        Real u1 "Connector of Real input signal 1";
        Real u2 "Connector of Real input signal 2";
        Real y "Connector of Real output signal";
    end fmumodelica_rec_p_cath_out;
    fmumodelica_rec_p_cath_out p_cath_out(k1 = 1.0,k2 = -1.0) annotation(Dialog(tab = "Components"));
    parameter Real p_cath_start(unit = "Pa") = 120000.0 "Start value of cathodic gas pressure at variable load";
    record fmumodelica_rec_p_cath_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_p_cath_variation;
    fmumodelica_rec_p_cath_variation p_cath_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,121325.0},{225.0,121325.0},{450.0,121325.0},{675.0,121325.0},{900.0,121325.0},{1125.0,131325.0},{1350.0,131325.0},{1575.0,131325.0},{1800.0,171325.0},{2025.0,171325.0},{2250.0,201325.0},{2475.0,201325.0},{2700.0,201325.0},{2925.0,201325.0},{3150.0,201325.0},{3375.0,201325.0},{3600.0,201325.0}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    parameter Real p_water(unit = "Pa") = 240000.0 "Water pressure at constant load";
    parameter Real p_water_in_nom = 240000.0 "Nominal value of water inlet pressure for density profile friction model";
    record fmumodelica_rec_p_water_out
        parameter Real k1 "Gain of input signal 1";
        parameter Real k2 "Gain of input signal 2";
        Real u1 "Connector of Real input signal 1";
        constant Real u2 "Connector of Real input signal 2";
        Real y "Connector of Real output signal";
    end fmumodelica_rec_p_water_out;
    fmumodelica_rec_p_water_out p_water_out(k1 = 1.0,k2 = -1.0,u2 = 43000.0) annotation(Dialog(tab = "Components"));
    parameter Real p_water_start(unit = "Pa") = 160000.0 "Start value of water pressure at variable load";
    record fmumodelica_rec_p_water_variation
        parameter Integer columns[1] "Columns of table to be interpolated";
        constant Modelica_Blocks_Types_Extrapolation extrapolation "Extrapolation of data outside the definition range";
        parameter String fileName "File where matrix is stored";
        constant Integer nout "Number of outputs";
        parameter Real offset[1] "Offsets of output signals";
        parameter Real shiftTime "Shift time of first table column";
        constant Modelica_Blocks_Types_Smoothness smoothness "Smoothness of table interpolation";
        parameter Real startTime "Output = offset for time < startTime";
        parameter Real t_max "Maximum abscissa value defined in table";
        parameter Real t_maxScaled "Maximum (scaled) abscissa value defined in table";
        parameter Real t_min "Minimum abscissa value defined in table";
        parameter Real t_minScaled "Minimum (scaled) abscissa value defined in table";
        parameter Real table[17,2] "Table matrix (time = first column; e.g., table=[0, 0; 1, 1; 2, 4])";
        parameter String tableName "Table name on file or in function usertab (see docu)";
        constant Boolean tableOnFile "= true, if table is defined on file or in function usertab";
        parameter Modelica_Blocks_Types_TimeEvents timeEvents "Time event handling of table interpolation";
        constant Real timeScale "Time scale of first table column";
        constant Boolean verboseExtrapolation "= true, if warning messages are to be printed if time is outside the table definition range";
        parameter Boolean verboseRead "= true, if info message that file is loading is to be printed";
        Real y[1] "Connector of Real output signals";
    end fmumodelica_rec_p_water_variation;
    fmumodelica_rec_p_water_variation p_water_variation(columns = {2},extrapolation = Modelica_Blocks_Types_Extrapolation.LastTwoPoints,fileName = "NoName",nout(start = 1) = 1,offset = {0.0},shiftTime(fixed = false,unit = "s"),smoothness = Modelica_Blocks_Types_Smoothness.LinearSegments,startTime(unit = "s") = 0.0,t_max(fixed = false,unit = "s"),t_maxScaled(fixed = false),t_min(fixed = false,unit = "s"),t_minScaled(fixed = false),table = {{0.0,160000.0},{225.0,160000.0},{450.0,160000.0},{675.0,160000.0},{900.0,160000.0},{1125.0,170000.0},{1350.0,170000.0},{1575.0,170000.0},{1800.0,210000.0},{2025.0,210000.0},{2250.0,240000.0},{2475.0,240000.0},{2700.0,240000.0},{2925.0,240000.0},{3150.0,240000.0},{3375.0,240000.0},{3600.0,240000.0}},tableName = "NoName",tableOnFile(start = false) = false,timeEvents = Modelica_Blocks_Types_TimeEvents.Always,timeScale = 1.0,verboseExtrapolation(start = false) = false,verboseRead = true) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_ramp_m_flow_water
        parameter Real duration "Duration of ramp (= 0.0 gives a Step)";
        parameter Real height "Height of ramps";
        parameter Real offset "Offset of output signal y";
        parameter Real startTime "Output y = offset for time < startTime";
        Real y "Connector of Real output signal";
    end fmumodelica_rec_ramp_m_flow_water;
    fmumodelica_rec_ramp_m_flow_water ramp_m_flow_water(duration(min = 0.0,unit = "s") = 0.0,height(fixed = false),offset(fixed = false),startTime(unit = "s") = 3600.0) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_relative_error
        Real showNumber;
        parameter Integer significantDigits "Number of significant digits to be shown";
    end fmumodelica_rec_relative_error;
    fmumodelica_rec_relative_error relative_error(significantDigits(min = 1) = 3) annotation(Dialog(tab = "Components"));
    parameter Real rho_an_nom = 0.8 "Nominal value of anodic wet gas inlet density for linear friction loss model";
    parameter Real rho_cath_nom = 0.8 "Nominal value of cathodic wet gas inlet density for linear friction loss model";
    constant Real rho_water = 1000.0 "Constant water density";
    record fmumodelica_rec_sinkAnode
        parameter Real T "temperature of the sink";
        parameter Real X[4] "mass fraction of the sink";
        Real X_in[4] "Prescribed mass fractions";
        fmumodelica_rec_sinkAnode_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        parameter Real p "pressure in fluid port";
        Real p_in "Prescribed pressure";
        fmumodelica_rec_sinkAnode_pressureBoundary pressureBoundary annotation(Dialog(tab = "Components"));
        constant Modelon_ThermoFluid_Choices_RealPressureUnit pressureUnit "Unit of pressure real input signal";
    end fmumodelica_rec_sinkAnode;
    record fmumodelica_rec_sinkAnode_fluidPort
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sinkAnode_fluidPort;
    record fmumodelica_rec_sinkAnode_pressureBoundary
        constant Integer N "number of vector elements in connector";
        parameter Real T "Temperature of the source";
        parameter Real T_set "Prescribed temperature, for all options";
        parameter Real Tc_port_state "Time constant of port state filter";
        parameter Real X[4] "Mass fraction of the source";
        Real X_in[4] "Prescribed mass fractions";
        Real X_port[1,4] "Port mass based fluid composition, flow direction dependent";
        constant Boolean enable_m_flow_iv[1] "Use mass flow rates as iteration variables";
        parameter Boolean enable_p_res "Use pressure residual equations";
        constant Boolean filter_port_state "Apply filter on port state variables, avoids discontinuous connector state at flow reversal";
        fmumodelica_rec_sinkAnode_pressureBoundary_fluidPort fluidPort[1] annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        Real h_port[1] "Port specific enthalpy, flow direction dependent";
        Real h_set "Prescribed specific enthalpy, for all options";
        constant Boolean isSource "true, if source (flow leaving the source, as opposed to sink)";
        Real m_flow[1] "Mass flow rate";
        constant Real m_flow_start[1] "Initial Mass flow rate";
        parameter Real p "Pressure in fluid port";
        Real p_in "Prescribed pressure";
        constant Real p_scale;
        Real p_set "Set pressure, for all options";
        fmumodelica_rec_sinkAnode_pressureBoundary_state state annotation(Dialog(tab = "Components"));
        constant Boolean steady_state_port_init "Initialize port state in steady state, otherwise fixed initialization at prescribed state";
    end fmumodelica_rec_sinkAnode_pressureBoundary;
    record fmumodelica_rec_sinkAnode_pressureBoundary_fluidPort
        Real X_outflow[4] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sinkAnode_pressureBoundary_fluidPort;
    record fmumodelica_rec_sinkAnode_pressureBoundary_state
        Real T "Temperature of medium";
        Real X[4] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_sinkAnode_pressureBoundary_state;
    fmumodelica_rec_sinkAnode sinkAnode(T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg") = {0.025184849811402215,0.22506901259517342,0.34997781202588196,0.3997683255675424},fluidPort(X_outflow(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg") = 200000.0,p(min = 0.0,max = 100000000.0,unit = "Pa") = 100000.0,pressureBoundary(N(start = 1) = 1,T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_set(fixed = false,min = 0.0,max = 10000.0,unit = "K"),Tc_port_state(unit = "s") = 0.1,X(each fixed = false,min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),X_port(min = {{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0}},each unit = "1"),enable_m_flow_iv(start = {true}) = {true},enable_p_res = false,filter_port_state(start = false) = false,fluidPort(X_outflow(min = {{0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),h(fixed = false,min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_port(unit = "J/kg"),h_set(unit = "J/kg"),isSource(start = true) = true,m_flow(min = {-100000000.0},max = {100000000.0},start = {0.01},unit = "kg/s"),m_flow_start = {0.01},p(fixed = false,min = 0.0,max = 100000000.0,unit = "Pa"),p_scale = 1.0,p_set(unit = "Pa"),state(T(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),steady_state_port_init(start = false) = false),pressureUnit = Modelon_ThermoFluid_Choices_RealPressureUnit.Pa) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_sinkCathode
        parameter Real T "temperature of the sink";
        parameter Real X[5] "mass fraction of the sink";
        Real X_in[5] "Prescribed mass fractions";
        fmumodelica_rec_sinkCathode_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        parameter Real p "pressure in fluid port";
        Real p_in "Prescribed pressure";
        fmumodelica_rec_sinkCathode_pressureBoundary pressureBoundary annotation(Dialog(tab = "Components"));
        constant Modelon_ThermoFluid_Choices_RealPressureUnit pressureUnit "Unit of pressure real input signal";
    end fmumodelica_rec_sinkCathode;
    record fmumodelica_rec_sinkCathode_fluidPort
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sinkCathode_fluidPort;
    record fmumodelica_rec_sinkCathode_pressureBoundary
        constant Integer N "number of vector elements in connector";
        parameter Real T "Temperature of the source";
        parameter Real T_set "Prescribed temperature, for all options";
        parameter Real Tc_port_state "Time constant of port state filter";
        parameter Real X[5] "Mass fraction of the source";
        Real X_in[5] "Prescribed mass fractions";
        Real X_port[1,5] "Port mass based fluid composition, flow direction dependent";
        constant Boolean enable_m_flow_iv[1] "Use mass flow rates as iteration variables";
        parameter Boolean enable_p_res "Use pressure residual equations";
        constant Boolean filter_port_state "Apply filter on port state variables, avoids discontinuous connector state at flow reversal";
        fmumodelica_rec_sinkCathode_pressureBoundary_fluidPort fluidPort[1] annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        Real h_port[1] "Port specific enthalpy, flow direction dependent";
        Real h_set "Prescribed specific enthalpy, for all options";
        constant Boolean isSource "true, if source (flow leaving the source, as opposed to sink)";
        Real m_flow[1] "Mass flow rate";
        constant Real m_flow_start[1] "Initial Mass flow rate";
        parameter Real p "Pressure in fluid port";
        Real p_in "Prescribed pressure";
        constant Real p_scale;
        Real p_set "Set pressure, for all options";
        fmumodelica_rec_sinkCathode_pressureBoundary_state state annotation(Dialog(tab = "Components"));
        constant Boolean steady_state_port_init "Initialize port state in steady state, otherwise fixed initialization at prescribed state";
    end fmumodelica_rec_sinkCathode_pressureBoundary;
    record fmumodelica_rec_sinkCathode_pressureBoundary_fluidPort
        Real X_outflow[5] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sinkCathode_pressureBoundary_fluidPort;
    record fmumodelica_rec_sinkCathode_pressureBoundary_state
        Real T "Temperature of medium";
        Real X[5] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_sinkCathode_pressureBoundary_state;
    fmumodelica_rec_sinkCathode sinkCathode(T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg") = {0.0,0.0,0.0,0.77,0.23},fluidPort(X_outflow(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg") = 200000.0,p(min = 0.0,max = 100000000.0,unit = "Pa") = 100000.0,pressureBoundary(N(start = 1) = 1,T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_set(fixed = false,min = 0.0,max = 10000.0,unit = "K"),Tc_port_state(unit = "s") = 0.1,X(each fixed = false,min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),X_port(min = {{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0}},each unit = "1"),enable_m_flow_iv(start = {true}) = {true},enable_p_res = false,filter_port_state(start = false) = false,fluidPort(X_outflow(min = {{0.0,0.0,0.0,0.0,0.0}},max = {{1.0,1.0,1.0,1.0,1.0}},each unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),h(fixed = false,min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_port(unit = "J/kg"),h_set(unit = "J/kg"),isSource(start = true) = true,m_flow(min = {-100000000.0},max = {100000000.0},start = {0.01},unit = "kg/s"),m_flow_start = {0.01},p(fixed = false,min = 0.0,max = 100000000.0,unit = "Pa"),p_scale = 1.0,p_set(unit = "Pa"),state(T(min = 0.0,max = 10000.0,start = 300.0,unit = "K"),X(min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "kg/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),steady_state_port_init(start = false) = false),pressureUnit = Modelon_ThermoFluid_Choices_RealPressureUnit.Pa) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_sinkP
        parameter Real T "temperature of the sink";
        parameter Real X[1] "mass fraction of the sink";
        fmumodelica_rec_sinkP_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        parameter Real p "pressure in fluid port";
        Real p_in "Prescribed pressure";
        fmumodelica_rec_sinkP_pressureBoundary pressureBoundary annotation(Dialog(tab = "Components"));
        constant Modelon_ThermoFluid_Choices_RealPressureUnit pressureUnit "Unit of pressure real input signal";
    end fmumodelica_rec_sinkP;
    record fmumodelica_rec_sinkP_fluidPort
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sinkP_fluidPort;
    record fmumodelica_rec_sinkP_pressureBoundary
        constant Integer N "number of vector elements in connector";
        parameter Real T "Temperature of the source";
        parameter Real T_set "Prescribed temperature, for all options";
        parameter Real Tc_port_state "Time constant of port state filter";
        parameter Real X[1] "Mass fraction of the source";
        Real X_port[1,1] "Port mass based fluid composition, flow direction dependent";
        constant Boolean enable_m_flow_iv[1] "Use mass flow rates as iteration variables";
        parameter Boolean enable_p_res "Use pressure residual equations";
        constant Boolean filter_port_state "Apply filter on port state variables, avoids discontinuous connector state at flow reversal";
        fmumodelica_rec_sinkP_pressureBoundary_fluidPort fluidPort[1] annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        Real h_port[1] "Port specific enthalpy, flow direction dependent";
        Real h_set "Prescribed specific enthalpy, for all options";
        constant Boolean isSource "true, if source (flow leaving the source, as opposed to sink)";
        Real m_flow[1] "Mass flow rate";
        constant Real m_flow_start[1] "Initial Mass flow rate";
        parameter Real p "Pressure in fluid port";
        Real p_in "Prescribed pressure";
        constant Real p_scale;
        Real p_set "Set pressure, for all options";
        fmumodelica_rec_sinkP_pressureBoundary_state state annotation(Dialog(tab = "Components"));
        constant Boolean steady_state_port_init "Initialize port state in steady state, otherwise fixed initialization at prescribed state";
    end fmumodelica_rec_sinkP_pressureBoundary;
    record fmumodelica_rec_sinkP_pressureBoundary_fluidPort
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sinkP_pressureBoundary_fluidPort;
    record fmumodelica_rec_sinkP_pressureBoundary_state
        parameter Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_sinkP_pressureBoundary_state;
    fmumodelica_rec_sinkP sinkP(T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),X(min = {0.0},max = {1.0},unit = "kg/kg") = {1.0},fluidPort(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg") = 200000.0,p(min = 0.0,max = 100000000.0,unit = "Pa") = 100000.0,pressureBoundary(N(start = 1) = 1,T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_set(fixed = false,min = 0.0,max = 10000.0,unit = "K"),Tc_port_state(unit = "s") = 0.1,X(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),X_port(min = {{0.0}},max = {{1.0}},unit = "1"),enable_m_flow_iv(start = {true}) = {true},enable_p_res = false,filter_port_state(start = false) = false,fluidPort(X_outflow(fixed = false,min = {{0.0}},max = {{1.0}},unit = "kg/kg"),h_outflow(min = {-10000000000.0},max = {10000000000.0},unit = "J/kg"),m_flow(min = {-100000000.0},max = {100000000.0},unit = "kg/s"),p(min = {0.0},max = {100000000.0},unit = "Pa")),h(fixed = false,min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_port(unit = "J/kg"),h_set(unit = "J/kg"),isSource(start = true) = true,m_flow(min = {-1e+60},max = {1e+60},unit = "kg/s"),m_flow_start = {0.01},p(fixed = false,min = 0.0,max = 100000000.0,unit = "Pa"),p_scale = 1.0,p_set(unit = "Pa"),state(X(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")),steady_state_port_init(start = false) = false),pressureUnit = Modelon_ThermoFluid_Choices_RealPressureUnit.Pa) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_sourceW
        parameter Real T "Temperature of the source";
        parameter Real V_flow "Fixed volume flow rate going out of the fluid port";
        parameter Real X[1] "Composition of source";
        fmumodelica_rec_sourceW_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        parameter Real m_flow "Fixed mass flow rate going out of the fluid port";
        Real m_flow_in "Prescribed mass flow rate [kg/s]";
        fmumodelica_rec_sourceW_massFlowBoundary massFlowBoundary annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_sourceW;
    record fmumodelica_rec_sourceW_fluidPort
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sourceW_fluidPort;
    record fmumodelica_rec_sourceW_massFlowBoundary
        parameter Real T "Temperature of the source";
        parameter Real T_set "Set temperature, for all options";
        parameter Real V_flow "Fixed volume flow rate going out of the fluid port";
        constant Real Vflow_scale;
        parameter Real X[1] "Composition of source";
        Real d "Fluid density";
        parameter Boolean enable_p_iv "Use pressure as iteration variable";
        fmumodelica_rec_sourceW_massFlowBoundary_fluidPort fluidPort annotation(Dialog(tab = "Components"));
        parameter Real h "Specific enthalpy of the source";
        Real h_set "Set spec. enthalpy, for all options";
        constant Boolean isSource "true, if source (flow leaving the source, as opposed to sink)";
        parameter Real m_flow "Fixed mass flow rate going out of the fluid port";
        Real m_flow_in "Prescribed mass flow rate [kg/s]";
        Real p "Pressure";
        parameter Real p_start "Initial Pressure";
        fmumodelica_rec_sourceW_massFlowBoundary_state state annotation(Dialog(tab = "Components"));
    end fmumodelica_rec_sourceW_massFlowBoundary;
    record fmumodelica_rec_sourceW_massFlowBoundary_fluidPort
        parameter Real X_outflow[1] "Mass fractions of exiting fluid";
        Real h_outflow "Specific enthalpy of exiting fluid ";
        Real m_flow "Mass flow rate into the component";
        Real p "Pressure";
    end fmumodelica_rec_sourceW_massFlowBoundary_fluidPort;
    record fmumodelica_rec_sourceW_massFlowBoundary_state
        parameter Real X[1] "Mass fractions (= (component mass)/total mass  m_i/m)";
        Real h "Specific Enthalpy of medium";
        Real p "Absolute pressure of medium";
    end fmumodelica_rec_sourceW_massFlowBoundary_state;
    fmumodelica_rec_sourceW sourceW(T(fixed = false,min = 0.0,unit = "K"),V_flow(unit = "m3/s") = 0.0,X(min = {0.0},max = {1.0},unit = "1") = {1.0},fluidPort(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg") = 200000.0,m_flow(unit = "kg/s") = 0.0,massFlowBoundary(T(fixed = false,min = 0.0,max = 10000.0,unit = "K"),T_set(fixed = false,min = 0.0,max = 10000.0,unit = "K"),V_flow(fixed = false,unit = "m3/s"),Vflow_scale = 1.0,X(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),d(min = 0.0,unit = "kg/m3"),enable_p_iv = true,fluidPort(X_outflow(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h_outflow(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),m_flow(min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,max = 100000000.0,unit = "Pa")),h(fixed = false,min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),h_set(unit = "J/kg"),isSource(start = true) = true,m_flow(fixed = false,min = -100000000.0,max = 100000000.0,unit = "kg/s"),p(min = 0.0,unit = "Pa"),p_start(min = 0.0,unit = "Pa") = 100000.0,state(X(fixed = false,min = {0.0},max = {1.0},unit = "kg/kg"),h(min = -10000000000.0,max = 10000000000.0,unit = "J/kg"),p(min = 0.0,max = 100000000.0,unit = "Pa")))) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_variable_load
        Real i "Current flowing from pin p to pin n as input signal";
        fmumodelica_rec_variable_load_n n annotation(Dialog(tab = "Components"));
        fmumodelica_rec_variable_load_p p annotation(Dialog(tab = "Components"));
        Real v "Voltage drop between the two pins (= p.v - n.v)";
    end fmumodelica_rec_variable_load;
    record fmumodelica_rec_variable_load_n
        Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_variable_load_n;
    record fmumodelica_rec_variable_load_p
        Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_variable_load_p;
    fmumodelica_rec_variable_load variable_load(i(unit = "A"),n(i(unit = "A"),v = 0.0),p(i(unit = "A"),v(unit = "V")),v(unit = "V")) annotation(Dialog(tab = "Components"));
    record fmumodelica_rec_voltageSensor
        fmumodelica_rec_voltageSensor_n n annotation(Dialog(tab = "Components"));
        fmumodelica_rec_voltageSensor_p p annotation(Dialog(tab = "Components"));
        Real v "Voltage between pin p and n (= p.v - n.v) as output signal";
    end fmumodelica_rec_voltageSensor;
    record fmumodelica_rec_voltageSensor_n
        constant Real i "Current flowing into the pin";
        constant Real v "Potential at the pin";
    end fmumodelica_rec_voltageSensor_n;
    record fmumodelica_rec_voltageSensor_p
        constant Real i "Current flowing into the pin";
        Real v "Potential at the pin";
    end fmumodelica_rec_voltageSensor_p;
    fmumodelica_rec_voltageSensor voltageSensor(n(i = 0.0,v = 0.0),p(i = 0.0,v(unit = "V")),v(unit = "V")) annotation(Dialog(tab = "Components"));
    Modelica.Blocks.Interfaces.RealOutput y annotation(Placement(transformation(extent = {{100.0,-10.0},{120.0,10.0}},rotation = 0.0,origin = {0.0,0.0})));
    parameter Real y_dry_an[4](min = {0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0},each unit = "1") = {0.7,0.0,0.7,0.0} "Anodic dry gas inlet molar-based composition";
    parameter Real y_dry_cath[5](min = {0.0,0.0,0.0,0.0,0.0},max = {1.0,1.0,1.0,1.0,1.0},each unit = "1") = {0.0,0.0,0.0,0.79,0.21} "Cathodic dry gas inlet molar-based composition";
    type Modelica_Blocks_Types_Extrapolation = enumeration(HoldLastPoint "Hold the first/last table point outside of the table scope",LastTwoPoints "Extrapolate by using the derivative at the first/last table points outside of the table scope",Periodic "Repeat the table scope periodically",NoExtrapolation "Extrapolation triggers an error");
    type Modelica_Blocks_Types_Smoothness = enumeration(LinearSegments "Linear interpolation of table points",ContinuousDerivative "Akima spline interpolation of table points (such that the first derivative is continuous)",ConstantSegments "Piecewise constant interpolation of table points (the value from the previous abscissa point is returned)",MonotoneContinuousDerivative1 "Fritsch-Butland spline interpolation (such that the monotonicity is preserved and the first derivative is continuous)",MonotoneContinuousDerivative2 "Steffen spline interpolation of table points (such that the monotonicity is preserved and the first derivative is continuous)",ModifiedContinuousDerivative "Modified Akima spline interpolation of table points (such that the first derivative is continuous and shortcomings of the original Akima method are avoided)");
    type Modelica_Blocks_Types_TimeEvents = enumeration(Always "Always generate time events at interval boundaries",AtDiscontinuities "Generate time events at discontinuities (defined by duplicated sample points)",NoTimeEvents "No time events at interval boundaries");
    type Modelon_ThermoFluid_Choices_InitOptions = enumeration(initialValues "Initialization using start values",initialValuesNoP "Initialization using start values, except for pressure",steadyState "Steady-state initialization",steadyStateNoP "Steady-state initialization, except for pressure",steadyStateNoT "Steady-state initialization, except for temperature/enthalpy",noInit "No initialization");
    type Modelon_ThermoFluid_Choices_FrictionDistribution = enumeration(VolFric "Volume - ... - Friction",FricVol "Friction - ... - Volume",FricFric "Friction - ... - Friction",VolVol "Volume - ... - Volume");
    type Modelon_Types_ThermoStates = enumeration(ph_States "use pressure and specific enthalpy as states",pdh_States "use pressure, density and specific enthalpy as states");
    type Modelon_ThermoFluid_Choices_ChannelThermalOpt = enumeration(Q_flow "Heat flow rate, Q_flow0",T_out "Outlet temperature, T_out0");
    type Modelon_ThermoFluid_Choices_StaticTotalConv = enumeration(None "None (static and total are identical)",ConstantKappa "Assume constant isentropic exponent",Rigorous "Fully rigorous conversion between static and total");
    type AssertionLevel = enumeration(error,warning);
    type FuelCell_Sensors_Types_SensorType = enumeration(Composition "Composition",Flow "Flow");
    type Modelon_ThermoFluid_Choices_RealPressureUnit = enumeration(Pa "Pa",hPa "hPa",kPa "kPa",MPa "MPa",mbar "mbar",bar "bar");
    parameter Real fmi_tolerance = 1e-06 "CS FMU built-in solver tolerance" annotation(Dialog(tab = "FMI parameters"),__Modelon(internal(propagated_parameter = "tolerance")));
    parameter Modelica.Units.SI.Time fmi_step_size = 0.0 "CS FMU built-in solver step length and the interval at which data will be interchanged. Default 0.0 means the step length will be calculated automatically based on start and stop times of the outer FMU" annotation(Dialog(tab = "FMI parameters"),__Modelon(internal(propagated_parameter = "step_size")));
protected
    parameter Modelica.Units.SI.Time fmi_start_time = 0.0 "CS FMU start time which will be automatically overwritten when compiled with Optimica Compiler Toolkit" annotation(Dialog(tab = "FMI parameters"),__Modelon(internal(propagated_parameter = "start_time")));
    parameter Modelica.Units.SI.Time fmi_stop_time = 1.0 "CS FMU stop time which will be automatically overwritten when compiled with Optimica Compiler Toolkit" annotation(Dialog(tab = "FMI parameters"),__Modelon(internal(propagated_parameter = "stop_time")));
    parameter Boolean fmi_true_token(fixed = false) "Internal parameter";
    Boolean bool_variables[197] "Internal variable";
    Real real_variables[5981] "Internal variable";
    String string_variables[17] "Internal variable";
    Integer int_variables[138] "Internal variable";
    parameter Boolean bool_parameters[26](each fixed = false) "Internal parameter";
    parameter Real real_parameters[867](each fixed = false) "Internal parameter";
    parameter String string_parameters[2] = fmi2GetStringCalculatedParameters(obj,fmi_true_token) "Internal parameter";
    parameter Integer int_parameters[12](each fixed = false) "Internal parameter";
    class FmuWrapper
        extends ExternalObject;
        impure function constructor
            input String ext_lib_path;
            constant String instance_name = "pemfcmodel2_coolstack_variablepressure_humidified_pid5_fmuebd73e8fe838e8f8733933250a2054f8";
            constant String identifier = "PEMFCModel2_CoolStack_variablepressure_humidified_PID5_fmu";
            constant String GUID = "ebd73e8fe838e8f8733933250a2054f8";
            output FmuWrapper obj;
            external "C" obj = initialize_wrapper_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(instance_name,identifier,ext_lib_path,GUID) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
        end constructor;
        impure function destructor
            input FmuWrapper obj;
            external "C" free_wrapper(obj) annotation(Include = "#include \"fmu_wrapper.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
        end destructor;
    end FmuWrapper;
    impure function fmi2GetBooleanVariables
        input FmuWrapper fmu_wrapper;
        output Boolean output_values[197];
        external "C" fmi2_get_boolean_variables_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,197) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetBooleanVariables;
    impure function fmi2GetIntegerVariables
        input FmuWrapper fmu_wrapper;
        output Integer output_values[138];
        external "C" fmi2_get_integer_variables_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,138) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetIntegerVariables;
    impure function fmi2GetRealVariables
        input FmuWrapper fmu_wrapper;
        output Real output_values[5981];
        external "C" fmi2_get_real_variables_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,5981) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetRealVariables;
    impure function fmi2GetStringVariables
        input FmuWrapper fmu_wrapper;
        output String output_values[17];
        external "C" fmi2_get_string_variables_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,17) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetStringVariables;
    impure function fmi2GetBooleanCalculatedParameters
        input FmuWrapper fmu_wrapper;
        output Boolean output_values[26];
        external "C" fmi2_get_boolean_cparameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,26) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetBooleanCalculatedParameters;
    impure function fmi2GetIntegerCalculatedParameters
        input FmuWrapper fmu_wrapper;
        output Integer output_values[12];
        external "C" fmi2_get_integer_cparameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,12) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetIntegerCalculatedParameters;
    impure function fmi2GetRealCalculatedParameters
        input FmuWrapper fmu_wrapper;
        output Real output_values[867];
        external "C" fmi2_get_real_cparameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,867) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetRealCalculatedParameters;
    impure function fmi2GetStringCalculatedParameters
        input FmuWrapper fmu_wrapper;
        input Boolean dummy;
        output String output_values[2];
        external "C" fmi2_get_string_cparameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,output_values,2) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2GetStringCalculatedParameters;
    impure function fmi2SetBooleanInputs
        input FmuWrapper fmu_wrapper;
        input Boolean input_values[:];
        external "C" fmi2_set_boolean_inputs_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetBooleanInputs;
    impure function fmi2SetIntegerInputs
        input FmuWrapper fmu_wrapper;
        input Integer input_values[:];
        external "C" fmi2_set_integer_inputs_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetIntegerInputs;
    impure function fmi2SetRealInputs
        input FmuWrapper fmu_wrapper;
        input Real input_values[:];
        external "C" fmi2_set_real_inputs_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetRealInputs;
    impure function fmi2SetStringInputs
        input FmuWrapper fmu_wrapper;
        input String input_values[:];
        external "C" fmi2_set_string_inputs_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetStringInputs;
    impure function fmi2SetBooleanParameters
        input FmuWrapper fmu_wrapper;
        input Boolean input_values[:];
        external "C" fmi2_set_boolean_parameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetBooleanParameters;
    impure function fmi2SetIntegerParameters
        input FmuWrapper fmu_wrapper;
        input Integer input_values[:];
        external "C" fmi2_set_integer_parameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetIntegerParameters;
    impure function fmi2SetRealParameters
        input FmuWrapper fmu_wrapper;
        input Real input_values[:];
        external "C" fmi2_set_real_parameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetRealParameters;
    impure function fmi2SetStringParameters
        input FmuWrapper fmu_wrapper;
        input String input_values[:];
        external "C" fmi2_set_string_parameters_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetStringParameters;
    impure function fmi2SetupExperiment
        input FmuWrapper fmu_wrapper;
        input Boolean tolerance_defined = true;
        input Real tolerance = 1e-6;
        input Real start_time = 0.0;
        input Boolean stop_time_defined = false;
        input Real stop_time = 1.0;
        external "C" fmi2_setup_experiment_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,tolerance_defined,tolerance,start_time,stop_time_defined,stop_time) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetupExperiment;
    impure function fmi2EnterInitializationMode
        input FmuWrapper fmu_wrapper;
        external "C" fmi2_enter_initialization_mode_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2EnterInitializationMode;
    impure function fmi2ExitInitializationMode
        input FmuWrapper fmu_wrapper;
        external "C" fmi2_exit_initialization_mode_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2ExitInitializationMode;
    impure function fmi2DoStep
        input FmuWrapper fmu_wrapper;
        input Real current_time;
        input Real step_size;
        input Boolean no_prior_fmu_state;
        external "C" fmi2_do_step_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,current_time,step_size,no_prior_fmu_state) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2DoStep;
    impure function fmi2SetRealInputDerivatives
        input FmuWrapper fmu_wrapper;
        input Integer value_refs[:];
        input Integer order[size(value_refs,1)];
        input Real input_values[size(value_refs,1)];
        external "C" fmi2_set_real_input_der_fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e(fmu_wrapper,value_refs,size(value_refs,1),order,input_values) annotation(Include = "#include \"fmumodelica_CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.h\"",IncludeDirectory = "modelica://Aging/Resources/Include",Library = "fmu_wrapper",LibraryDirectory = "modelica://Aging/Resources/fmus/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e/binaries");
    end fmi2SetRealInputDerivatives;
initial algorithm
    fmi2SetBooleanParameters(obj,{coolStack.subStack.cathode_channel.channel.friction[1].useFixedDensity,flow_rate_cath_variation.verboseRead,p_cath_variation.verboseRead,coolStack.subStack.cathode_channel.channel.friction[4].useFixedDensity,coolStack.positiveFlow_cooling,coolStack.subStack.anode_channel.channel.friction[3].outletInstance,coolStack.subStack.cathode_channel.channel.friction[5].outletInstance,coolStack.coolingPipe.volume[5].enforceStates,coolStack.subStack.cathode_channel.includeStaticHead,dp_an_variation.verboseRead,V_cell_exp.verboseRead,coolStack.subStack.anode_channel.channel.friction[5].outletInstance,coolStack.reaction_occurrence_an,display_phTmdot_an_out.displayUnits,coolStack.subStack.cathode_channel.channel.friction[3].useFixedDensity,display_phTmdot_w_out.displayUnits,flowCathode.massFlowBoundary.enable_p_iv,p_water_variation.verboseRead,display_phTmdot_w_in.displayUnits,coolStack.subStack.cathode_channel.channel.friction[1].outletInstance,coolStack.coolingPipe.volume[4].enforceStates,coolStack.subStack.cathode_channel.channel.friction[2].useFixedDensity,dp_cath_variation.verboseRead,coolStack.subStack.anode_channel.channel.friction[1].useFixedDensity,coolStack.coolingPipe.volume[1].thermalDynamics,coolStack.subStack.cathode_channel.channel.friction[5].useFixedDensity,coolStack.subStack.anode_channel.channel.friction[4].useFixedDensity,coolStack.subStack.cathode_channel.channel.friction[3].outletInstance,current_variation.verboseRead,coolStack.coolingPipe.volume[5].thermalDynamics,coolStack.from_dp_anode,coolStack.coolingPipe.friction.use_yd0,coolStack.subStack.anode_channel.includeStaticHead,flow_rate_an_variation.verboseRead,flowAnode.massFlowBoundary.enable_p_iv,display_phTmdot_cath_in.displayUnits,coolStack.coolingPipe.volume[3].thermalDynamics,coolStack.subStack.anode_channel.channel.friction[4].outletInstance,sinkP.pressureBoundary.enable_p_res,coolStack.subStack.anode_channel.channel.friction[2].outletInstance,coolStack.subStack.anode_channel.channel.friction[5].useFixedDensity,sourceW.massFlowBoundary.enable_p_iv,sinkAnode.pressureBoundary.enable_p_res,coolStack.subStack.cathode_channel.channel.friction[4].outletInstance,coolStack.coolingPipe.volume[3].enforceStates,coolStack.subStack.anode_channel.channel.friction[2].useFixedDensity,display_phTmdot_an_in.displayUnits,coolStack.coolingPipe.volume[4].thermalDynamics,coolStack.coolingPipe.volume[2].thermalDynamics,display_phTmdot_cath_out.displayUnits,sinkCathode.pressureBoundary.enable_p_res,coolStack.from_dp_cathode,coolStack.coolingPipe.volume[2].enforceStates,coolStack.coolingPipe.volume[1].enforceStates,p_an_variation.verboseRead,coolStack.subStack.anode_channel.channel.friction[1].outletInstance,coolStack.subStack.anode_channel.channel.friction[3].useFixedDensity,coolStack.coolingPipe.dynamicStabilizerRapidity_twoPhaseFraction,coolStack.subStack.cathode_channel.channel.friction[2].outletInstance,coolStack.reaction_occurrence_cath});
    fmi2SetIntegerParameters(obj,{display_P.precision,display_V.precision,display_I.precision,dp_an_variation.columns[1],display_T.precision,p_water_variation.columns[1],p_an_variation.columns[1],display_j.precision,flow_rate_an_variation.columns[1],V_cell.significantDigits,current_variation.columns[1],display_Q.precision,relative_error.significantDigits,flow_rate_cath_variation.columns[1],coolStack.n_cell,dp_cath_variation.columns[1],V_cell_exp.columns[1],p_cath_variation.columns[1]});
    fmi2SetRealParameters(obj,{coolStack.subStack.cathode_channel.X_weight,current_variation.table[7,1],dp_an_variation.table[5,2],coolStack.subStack.anode_channel.channel.friction[5].dpFraction0,V_cell_exp.table[6,2],current_variation.table[11,1],p_water_variation.table[10,1],p_water_variation.table[14,1],dp_cath_variation.table[3,2],flowAnode.m_flow,p_cath_out.k1,coolStack.subStack.anode_channel.channel.friction[2].flowFraction0,dp_cath_variation.table[4,2],V_cell_exp.table[16,1],p_water_variation.table[10,2],V_cell_exp.table[11,1],p_water_variation.table[15,2],coolStack.subStack.dp0_prox,current_variation.table[7,2],p_cath_variation.table[16,1],coolStack.coolingPipe.Q_flow0,dp_cath_variation.table[13,1],coolStack.mflow_smooth,coolStack.subStack.cathode_channel.channel.friction[1].dpFraction0,V_cell_exp.table[4,1],coolStack.CF_CoolingHeatTransfer,dp_an_variation.table[8,2],sinkCathode.X[5],coolStack.subStack.cathode_channel.channel.g,dp_an_variation.table[11,2],p_cath_variation.startTime,p_an_variation.table[15,2],ramp_m_flow_water.duration,p_cath_start,flow_rate_an_variation.table[4,1],coolStack.h_start_out_cathode,m_flow_water_nom,V_cell_exp.table[2,1],p_an_variation.table[14,2],V_cell_exp.table[3,1],flowAnode.V_flow,p_cath_variation.offset[1],V_cell_exp.table[7,1],sinkCathode.p,p_an_variation.startTime,p_an_variation.table[14,1],ramp_m_flow_water.startTime,sinkAnode.X[2],coolStack.coolingPipe.A_heat_max,flow_rate_cath_variation.table[6,2],flowCathode.m_flow,coolStack.CF_AnodeSidePressureLoss,dp_an_variation.table[8,1],dp_cath_variation.table[12,1],V_cell_exp.table[2,2],current_variation.table[8,2],rho_an_nom,dp_cath_variation.table[8,1],coolStack.subStack.cathode_channel.channel.reaction.Zx_nominal,V_flow_cath,coolStack.E0_ref,dp_an_variation.table[1,1],p_water_variation.table[1,1],flow_rate_an_variation.table[1,1],dp_an_variation.table[7,2],p_water_variation.table[14,2],dp_cath_variation.table[6,1],flow_rate_an_variation.table[6,2],p_water_variation.table[17,2],p_an_variation.table[6,1],coolStack.coolingPipe.cmax_twoPhaseFraction,coolStack.alpha,p_water_variation.table[17,1],coolStack.coolingPipe.twoPhaseFraction_start[3],coolStack.subStack.anode_channel.height,T_dew_an,V_cell_exp.table[10,2],current_variation.table[13,2],coolStack.subStack.anode_channel.channel.reaction.Zx_nominal,p_an_variation.table[3,2],p_water_start,coolStack.coolingPipe.twoPhaseFraction_start[5],current_variation.table[6,2],coolStack.coolingPipe.volume[5].V_tot_start,coolStack.subStack.cathode_channel.channel.friction[5].flowFraction0,flow_rate_an_variation.table[2,1],coolStack.coolingPipe.volume[4].stepSize,flow_rate_cath_variation.table[5,1],p_an_variation.table[10,2],p_an_variation.table[2,1],flow_rate_cath_variation.table[5,2],p_an_variation.table[9,1],dp_an_variation.table[16,1],dp_an_variation.table[10,2],flow_rate_cath_variation.table[8,1],current_variation.table[16,2],coolStack.L_cooling,p_cath_variation.table[5,1],coolStack.subStack.cell.ohmicLoss.z,dp_an_variation.table[7,1],coolStack.coolingPipe.volume[5].stepSize,V_cell_exp.table[9,2],coolStack.subStack.anode_channel.channel.friction[4].flowFraction0,p_cath_variation.table[2,2],coolStack.coolingPipe.volume[1].stepSize,p_cath_variation.table[10,2],coolStack.coolingPipe.A_heat_min,coolStack.coolingPipe.twoPhaseFraction_start[4],p_water_variation.startTime,dp_an_variation.table[9,2],current_variation.table[8,1],dp_cath_nom,coolStack.A_cell,current_variation.table[3,1],V_cell_exp.table[14,1],coolStack.L_anode,current_variation.table[4,1],coolStack.n_channels_cooling,dp_cath_variation.table[14,2],dp_an_nom,current_variation.table[15,2],p_water,coolStack.coolingPipe.L_min,dp_an_variation.table[14,1],p_an_variation.table[17,1],dp_an_variation.table[16,2],p_an_variation.table[6,2],p_water_variation.table[3,1],dp_cath_variation.table[2,2],y_dry_an[1],m_flow_an_nom,p_an_variation.table[7,1],V_cell_exp.table[7,2],p_cath_variation.table[4,2],dp_an_variation.table[12,1],sinkAnode.X[1],V_cell_exp.table[12,1],coolStack.h_start_in_anode,current_variation.table[9,2],sourceW.V_flow,coolStack.length_cell,flow_rate_cath_variation.table[7,2],dp_cath_variation.table[12,2],coolStack.subStack.anode_channel.channel.friction[5].flowFraction0,p_an_variation.table[5,1],p_water_variation.table[7,1],dp_cath_variation.table[16,1],dp_cath_variation.table[17,1],p_an_variation.table[16,1],dp_an_variation.table[14,2],p_water_in_nom,p_water_variation.table[4,1],p_an_variation.offset[1],coolStack.h_start_in_cathode,coolStack.subStack.anode_channel.channel.friction[3].dpFraction0,p_cath_variation.table[3,1],V_cell_exp.table[15,2],p_cath_variation.table[1,1],coolStack.subStack.cathode_channel.channel.friction[2].reference_d,V_cell_exp.table[10,1],flow_rate_an_variation.table[1,2],p_cath_variation.table[12,1],dp_cath_variation.table[5,1],p_an_variation.table[12,1],coolStack.subStack.cathode_channel.channel.friction[1].reference_d,p_water_variation.table[12,1],dp_cath_variation.table[1,2],flow_rate_cath_variation.table[2,2],current_variation.table[10,1],flow_rate_cath_variation.table[2,1],p_cath_variation.table[13,1],coolStack.coolingPipe.friction.yd0,sourceW.massFlowBoundary.p_start,coolStack.coolingPipe.L_max,coolStack.subStack.cathode_channel.channel.reaction.CF_conversion,m_flow_cath_nom,V_cell_exp.table[11,2],coolStack.subStack.cell.CF_0_waterContent,sinkAnode.pressureBoundary.Tc_port_state,p_water_variation.table[1,2],dp_an_variation.table[15,2],p_cath_variation.table[2,1],current_variation.offset[1],flow_rate_an_variation.table[6,1],sourceW.X[1],V_cell_exp.table[16,2],dp_an_variation.table[13,1],dp_an_variation.table[4,1],p_an_out.k2,coolStack.c_stack,p_an_variation.table[1,2],V_cell_exp.table[5,1],p_cath_variation.table[11,2],p_water_variation.table[16,1],flowAnode.h,coolStack.dp_smooth_cooling,y_dry_an[2],flow_rate_cath_variation.offset[1],coolStack.CF_CoolingPressureLoss,p_water_variation.table[8,2],p_water_variation.table[11,2],p_cath_variation.table[4,1],p_cath_variation.table[17,2],y_dry_cath[4],flow_rate_cath_variation.table[3,1],dp_an_variation.table[5,1],dp_an_variation.table[11,1],coolStack.coolingPipe.twoPhaseFraction_start[1],p_an,p_an_variation.table[11,1],flow_rate_cath_variation.table[1,2],flow_rate_cath_variation.table[6,1],coolStack.subStack.d0_prox,p_an_variation.table[7,2],coolStack.n_channels_anode,p_water_variation.table[9,2],coolStack.subStack.anode_channel.channel.friction[2].dpFraction0,coolStack.subStack.cathode_channel.channel.reaction.epsZ,p_water_variation.table[9,1],sinkCathode.pressureBoundary.Tc_port_state,dp_an_variation.table[4,2],flow_rate_cath_variation.table[3,2],coolStack.subStack.cell.CF_0_eod,p_an_variation.table[8,2],coolStack.subStack.anode_channel.channel.friction[5].reference_d,p_cath_variation.table[10,1],V_cell_exp.table[17,1],p_cath_variation.table[13,2],T_dew_cath,p_cath_out.k2,rho_cath_nom,dp_cath_variation.table[14,1],current_variation.table[15,1],coolStack.subStack.cathode_channel.channel.friction[5].dpFraction0,coolStack.coolingPipe.L_nom,sinkCathode.X[3],dp_cath_variation.table[9,1],current_variation.table[9,1],I,p_water_variation.table[5,2],current_variation.table[12,1],coolStack.coolingPipe.volume[3].stepSize,coolStack.subStack.anode_channel.channel.g,dp_cath_variation.table[10,2],flow_rate_an_variation.offset[1],p_cath_variation.table[1,2],coolStack.subStack.cathode_channel.height,coolStack.coolingPipe.volume[3].V_tot_start,y_dry_an[3],coolStack.M_stack,coolStack.D_cooling,V_cell_exp.table[12,2],current_variation.table[16,1],dp_cath_variation.table[10,1],p_cath_variation.table[6,2],p_cath_variation.table[15,2],p_cath_variation.table[16,2],p_cath_variation.table[9,1],flowCathode.V_flow,p_cath_variation.table[14,1],sinkAnode.X[4],coolStack.subStack.cathode_channel.channel.friction[4].reference_d,y_dry_cath[1],current_variation.table[1,2],coolStack.coolingPipe.volume[1].V_tot_start,coolStack.CF_CathodeSideHeatTransfer,coolStack.coolingPipe.friction.n_exp,coolStack.h_start_out_cooling,coolStack.subStack.anode_channel.channel.friction[1].reference_d,p_an_variation.table[11,2],V_cell_exp.table[4,2],V_cell_exp.table[6,1],V_flow_water_max,sinkCathode.X[2],coolStack.subStack.anode_channel.channel.friction[1].dpFraction0,flow_rate_cath_variation.startTime,flow_rate_an_variation.table[2,2],coolStack.coolingPipe.volume[4].V_tot_start,p_cath_variation.table[12,2],p_an_variation.table[10,1],current_variation.table[3,2],coolStack.coolingPipe.Delta_max_twoPhaseFraction,flow_rate_an_variation.table[7,2],sinkCathode.X[4],p_an_variation.table[9,2],p_cath_variation.table[15,1],p_water_variation.table[13,1],dp_an_variation.table[12,2],V_cell_exp.table[15,1],dp_cath_variation.startTime,coolStack.subStack.cathode_channel.channel.friction[2].dpFraction0,p_an_variation.table[4,2],flow_rate_cath_variation.table[7,1],flow_rate_cath_variation.table[4,1],p_an_variation.table[13,1],p_water_variation.table[2,1],V_cell_exp.table[8,1],coolStack.A_crosssection_cell,sinkAnode.X[3],sinkCathode.X[1],V_cell_exp.table[13,2],dp_an_variation.table[6,1],dp_cath_variation.table[7,2],dp_water_nom,coolStack.subStack.cathode_channel.channel.friction[1].flowFraction0,error.k2,dp_cath_variation.table[15,1],p_water_variation.table[6,2],sinkP.pressureBoundary.Tc_port_state,coolStack.X_start_cooling[1],V_cell_exp.table[9,1],current_variation.table[6,1],coolStack.subStack.cathode_channel.channel.friction[4].flowFraction0,current_variation.table[13,1],V_flow_an,V_cell_exp.table[8,2],p_cath_variation.table[11,1],flow_rate_an_variation.table[3,1],dp_an_variation.table[15,1],flow_rate_cath_variation.table[8,2],flowAnode.massFlowBoundary.p_start,p_an_variation.table[5,2],p_water_out.k2,coolStack.subStack.cathode_channel.channel.reaction.scale,dp_cath_variation.table[6,2],p_an_variation.table[15,1],coolStack.CF_CathodeSidePressureLoss,dp_cath_variation.table[2,1],coolStack.subStack.anode_channel.channel.friction[4].reference_d,flow_rate_an_variation.table[5,2],V_cell_exp.table[13,1],dp_cath_variation.table[1,1],flow_rate_cath_variation.table[4,2],coolStack.subStack.anode_channel.channel.friction[4].dpFraction0,flowCathode.massFlowBoundary.p_start,sinkP.X[1],current_variation.table[10,2],p_an_variation.table[1,1],p_water_variation.offset[1],flow_rate_an_variation.table[5,1],flow_rate_an_variation.startTime,V_cell_exp.offset[1],flow_rate_an_variation.table[7,1],coolStack.D_anode,current_variation.table[4,2],coolStack.coolingPipe.Delta_min_twoPhaseFraction,p_an_variation.table[3,1],p_water_variation.table[15,1],dp_cath_variation.table[9,2],coolStack.coolingPipe.A_heat_nom,coolStack.subStack.cathode_channel.channel.friction[2].flowFraction0,dp_an_variation.table[17,2],sinkP.h,dp_an_variation.startTime,coolStack.subStack.m_flow_nom_prox,dp_an_variation.table[9,1],coolStack.subStack.anode_channel.channel.reaction.Tscale,coolStack.coolingPipe.flowFraction0,current_variation.table[17,2],p_water_variation.table[12,2],p_cath_variation.table[7,1],p_cath_variation.table[14,2],dp_an_variation.table[1,2],p_cath_variation.table[17,1],V_cell_exp.table[1,1],p_cath_variation.table[9,2],coolStack.height_cooling,V_cell_exp.startTime,coolStack.subStack.anode_channel.channel.reaction.epsZ,dp_an_variation.table[3,1],dp_an_variation.table[10,1],sinkP.p,coolStack.lambda_cell,coolStack.subStack.anode_channel.channel.reaction.scale,current_variation.table[5,1],current_variation.table[17,1],p_water_variation.table[13,2],p_water_variation.table[2,2],dp_cath_variation.offset[1],p_cath,dp_an_variation.table[13,2],coolStack.subStack.cathode_channel.channel.friction[3].dpFraction0,dp_cath_variation.table[11,1],dp_cath_variation.table[8,2],coolStack.subStack.anode_channel.channel.reaction.CF_conversion,coolStack.subStack.cell.CF_0_gasDiffusion[2],flow_rate_cath_variation.table[1,1],coolStack.coolingPipe.volume[2].V_tot_start,coolStack.coolingPipe.htcoeff.pcrit,dp_an_variation.table[2,2],V_cell_exp.table[3,2],p_water_variation.table[5,1],coolStack.subStack.anode_channel.channel.friction[2].reference_d,coolStack.subStack.cathode_channel.channel.friction[4].dpFraction0,p_an_variation.table[4,1],coolStack.coolingPipe.pos_rel_out,dp_an_variation.table[2,1],y_dry_cath[2],V_flow_water_min,p_water_variation.table[3,2],dp_cath_variation.table[11,2],sinkAnode.h,p_water_variation.table[11,1],y_dry_cath[5],coolStack.EW_m,current_variation.table[2,1],error.k1,coolStack.mflow_smooth_cooling,p_an_out.k1,V_cell_exp.table[5,2],dp_cath_variation.table[16,2],T_cath_in,coolStack.rho_dry_m,p_water_variation.table[6,1],V_cell_exp.table[17,2],p_an_variation.table[2,2],p_water_out.k1,dp_an_variation.offset[1],dp_cath_variation.table[4,1],dp_an_variation.table[17,1],dp_cath_variation.table[15,2],p_an_variation.table[16,2],y_dry_cath[3],coolStack.dp_smooth,coolStack.h_start_out_anode,current_variation.startTime,p_an_variation.table[17,2],current_variation.table[11,2],sinkCathode.h,coolStack.subStack.cell.CF_0_gasDiffusion[1],p_water_variation.table[8,1],dp_cath_variation.table[7,1],p_cath_variation.table[3,2],dp_cath_variation.table[17,2],coolStack.coolingPipe.T_out0,current_variation.table[14,2],sinkAnode.p,coolStack.subStack.anode_channel.channel.friction[3].reference_d,current_variation.table[1,1],dp_an_variation.table[6,2],T_water_in,coolStack.subStack.cell.CF_0_waterDiffusion,coolStack.subStack.anode_channel.channel.friction[1].flowFraction0,p_cath_variation.table[8,1],V_cell_exp.table[1,2],coolStack.subStack.cathode_channel.channel.friction[5].reference_d,current_variation.table[2,2],dp_cath_variation.table[13,2],p_water_variation.table[16,2],coolStack.CF_AnodeSideHeatTransfer,coolStack.subStack.cathode_channel.channel.reaction.Tscale,current_variation.table[5,2],V_flow_water,coolStack.coolingPipe.twoPhaseFraction_start[2],p_cath_variation.table[7,2],coolStack.coolingPipe.dp0,coolStack.h_start_in_cooling,dp_cath_variation.table[3,1],coolStack.subStack.cathode_channel.channel.friction[3].reference_d,coolStack.coolingPipe.c_pseudo_twoPhaseFraction_const,coolStack.subStack.anode_channel.channel.friction[3].flowFraction0,coolStack.subStack.anode_channel.X_weight,flow_rate_an_variation.table[8,1],current_variation.table[14,1],coolStack.subStack.cathode_channel.channel.friction[3].flowFraction0,T_an_in,p_cath_variation.table[5,2],coolStack.coolingPipe.pos_rel_in,p_cath_variation.table[6,1],p_water_variation.table[4,2],coolStack.coolingPipe.cmin_twoPhaseFraction,p_an_variation.table[13,2],p_an_start,flow_rate_an_variation.table[8,2],sourceW.h,V_cell_exp.table[14,2],coolStack.coolingPipe.volume[2].stepSize,y_dry_an[4],dp_cath_variation.table[5,2],flow_rate_an_variation.table[3,2],p_cath_variation.table[8,2],p_water_variation.table[7,2],coolStack.z,flowCathode.h,current_variation.table[12,2],p_an_variation.table[12,2],flow_rate_an_variation.table[4,2],p_an_variation.table[8,1],sourceW.m_flow,dp_an_variation.table[3,2]});
    fmi2SetStringParameters(obj,{coolStack.subStack.anode_channel.channel.volName,V_cell_exp.tableName,dp_cath_variation.fileName,dp_an_variation.tableName,V_cell_exp.fileName,p_an_variation.tableName,flow_rate_cath_variation.fileName,dp_an_variation.fileName,p_water_variation.tableName,p_water_variation.fileName,flow_rate_an_variation.fileName,p_an_variation.fileName,dp_cath_variation.tableName,flow_rate_cath_variation.tableName,p_cath_variation.fileName,coolStack.subStack.cathode_channel.channel.volName,current_variation.fileName,flow_rate_an_variation.tableName,current_variation.tableName,p_cath_variation.tableName});
    fmi2SetRealInputs(obj,{j_loss,m_conc,j_0,n_conc,c1});
    fmi_true_token := true;
    fmi2SetupExperiment(obj,true,fmi_tolerance,fmi_start_time,false,fmi_stop_time);
    fmi2EnterInitializationMode(obj);
    fmi2ExitInitializationMode(obj);
    bool_parameters := fmi2GetBooleanCalculatedParameters(obj);
    int_parameters := fmi2GetIntegerCalculatedParameters(obj);
    real_parameters := fmi2GetRealCalculatedParameters(obj);
algorithm
    .assert(fmi_step_size > 0.0,"Invalid step size, must be larger than 0.0");
    when .sample(fmi_start_time,fmi_step_size) then
        fmi2SetRealInputs(obj,{j_loss,m_conc,j_0,n_conc,c1});
        if time >= fmi_start_time + fmi_step_size then
            fmi2DoStep(obj,time - fmi_step_size,fmi_step_size,fmi_true_token);
        end if;
        bool_variables := fmi2GetBooleanVariables(obj);
        int_variables := fmi2GetIntegerVariables(obj);
        real_variables := fmi2GetRealVariables(obj);
        string_variables := fmi2GetStringVariables(obj);
    end when;
    when time > fmi_stop_time then
        .assert(false,"Continuing simulation from time " + String(time) + " using step size " + String(fmi_step_size) + ". Please verify that this is suitable.",AssertionLevel.warning);
    end when;
initial equation
equation
    coolStack.subStack.anode_channel.channel.rMX[3,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[5,4] = -0.0;
    coolStack.subStack.anode_channel.channel.rMX[4,3] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[2,2] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[4,4] = 0.0;
    coolStack.subStack.cell.port_cath[1].mX_flow[4] = -0.0;
    coolStack.subStack.cathode_channel.port[2].mX_flow[1] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[3,3] = -0.0;
    coolStack.subStack.cell.port_an[1].mX_flow[4] = -0.0;
    coolStack.subStack.cell.mX_flow_an_reac[1,2] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[4,2] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[3,1] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[2,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[2,2] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[1,4] = -0.0;
    coolStack.subStack.anode_channel.port[1].mX_flow[3] = 0.0;
    coolStack.subStack.cell.port_an[5].mX_flow[4] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[1,1] = 0.0;
    coolStack.subStack.anode_channel.port[3].mX_flow[4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[1,3] = -0.0;
    coolStack.subStack.cathode_channel.port[1].mX_flow[4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[1,4] = 0.0;
    coolStack.subStack.cathode_channel.port[3].mX_flow[2] = 0.0;
    coolStack.subStack.anode_channel.port[5].mX_flow[4] = 0.0;
    coolStack.subStack.cathode_channel.port[2].mX_flow[4] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[1,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[2,3] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[3,1] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[1,1] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[4,5] = 0.0;
    coolStack.subStack.cathode_channel.port[4].mX_flow[4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[1,1] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[2,3] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[1,4] = 0.0;
    coolStack.subStack.cell.port_an[2].mX_flow[3] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[5,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[4,3] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[4,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[2,1] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[1,2] = 0.0;
    coolStack.subStack.cell.port_cath[3].mX_flow[1] = -0.0;
    coolStack.subStack.cell.mX_flow_an_transport[5,1] = 0.0;
    coolStack.subStack.cell.port_an[2].mX_flow[4] = -0.0;
    coolStack.subStack.cell.port_cath[5].mX_flow[2] = -0.0;
    coolStack.subStack.cell.mX_flow_an_reac[5,4] = 0.0;
    coolStack.subStack.cathode_channel.port[4].mX_flow[2] = 0.0;
    coolStack.subStack.cell.port_cath[1].mX_flow[1] = -0.0;
    coolStack.subStack.cell.mX_flow_an_transport[3,1] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[5,3] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[5,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[4,4] = 0.0;
    coolStack.coolingPipe.dp_internal[1] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[5,4] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[3,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[4,4] = -0.0;
    coolStack.subStack.cell.port_an[5].mX_flow[3] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[5,1] = 0.0;
    coolStack.subStack.cell.port_cath[4].mX_flow[2] = -0.0;
    coolStack.subStack.cell.mX_flow_an_reac[1,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[3,2] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[5,1] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[5,3] = -0.0;
    coolStack.subStack.cathode_channel.port[3].mX_flow[1] = 0.0;
    coolStack.subStack.cell.port_cath[2].mX_flow[2] = -0.0;
    coolStack.subStack.cathode_channel.channel.rMX[2,4] = 0.0;
    coolStack.subStack.cell.port_cath[4].mX_flow[4] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[1,2] = 0.0;
    coolStack.subStack.anode_channel.port[4].mX_flow[4] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[4,1] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[2,1] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[5,5] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[4,2] = 0.0;
    coolStack.subStack.anode_channel.channel.dp[1] = 0.0;
    coolStack.subStack.cell.port_cath[5].mX_flow[4] = -0.0;
    coolStack.subStack.cathode_channel.port[4].mX_flow[1] = 0.0;
    coolStack.subStack.cathode_channel.port[5].mX_flow[4] = 0.0;
    coolStack.coolingPipe.state[4].X[1] = 1.0;
    coolStack.subStack.cell.mX_flow_an_reac[2,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[1,5] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[3,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[3,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[2,4] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[1,3] = 0.0;
    coolStack.subStack.cell.port_an[1].mX_flow[3] = -0.0;
    coolStack.subStack.cathode_channel.port[5].mX_flow[1] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[2,2] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[4,2] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[4,3] = -0.0;
    coolStack.subStack.cell.mX_flow_an_transport[2,3] = -0.0;
    coolStack.subStack.cell.port_an[4].mX_flow[4] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[5,2] = 0.0;
    coolStack.subStack.cell.port_cath[4].mX_flow[1] = -0.0;
    coolStack.subStack.cell.mX_flow_an_transport[4,1] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[3,2] = 0.0;
    coolStack.subStack.cathode_channel.port[2].mX_flow[2] = 0.0;
    coolStack.subStack.cell.port_cath[3].mX_flow[4] = -0.0;
    coolStack.subStack.anode_channel.port[4].mX_flow[3] = 0.0;
    coolStack.subStack.anode_channel.port[3].mX_flow[3] = 0.0;
    coolStack.subStack.cell.port_an[4].mX_flow[3] = -0.0;
    coolStack.subStack.cell.mX_flow_an_reac[3,3] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[3,2] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[5,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[2,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[4,4] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[4,4] = 0.0;
    coolStack.subStack.cathode_channel.port[1].mX_flow[2] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[2,4] = -0.0;
    coolStack.subStack.cell.port_cath[2].mX_flow[1] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[1,2] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[5,3] = 0.0;
    coolStack.coolingPipe.state[3].X[1] = 1.0;
    coolStack.subStack.anode_channel.port[5].mX_flow[3] = 0.0;
    coolStack.subStack.cell.port_cath[1].mX_flow[2] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[4,1] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[1,4] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[2,2] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[1,1] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[5,2] = 0.0;
    coolStack.subStack.cell.port_an[3].mX_flow[4] = -0.0;
    coolStack.coolingPipe.state[6].X[1] = 1.0;
    coolStack.subStack.cell.mX_flow_cath_transport[2,1] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[2,1] = 0.0;
    coolStack.subStack.cell.mX_flow_an_reac[5,2] = 0.0;
    coolStack.subStack.cell.mX_flow_an_transport[3,4] = -0.0;
    coolStack.subStack.cathode_channel.channel.rMX[3,1] = 0.0;
    coolStack.subStack.cathode_channel.port[5].mX_flow[2] = 0.0;
    coolStack.subStack.cell.port_cath[5].mX_flow[1] = -0.0;
    coolStack.subStack.anode_channel.port[2].mX_flow[3] = 0.0;
    coolStack.subStack.cell.port_an[3].mX_flow[3] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[2,5] = 0.0;
    coolStack.coolingPipe.state[2].X[1] = 1.0;
    coolStack.subStack.cell.port_cath[2].mX_flow[4] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[3,4] = 0.0;
    coolStack.subStack.cell.port_cath[3].mX_flow[2] = -0.0;
    coolStack.subStack.cell.mX_flow_cath_reac[4,2] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[3,3] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[3,5] = 0.0;
    coolStack.subStack.cell.mX_flow_cath_transport[4,1] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[5,2] = 0.0;
    coolStack.subStack.cathode_channel.port[1].mX_flow[1] = 0.0;
    coolStack.subStack.anode_channel.port[2].mX_flow[4] = 0.0;
    coolStack.subStack.anode_channel.channel.rMX[1,3] = 0.0;
    coolStack.subStack.cathode_channel.port[3].mX_flow[4] = 0.0;
    coolStack.subStack.anode_channel.port[1].mX_flow[4] = 0.0;
    coolStack.coolingPipe.state[5].X[1] = 1.0;
    coolStack.subStack.cathode_channel.channel.rMX[3,2] = 0.0;
    coolStack.subStack.cathode_channel.channel.dp[1] = 0.0;
    coolStack.subStack.cathode_channel.channel.rMX[5,1] = 0.0;
    coolStack.subStack.anode_channel.channel.friction[4].from_dp = bool_parameters[1];
    coolStack.subStack.cathode_channel.channel.friction[5].from_dp = bool_parameters[2];
    coolStack.subStack.cathode_channel.channel.friction[3].from_dp = bool_parameters[3];
    coolStack.subStack.cathode_channel.channel.includeStaticHead = bool_parameters[4];
    coolStack.subStack.anode_channel.channel.from_dp = bool_parameters[5];
    coolStack.subStack.cathode_channel.channel.friction[4].from_dp = bool_parameters[6];
    coolStack.subStack.anode_channel.channel.friction[5].from_dp = bool_parameters[7];
    coolStack.subStack.anode_channel.channel.reaction_occurrence = bool_parameters[8];
    coolStack.subStack.reaction_occurrence_an = bool_parameters[9];
    coolStack.subStack.anode_channel.reaction_occurrence = bool_parameters[10];
    coolStack.subStack.anode_channel.channel.friction[1].from_dp = bool_parameters[11];
    coolStack.subStack.cathode_channel.reaction_occurrence = bool_parameters[12];
    coolStack.subStack.anode_channel.channel.friction[3].from_dp = bool_parameters[13];
    coolStack.subStack.anode_channel.channel.friction[2].from_dp = bool_parameters[14];
    coolStack.subStack.reaction_occurrence_cath = bool_parameters[15];
    coolStack.subStack.cathode_channel.channel.friction[2].from_dp = bool_parameters[16];
    coolStack.subStack.cathode_channel.channel.reaction_occurrence = bool_parameters[17];
    coolStack.coolingPipe.friction.positiveFlow = bool_parameters[18];
    coolStack.subStack.cathode_channel.channel.friction[1].from_dp = bool_parameters[19];
    coolStack.subStack.cathode_channel.channel.from_dp = bool_parameters[20];
    coolStack.subStack.anode_channel.from_dp = bool_parameters[21];
    coolStack.subStack.cathode_channel.from_dp = bool_parameters[22];
    coolStack.subStack.from_dp_anode = bool_parameters[23];
    coolStack.subStack.anode_channel.channel.includeStaticHead = bool_parameters[24];
    coolStack.subStack.from_dp_cathode = bool_parameters[25];
    coolStack.coolingPipe.positiveFlow = bool_parameters[26];
    coolStack.subStack.n_cell = int_parameters[1];
    coolStack.subStack.cell.n_cell = int_parameters[2];
    coolStack.subStack.summary.n_cell = int_parameters[3];
    coolStack.subStack.cell.gasDiffusion.n_cell = int_parameters[4];
    coolStack.subStack.cell.concentrationLoss.n_cell = int_parameters[5];
    coolStack.subStack.cell.waterDiffusion.n_cell = int_parameters[6];
    coolStack.summary.n_cell = int_parameters[7];
    coolStack.subStack.cell.waterContent.n_cell = int_parameters[8];
    coolStack.subStack.cell.contaminantsLoss.n_cell = int_parameters[9];
    coolStack.subStack.cell.ohmicLoss.n_cell = int_parameters[10];
    coolStack.subStack.cell.electroOsmoticDrag.n_cell = int_parameters[11];
    coolStack.subStack.cell.activationLoss.n_cell = int_parameters[12];
    coolStack.subStack.cathode_channel.channel.friction[1].d0 = real_parameters[1];
    current_variation.shiftTime = real_parameters[2];
    coolStack.subStack.anode_channel.channel.A[5] = real_parameters[3];
    coolStack.subStack.cathode_channel.channel.friction[4].d0 = real_parameters[4];
    coolStack.coolingPipe.volume[1].Tt_start = real_parameters[5];
    coolStack.subStack.anode_channel.p_start[2] = real_parameters[6];
    coolStack.coolingPipe.L[5] = real_parameters[7];
    coolStack.subStack.cell.electroOsmoticDrag.rho_dry_m = real_parameters[8];
    coolStack.coolingPipe.L_start = real_parameters[9];
    coolStack.subStack.anode_channel.channel.friction[3].A = real_parameters[10];
    multiDisplaySensor4.multiDisplaySensor.portB.X_outflow[1] = real_parameters[11];
    flow_rate_cath_variation.shiftTime = real_parameters[12];
    coolStack.subStack.cathode_channel.channel.mflow_smooth = real_parameters[13];
    coolStack.subStack.cell.E0_ref = real_parameters[14];
    sinkCathode.pressureBoundary.X[2] = real_parameters[15];
    coolStack.m_flow_start_anode = real_parameters[16];
    coolStack.subStack.cathode_channel.p_start_in = real_parameters[17];
    coolStack.subStack.A_heat_anode = real_parameters[18];
    coolStack.subStack.cell.CF_N_gasDiffusion[1,2] = real_parameters[19];
    dp_cath_variation.shiftTime = real_parameters[20];
    coolStack.subStack.anode_channel.channel.friction[2].L = real_parameters[21];
    coolStack.coolingPipe.h_start_in = real_parameters[22];
    coolStack.subStack.anode_channel.T_start_out = real_parameters[23];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].F_user = real_parameters[24];
    coolStack.subStack.cell.waterContent.v_dry = real_parameters[25];
    coolStack.subStack.L_anode = real_parameters[26];
    coolStack.subStack.anode_channel.channel.A[2] = real_parameters[27];
    coolStack.subStack.cell.CF_N_gasDiffusion[1,1] = real_parameters[28];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_start[2] = real_parameters[29];
    coolStack.subStack.cell.CF_N_waterContent[5] = real_parameters[30];
    coolStack.subStack.cell.waterDiffusion.CF_N[4] = real_parameters[31];
    sourceW.massFlowBoundary.h = real_parameters[32];
    coolStack.coolingPipe.A[2] = real_parameters[33];
    coolStack.subStack.h_start_in_anode = real_parameters[34];
    coolStack.coolingPipe.htcoeff.Dhyd[1] = real_parameters[35];
    coolStack.subStack.cell.ohmicLoss.A_cell = real_parameters[36];
    coolStack.coolingPipe.state[7].X[1] = real_parameters[37];
    coolStack.subStack.cathode_channel.channel.friction[1].m_flow0 = real_parameters[38];
    coolStack.coolingPipe.L_internal[4] = real_parameters[39];
    coolStack.coolingPipe.V_internal[4] = real_parameters[40];
    coolStack.subStack.cathode_channel.channel.levels[4] = real_parameters[41];
    coolStack.subStack.anode_channel.A_heat = real_parameters[42];
    coolStack.subStack.anode_channel.channel.htcoeff[4].L = real_parameters[43];
    sourceW.massFlowBoundary.m_flow = real_parameters[44];
    humidification_an.y_dry_in[3] = real_parameters[45];
    coolStack.subStack.anode_channel.T_start[6] = real_parameters[46];
    coolStack.coolingPipe.htcoeff.Dhyd[4] = real_parameters[47];
    coolStack.T_start_anode[1] = real_parameters[48];
    coolStack.subStack.anode_channel.channel.levels[2] = real_parameters[49];
    coolStack.coolingPipe.h_start[4] = real_parameters[50];
    coolStack.p_start_cooling[4] = real_parameters[51];
    coolStack.subStack.anode_channel.channel.p_start[1] = real_parameters[52];
    coolStack.h_start_cooling[6] = real_parameters[53];
    coolStack.subStack.cell.CF_N_waterContent[3] = real_parameters[54];
    coolStack.subStack.h_start_cathode[4] = real_parameters[55];
    coolStack.p_start_anode[3] = real_parameters[56];
    coolStack.subStack.anode_channel.p_start_out = real_parameters[57];
    coolStack.subStack.cell.electroOsmoticDrag.CF_N[1] = real_parameters[58];
    coolStack.subStack.cell.waterContent.CF_N[2] = real_parameters[59];
    coolStack.coolingPipe.A_heat_internal[4] = real_parameters[60];
    coolStack.subStack.T_start_anode[1] = real_parameters[61];
    coolStack.coolingPipe.A_heat[2] = real_parameters[62];
    coolStack.subStack.p_start_cathode[6] = real_parameters[63];
    coolStack.subStack.anode_channel.T_start[3] = real_parameters[64];
    coolStack.subStack.m_flow_start_cathode = real_parameters[65];
    coolStack.p_start_anode[2] = real_parameters[66];
    coolStack.coolingPipe.volume[4].ht_start = real_parameters[67];
    coolStack.coolingPipe.Dhyd[3] = real_parameters[68];
    coolStack.subStack.cell.CF_N_eod[4] = real_parameters[69];
    coolStack.subStack.anode_channel.channel.T_start[5] = real_parameters[70];
    coolStack.coolingPipe.volume[5].U_start = real_parameters[71];
    coolStack.coolingPipe.volume[2].V_tot = real_parameters[72];
    coolStack.subStack.cathode_channel.channel.friction[5].mflow_smooth = real_parameters[73];
    coolStack.h_start_cathode[5] = real_parameters[74];
    coolStack.subStack.anode_channel.channel.htcoeff[2].Dhyd = real_parameters[75];
    coolStack.subStack.cathode_channel.channel.p_start[2] = real_parameters[76];
    coolStack.subStack.cathode_channel.channel.friction[5].F_user = real_parameters[77];
    coolStack.subStack.h_start_anode[4] = real_parameters[78];
    coolStack.coolingPipe.friction.Dhyd[2] = real_parameters[79];
    flowCathode.massFlowBoundary.T = real_parameters[80];
    current_variation.t_minScaled = real_parameters[81];
    coolStack.subStack.cell.electroOsmoticDrag.CF_N[5] = real_parameters[82];
    coolStack.subStack.cathode_channel.channel.T_start[2] = real_parameters[83];
    coolStack.subStack.anode_channel.channel.T_start[4] = real_parameters[84];
    flowAnode.massFlowBoundary.h = real_parameters[85];
    coolStack.subStack.h_start_cathode[3] = real_parameters[86];
    coolStack.subStack.anode_channel.channel.friction[1].n_channels = real_parameters[87];
    coolStack.subStack.anode_channel.CF_HeatTransfer = real_parameters[88];
    coolStack.coolingPipe.h_start[6] = real_parameters[89];
    coolStack.subStack.z = real_parameters[90];
    coolStack.coolingPipe.volume[5].T_start = real_parameters[91];
    coolStack.subStack.cathode_channel.channel.A_heat[5] = real_parameters[92];
    coolStack.subStack.anode_channel.channel.A[1] = real_parameters[93];
    coolStack.coolingPipe.friction.n_channels[5] = real_parameters[94];
    coolStack.subStack.anode_channel.T_start[2] = real_parameters[95];
    coolStack.subStack.V_anode = real_parameters[96];
    coolStack.subStack.cathode_channel.channel.T_start[3] = real_parameters[97];
    coolStack.subStack.cathode_channel.channel.friction[5].dp0 = real_parameters[98];
    multiDisplaySensor1.portA.X_outflow[1] = real_parameters[99];
    coolStack.coolingPipe.p_start[5] = real_parameters[100];
    coolStack.subStack.h_start_anode[5] = real_parameters[101];
    coolStack.subStack.anode_channel.channel.htcoeff[5].F_user = real_parameters[102];
    coolStack.subStack.cathode_channel.channel.h_start[3] = real_parameters[103];
    coolStack.subStack.cell.electroOsmoticDrag.CF_0 = real_parameters[104];
    flow_rate_cath_variation.t_min = real_parameters[105];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].F_user = real_parameters[106];
    flow_rate_an_variation.t_max = real_parameters[107];
    coolStack.subStack.anode_channel.channel.h_start[5] = real_parameters[108];
    coolStack.subStack.cell.waterContent.CF_N[4] = real_parameters[109];
    coolStack.coolingPipe.volume[3].Tt_start = real_parameters[110];
    coolStack.subStack.T_start_anode[4] = real_parameters[111];
    coolStack.subStack.cell.waterDiffusion.A_cell = real_parameters[112];
    coolStack.subStack.anode_channel.channel.levels[3] = real_parameters[113];
    coolStack.subStack.cell.z = real_parameters[114];
    coolStack.subStack.anode_channel.channel.z[1] = real_parameters[115];
    coolStack.subStack.anode_channel.channel.h_start_out = real_parameters[116];
    coolStack.subStack.anode_channel.channel.friction[2].d0 = real_parameters[117];
    coolStack.subStack.anode_channel.channel.friction[5].mflow_smooth = real_parameters[118];
    coolStack.subStack.cathode_channel.channel.friction[3].dp0 = real_parameters[119];
    coolStack.subStack.cell.electroOsmoticDrag.CF_N[2] = real_parameters[120];
    coolStack.subStack.h_start_cathode[5] = real_parameters[121];
    coolStack.T_start_cathode[3] = real_parameters[122];
    coolStack.subStack.anode_channel.channel.htcoeff[1].A = real_parameters[123];
    coolStack.subStack.cathode_channel.channel.friction[4].dp0 = real_parameters[124];
    coolStack.subStack.cell.CF_N_gasDiffusion[3,2] = real_parameters[125];
    coolStack.subStack.cell.waterContent.CF_N[1] = real_parameters[126];
    coolStack.coolingPipe.volume[3].U_start = real_parameters[127];
    coolStack.subStack.anode_channel.T_start[4] = real_parameters[128];
    coolStack.subStack.cell.CF_N_waterDiffusion[1] = real_parameters[129];
    coolStack.subStack.cell.waterDiffusion.CF_N[5] = real_parameters[130];
    coolStack.subStack.anode_channel.C = real_parameters[131];
    coolStack.subStack.cathode_channel.channel.friction[2].mflow_smooth = real_parameters[132];
    coolStack.subStack.anode_channel.channel.n_channels[5] = real_parameters[133];
    coolStack.coolingPipe.friction.Dhyd[5] = real_parameters[134];
    humidification_cath.T_dew = real_parameters[135];
    coolStack.subStack.cell.CF_N_eod[1] = real_parameters[136];
    coolStack.coolingPipe.htcoeff.A[2] = real_parameters[137];
    sourceW.massFlowBoundary.T = real_parameters[138];
    coolStack.coolingPipe.htcoeff.Dhyd[3] = real_parameters[139];
    coolStack.subStack.anode_channel.CF_PressureLoss = real_parameters[140];
    flowCathode.T = real_parameters[141];
    coolStack.coolingPipe.htcoeff.A_heat[3] = real_parameters[142];
    coolStack.coolingPipe.volume[2].X_start[1] = real_parameters[143];
    coolStack.coolingPipe.volume[2].mX_start[1] = real_parameters[144];
    coolStack.subStack.A_cell = real_parameters[145];
    coolStack.coolingPipe.friction.A[4] = real_parameters[146];
    coolStack.coolingPipe.A_heat_set = real_parameters[147];
    coolStack.subStack.cell.rho_dry_m = real_parameters[148];
    dp_cath_variation.t_maxScaled = real_parameters[149];
    coolStack.subStack.cathode_channel.channel.friction[1].dp_smooth = real_parameters[150];
    coolStack.T_start_anode[3] = real_parameters[151];
    coolStack.subStack.anode_channel.channel.n_channels[4] = real_parameters[152];
    coolStack.coolingPipe.volume[2].h_start = real_parameters[153];
    flowCathode.massFlowBoundary.V_flow = real_parameters[154];
    coolStack.coolingPipe.friction.F_user = real_parameters[155];
    coolStack.subStack.cell.waterContent.CF_N[5] = real_parameters[156];
    coolStack.subStack.anode_channel.channel.p_start_out = real_parameters[157];
    coolStack.A_anode = real_parameters[158];
    coolStack.coolingPipe.p_start[4] = real_parameters[159];
    coolStack.h_start_cathode[4] = real_parameters[160];
    coolStack.subStack.anode_channel.channel.V[5] = real_parameters[161];
    coolStack.p_start_anode[5] = real_parameters[162];
    humidification_an.y_dry_in[1] = real_parameters[163];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].F_user = real_parameters[164];
    coolStack.subStack.anode_channel.channel.htcoeff[2].L = real_parameters[165];
    coolStack.coolingPipe.htcoeff.A_heat[4] = real_parameters[166];
    coolStack.coolingPipe.p_start[3] = real_parameters[167];
    coolStack.subStack.anode_channel.channel.A_heat[5] = real_parameters[168];
    coolStack.coolingPipe.L_internal[2] = real_parameters[169];
    coolStack.coolingPipe.h_start[2] = real_parameters[170];
    coolStack.coolingPipe.volume[1].ht_start = real_parameters[171];
    coolStack.subStack.anode_channel.channel.levels[1] = real_parameters[172];
    coolStack.subStack.p_start_anode[6] = real_parameters[173];
    coolStack.subStack.h_start_in_cathode = real_parameters[174];
    flow_rate_an_variation.t_maxScaled = real_parameters[175];
    coolStack.subStack.anode_channel.h_start[6] = real_parameters[176];
    coolStack.coolingPipe.XA[1] = real_parameters[177];
    coolStack.coolingPipe.A_heat_internal[2] = real_parameters[178];
    coolStack.coolingPipe.htcoeff.Dhyd[5] = real_parameters[179];
    coolStack.subStack.cathode_channel.channel.p_start_in = real_parameters[180];
    humidification_cath.MM_dry = real_parameters[181];
    coolStack.coolingPipe.friction.A[2] = real_parameters[182];
    coolStack.subStack.cathode_channel.mflow_smooth = real_parameters[183];
    humidification_cath.y_dry_in[4] = real_parameters[184];
    coolStack.subStack.anode_channel.channel.L_total = real_parameters[185];
    coolStack.subStack.anode_channel.channel.L[1] = real_parameters[186];
    coolStack.coolingPipe.htcoeff.A_heat[5] = real_parameters[187];
    coolStack.coolingPipe.A_heat[3] = real_parameters[188];
    coolStack.coolingPipe.levels[5] = real_parameters[189];
    coolStack.coolingPipe.friction.n_channels[2] = real_parameters[190];
    flowAnode.massFlowBoundary.T = real_parameters[191];
    coolStack.subStack.anode_channel.channel.V[4] = real_parameters[192];
    p_cath_variation.shiftTime = real_parameters[193];
    coolStack.coolingPipe.friction.m_flow_small = real_parameters[194];
    sinkCathode.pressureBoundary.X[5] = real_parameters[195];
    coolStack.coolingPipe.volume[3].V_tot = real_parameters[196];
    coolStack.subStack.anode_channel.channel.htcoeff[3].Dhyd = real_parameters[197];
    coolStack.coolingPipe.Dhyd[5] = real_parameters[198];
    coolStack.subStack.h_start_anode[1] = real_parameters[199];
    coolStack.subStack.anode_channel.channel.T_start_out = real_parameters[200];
    coolStack.subStack.anode_channel.channel.htcoeff[1].Dhyd = real_parameters[201];
    coolStack.subStack.anode_channel.channel.reaction.Zx_start[2] = real_parameters[202];
    coolStack.subStack.anode_channel.channel.friction[4].mflow_smooth = real_parameters[203];
    coolStack.subStack.cell.A_cell = real_parameters[204];
    coolStack.h_start_anode[5] = real_parameters[205];
    flow_rate_cath_variation.t_max = real_parameters[206];
    coolStack.coolingPipe.V[1] = real_parameters[207];
    coolStack.p_start_cooling[1] = real_parameters[208];
    coolStack.coolingPipe.A[5] = real_parameters[209];
    coolStack.V_anode = real_parameters[210];
    coolStack.subStack.anode_channel.channel.T_start[6] = real_parameters[211];
    coolStack.subStack.anode_channel.channel.friction[3].d0 = real_parameters[212];
    coolStack.subStack.cathode_channel.channel.friction[1].dp0 = real_parameters[213];
    coolStack.m_flow_start_cooling = real_parameters[214];
    coolStack.subStack.anode_channel.p_start_in = real_parameters[215];
    coolStack.subStack.p_start_anode[1] = real_parameters[216];
    coolStack.subStack.anode_channel.channel.A_heat[1] = real_parameters[217];
    coolStack.subStack.anode_channel.channel.p_start[5] = real_parameters[218];
    coolStack.subStack.cathode_channel.channel.h_start_in = real_parameters[219];
    coolStack.subStack.anode_channel.channel.V_tot = real_parameters[220];
    coolStack.coolingPipe.n_channels[3] = real_parameters[221];
    coolStack.subStack.anode_channel.channel.friction[1].A = real_parameters[222];
    coolStack.subStack.anode_channel.channel.levels[4] = real_parameters[223];
    coolStack.subStack.cathode_channel.channel.friction[5].m_flow0 = real_parameters[224];
    humidification_cath.y_dry_in[5] = real_parameters[225];
    coolStack.subStack.anode_channel.channel.summary.V = real_parameters[226];
    coolStack.h_start_anode[3] = real_parameters[227];
    coolStack.coolingPipe.htcoeff.A[3] = real_parameters[228];
    coolStack.subStack.p_start_anode[3] = real_parameters[229];
    coolStack.m_flow_start_cathode = real_parameters[230];
    coolStack.subStack.cathode_channel.channel.friction[4].mflow_smooth = real_parameters[231];
    coolStack.subStack.cathode_channel.p_start[3] = real_parameters[232];
    coolStack.coolingPipe.volume[5].Tt_start = real_parameters[233];
    coolStack.subStack.anode_channel.channel.friction[3].lengthFraction = real_parameters[234];
    coolStack.coolingPipe.A[1] = real_parameters[235];
    coolStack.T_start_cooling[5] = real_parameters[236];
    coolStack.subStack.anode_channel.channel.A_mean = real_parameters[237];
    coolStack.T_start_anode[2] = real_parameters[238];
    coolStack.A_heat_anode = real_parameters[239];
    V_cell_exp.t_max = real_parameters[240];
    coolStack.T_start_out_cooling = real_parameters[241];
    coolStack.subStack.anode_channel.p_start[5] = real_parameters[242];
    coolStack.coolingPipe.A_heat_start = real_parameters[243];
    coolStack.subStack.cell.waterContent.A_cell = real_parameters[244];
    flow_rate_an_variation.shiftTime = real_parameters[245];
    sourceW.T = real_parameters[246];
    coolStack.subStack.anode_channel.channel.T_start[2] = real_parameters[247];
    coolStack.subStack.G_cell = real_parameters[248];
    coolStack.subStack.cell.gasDiffusion.A_cell = real_parameters[249];
    sinkP.pressureBoundary.T = real_parameters[250];
    current_variation.t_maxScaled = real_parameters[251];
    coolStack.coolingPipe.V_tot = real_parameters[252];
    coolStack.p_start_cathode[2] = real_parameters[253];
    coolStack.subStack.anode_channel.channel.A_heat[4] = real_parameters[254];
    coolStack.subStack.lambda_cell = real_parameters[255];
    coolStack.subStack.p_start_anode[4] = real_parameters[256];
    coolStack.T_start_in_cooling = real_parameters[257];
    coolStack.subStack.cell.CF_N_gasDiffusion[2,2] = real_parameters[258];
    coolStack.subStack.CF_AnodeSidePressureLoss = real_parameters[259];
    coolStack.subStack.anode_channel.channel.friction[3].F_user = real_parameters[260];
    coolStack.subStack.anode_channel.channel.dp_smooth = real_parameters[261];
    sinkAnode.pressureBoundary.T = real_parameters[262];
    coolStack.T_start_anode[4] = real_parameters[263];
    sinkCathode.pressureBoundary.T_set = real_parameters[264];
    coolStack.subStack.anode_channel.channel.htcoeff[2].A = real_parameters[265];
    coolStack.subStack.cell.CF_N_waterDiffusion[4] = real_parameters[266];
    coolStack.subStack.anode_channel.channel.z[5] = real_parameters[267];
    coolStack.subStack.anode_channel.channel.Dhyd[4] = real_parameters[268];
    coolStack.subStack.anode_channel.channel.n_channels[2] = real_parameters[269];
    coolStack.subStack.p_start_cathode[2] = real_parameters[270];
    coolStack.T_start_anode[6] = real_parameters[271];
    coolStack.subStack.anode_channel.channel.friction[5].lengthFraction = real_parameters[272];
    coolStack.subStack.p_start_in_cathode = real_parameters[273];
    coolStack.subStack.anode_channel.channel.friction[5].F_user = real_parameters[274];
    coolStack.subStack.cathode_channel.channel.CF_HeatTransfer = real_parameters[275];
    coolStack.coolingPipe.volume[1].h_start = real_parameters[276];
    coolStack.subStack.cell.gasDiffusion.CF_N[1,2] = real_parameters[277];
    coolStack.subStack.cathode_channel.T_start[3] = real_parameters[278];
    coolStack.subStack.cell.electroOsmoticDrag.CF_N[3] = real_parameters[279];
    coolStack.subStack.anode_channel.channel.reaction.pstart = real_parameters[280];
    coolStack.coolingPipe.volume[3].pt_start = real_parameters[281];
    coolStack.coolingPipe.levels[1] = real_parameters[282];
    coolStack.coolingPipe.friction.pos_rel_in = real_parameters[283];
    coolStack.subStack.T_start_cathode[5] = real_parameters[284];
    coolStack.subStack.anode_channel.channel.levels[5] = real_parameters[285];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].F_user = real_parameters[286];
    coolStack.subStack.anode_channel.D = real_parameters[287];
    coolStack.subStack.cell.gasDiffusion.CF_N[4,1] = real_parameters[288];
    coolStack.subStack.alpha = real_parameters[289];
    sinkAnode.pressureBoundary.X[1] = real_parameters[290];
    coolStack.subStack.cathode_channel.p_start[2] = real_parameters[291];
    sinkP.pressureBoundary.p = real_parameters[292];
    sourceW.massFlowBoundary.T_set = real_parameters[293];
    coolStack.T_start_cathode[5] = real_parameters[294];
    coolStack.subStack.cell.gasDiffusion.CF_N[4,2] = real_parameters[295];
    sinkP.pressureBoundary.T_set = real_parameters[296];
    coolStack.coolingPipe.volume[2].U_start = real_parameters[297];
    coolStack.p_start_cooling[2] = real_parameters[298];
    sinkAnode.pressureBoundary.p = real_parameters[299];
    coolStack.coolingPipe.T_start[5] = real_parameters[300];
    coolStack.V_cooling = real_parameters[301];
    coolStack.p_start_cathode[5] = real_parameters[302];
    coolStack.coolingPipe.friction.L[1] = real_parameters[303];
    coolStack.subStack.cathode_channel.channel.T_start[6] = real_parameters[304];
    coolStack.subStack.cell.electroOsmoticDrag.CF_N[4] = real_parameters[305];
    coolStack.subStack.cathode_channel.channel.friction[4].F_user = real_parameters[306];
    humidification_cath.y_dry_in[3] = real_parameters[307];
    coolStack.subStack.m_flow_start_anode = real_parameters[308];
    flowCathode.massFlowBoundary.m_flow = real_parameters[309];
    coolStack.coolingPipe.volume[2].T_start = real_parameters[310];
    coolStack.subStack.anode_channel.channel.L[4] = real_parameters[311];
    coolStack.coolingPipe.L[2] = real_parameters[312];
    coolStack.subStack.cathode_channel.channel.T_start_out = real_parameters[313];
    coolStack.subStack.cell.waterDiffusion.CF_N[2] = real_parameters[314];
    coolStack.subStack.cathode_channel.channel.p_start[1] = real_parameters[315];
    coolStack.subStack.cathode_channel.channel.friction[1].mflow_smooth = real_parameters[316];
    coolStack.subStack.anode_channel.h_start_in = real_parameters[317];
    coolStack.subStack.cell.waterDiffusion.rho_dry_m = real_parameters[318];
    coolStack.subStack.cathode_channel.channel.p_start_out = real_parameters[319];
    coolStack.coolingPipe.volume[5].X_start[1] = real_parameters[320];
    sinkCathode.pressureBoundary.T = real_parameters[321];
    coolStack.coolingPipe.p_start[2] = real_parameters[322];
    coolStack.coolingPipe.A_heat[5] = real_parameters[323];
    coolStack.coolingPipe.volume[4].V_tot = real_parameters[324];
    coolStack.subStack.cathode_channel.channel.m_flow_start = real_parameters[325];
    coolStack.p_start_anode[4] = real_parameters[326];
    coolStack.h_start_anode[6] = real_parameters[327];
    coolStack.subStack.anode_channel.channel.p_start[4] = real_parameters[328];
    coolStack.coolingPipe.n_channels[4] = real_parameters[329];
    coolStack.p_start_cooling[3] = real_parameters[330];
    coolStack.subStack.anode_channel.channel.n_channels[3] = real_parameters[331];
    coolStack.subStack.A_crosssection_cell = real_parameters[332];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_start[1] = real_parameters[333];
    coolStack.coolingPipe.V[5] = real_parameters[334];
    humidification_an.rho_dry = real_parameters[335];
    coolStack.subStack.h_start_anode[6] = real_parameters[336];
    coolStack.T_start_cooling[3] = real_parameters[337];
    coolStack.subStack.cell.CF_N_eod[3] = real_parameters[338];
    coolStack.coolingPipe.Dhyd[2] = real_parameters[339];
    sinkCathode.pressureBoundary.X[3] = real_parameters[340];
    coolStack.coolingPipe.levels[3] = real_parameters[341];
    coolStack.coolingPipe.T_start[6] = real_parameters[342];
    coolStack.subStack.cathode_channel.p_start[4] = real_parameters[343];
    coolStack.coolingPipe.friction.Dhyd[3] = real_parameters[344];
    coolStack.subStack.cell.activationLoss.alpha = real_parameters[345];
    coolStack.coolingPipe.T_start[3] = real_parameters[346];
    ramp_m_flow_water.height = real_parameters[347];
    coolStack.subStack.anode_channel.channel.T_start_in = real_parameters[348];
    coolStack.coolingPipe.friction.flowFraction0 = real_parameters[349];
    coolStack.subStack.p_start_anode[5] = real_parameters[350];
    coolStack.p_start_in_cooling = real_parameters[351];
    coolStack.p_start_out_cathode = real_parameters[352];
    coolStack.subStack.anode_channel.channel.L[2] = real_parameters[353];
    coolStack.coolingPipe.n_channels[5] = real_parameters[354];
    coolStack.subStack.anode_channel.channel.friction[2].dp0 = real_parameters[355];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_start[4] = real_parameters[356];
    coolStack.subStack.p_start_cathode[1] = real_parameters[357];
    coolStack.subStack.anode_channel.channel.A_heat[2] = real_parameters[358];
    sinkP.T = real_parameters[359];
    coolStack.coolingPipe.V_internal[5] = real_parameters[360];
    coolStack.subStack.CF_CathodeSideHeatTransfer = real_parameters[361];
    coolStack.subStack.cathode_channel.channel.T_start[5] = real_parameters[362];
    coolStack.subStack.anode_channel.channel.p_start_in = real_parameters[363];
    coolStack.subStack.cell.CF_N_waterContent[2] = real_parameters[364];
    flowCathode.massFlowBoundary.h = real_parameters[365];
    coolStack.subStack.cathode_channel.channel.T_start[4] = real_parameters[366];
    coolStack.subStack.anode_channel.channel.friction[3].L = real_parameters[367];
    flowCathode.massFlowBoundary.T_set = real_parameters[368];
    coolStack.coolingPipe.friction.A[1] = real_parameters[369];
    coolStack.subStack.cell.CF_N_waterContent[4] = real_parameters[370];
    coolStack.coolingPipe.friction.dp_smooth = real_parameters[371];
    coolStack.subStack.cell.gasDiffusion.EW_m = real_parameters[372];
    coolStack.coolingPipe.h_start[1] = real_parameters[373];
    coolStack.subStack.cathode_channel.p_start[1] = real_parameters[374];
    coolStack.coolingPipe.volume[2].p_start = real_parameters[375];
    coolStack.subStack.T_start_cathode[1] = real_parameters[376];
    coolStack.subStack.anode_channel.Dhyd = real_parameters[377];
    coolStack.subStack.anode_channel.channel.friction[2].F_user = real_parameters[378];
    coolStack.subStack.anode_channel.channel.m_flow_start = real_parameters[379];
    coolStack.coolingPipe.L[4] = real_parameters[380];
    sinkCathode.pressureBoundary.h = real_parameters[381];
    coolStack.coolingPipe.volume[5].mX_start[1] = real_parameters[382];
    dp_an_variation.t_max = real_parameters[383];
    humidification_an.T_in = real_parameters[384];
    coolStack.subStack.anode_channel.channel.friction[2].Dhyd = real_parameters[385];
    sinkP.pressureBoundary.state.X[1] = real_parameters[386];
    coolStack.subStack.anode_channel.channel.A[4] = real_parameters[387];
    coolStack.coolingPipe.V[4] = real_parameters[388];
    coolStack.subStack.anode_channel.T_start_in = real_parameters[389];
    coolStack.coolingPipe.dp_smooth = real_parameters[390];
    coolStack.h_start_cathode[2] = real_parameters[391];
    coolStack.coolingPipe.volume[2].m_start = real_parameters[392];
    coolStack.coolingPipe.volume[3].X_start[1] = real_parameters[393];
    coolStack.subStack.anode_channel.channel.friction[1].m_flow0 = real_parameters[394];
    coolStack.subStack.cathode_channel.channel.friction[2].m_flow0 = real_parameters[395];
    coolStack.subStack.cell.waterContent.EW_m = real_parameters[396];
    coolStack.subStack.p_start_out_cathode = real_parameters[397];
    coolStack.coolingPipe.A_heat_internal[5] = real_parameters[398];
    flowAnode.massFlowBoundary.V_flow = real_parameters[399];
    coolStack.coolingPipe.L_internal[1] = real_parameters[400];
    coolStack.coolingPipe.volume[1].T_start = real_parameters[401];
    p_an_variation.t_minScaled = real_parameters[402];
    coolStack.subStack.cathode_channel.h_start[6] = real_parameters[403];
    coolStack.subStack.cathode_channel.channel.friction[2].dp0 = real_parameters[404];
    humidification_an.y_dry_in[4] = real_parameters[405];
    coolStack.coolingPipe.volume[4].pt_start = real_parameters[406];
    coolStack.subStack.cathode_channel.channel.levels[2] = real_parameters[407];
    coolStack.subStack.cell.electroOsmoticDrag.z = real_parameters[408];
    current_variation.t_max = real_parameters[409];
    coolStack.coolingPipe.volume[4].p_start = real_parameters[410];
    coolStack.coolingPipe.A_heat[4] = real_parameters[411];
    coolStack.subStack.anode_channel.h_start[1] = real_parameters[412];
    coolStack.subStack.cathode_channel.T_start_in = real_parameters[413];
    humidification_an.MM_dry = real_parameters[414];
    coolStack.T_start_cooling[2] = real_parameters[415];
    coolStack.coolingPipe.friction.mflow_smooth = real_parameters[416];
    coolStack.coolingPipe.friction.pos_rel_out = real_parameters[417];
    coolStack.coolingPipe.volume[1].p_start = real_parameters[418];
    coolStack.subStack.cathode_channel.channel.friction[1].F_user = real_parameters[419];
    coolStack.p_start_out_anode = real_parameters[420];
    flowAnode.massFlowBoundary.m_flow = real_parameters[421];
    coolStack.coolingPipe.friction.L[5] = real_parameters[422];
    coolStack.subStack.anode_channel.channel.T_start[3] = real_parameters[423];
    coolStack.coolingPipe.z[4] = real_parameters[424];
    coolStack.subStack.anode_channel.channel.friction[3].dp0 = real_parameters[425];
    coolStack.subStack.cathode_channel.channel.levels[1] = real_parameters[426];
    coolStack.subStack.cathode_channel.p_start[6] = real_parameters[427];
    p_water_variation.t_min = real_parameters[428];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].F_user = real_parameters[429];
    coolStack.subStack.cathode_channel.channel.friction[2].d0 = real_parameters[430];
    coolStack.subStack.anode_channel.h_start[3] = real_parameters[431];
    sinkP.pressureBoundary.h = real_parameters[432];
    coolStack.subStack.cell.gasDiffusion.CF_N[5,2] = real_parameters[433];
    coolStack.coolingPipe.htcoeff.Dhyd[2] = real_parameters[434];
    coolStack.coolingPipe.htcoeff.A[5] = real_parameters[435];
    coolStack.coolingPipe.volume[4].X_start[1] = real_parameters[436];
    coolStack.h_start_anode[2] = real_parameters[437];
    coolStack.p_start_in_anode = real_parameters[438];
    coolStack.subStack.cathode_channel.channel.T_start[1] = real_parameters[439];
    coolStack.subStack.anode_channel.channel.friction[3].Dhyd = real_parameters[440];
    coolStack.subStack.anode_channel.channel.friction[4].m_flow0 = real_parameters[441];
    coolStack.subStack.cell.gasDiffusion.z = real_parameters[442];
    coolStack.subStack.E0_ref = real_parameters[443];
    coolStack.subStack.h_start_anode[3] = real_parameters[444];
    coolStack.coolingPipe.z[2] = real_parameters[445];
    coolStack.coolingPipe.volume[4].m_start = real_parameters[446];
    coolStack.h_start_cathode[1] = real_parameters[447];
    coolStack.subStack.rho_dry_m = real_parameters[448];
    coolStack.coolingPipe.V_internal[3] = real_parameters[449];
    coolStack.coolingPipe.volume[3].m_start = real_parameters[450];
    coolStack.subStack.cell.CF_N_gasDiffusion[5,1] = real_parameters[451];
    coolStack.coolingPipe.friction.L[4] = real_parameters[452];
    coolStack.subStack.p_start_cathode[3] = real_parameters[453];
    coolStack.subStack.anode_channel.channel.CF_HeatTransfer = real_parameters[454];
    coolStack.coolingPipe.V[2] = real_parameters[455];
    coolStack.coolingPipe.levels[2] = real_parameters[456];
    coolStack.subStack.cell.gasDiffusion.CF_N[2,2] = real_parameters[457];
    coolStack.coolingPipe.friction.n_channels[4] = real_parameters[458];
    coolStack.subStack.anode_channel.h_start[4] = real_parameters[459];
    coolStack.Dhyd_cooling = real_parameters[460];
    dp_cath_variation.t_min = real_parameters[461];
    coolStack.T_start_out_cathode = real_parameters[462];
    humidification_an.T_dew = real_parameters[463];
    coolStack.p_start_anode[1] = real_parameters[464];
    coolStack.coolingPipe.friction.L[2] = real_parameters[465];
    coolStack.T_start_cooling[1] = real_parameters[466];
    coolStack.subStack.p_start_cathode[5] = real_parameters[467];
    coolStack.subStack.cathode_channel.channel.reaction.Ztot_start = real_parameters[468];
    coolStack.subStack.cathode_channel.channel.A_heat[1] = real_parameters[469];
    coolStack.p_start_cooling[5] = real_parameters[470];
    coolStack.subStack.anode_channel.channel.reaction.Zx_start[3] = real_parameters[471];
    coolStack.subStack.cathode_channel.channel.h_start[6] = real_parameters[472];
    coolStack.coolingPipe.n_channels[2] = real_parameters[473];
    sinkAnode.pressureBoundary.X[2] = real_parameters[474];
    coolStack.coolingPipe.volume[4].mX_start[1] = real_parameters[475];
    coolStack.coolingPipe.volume[5].h_start = real_parameters[476];
    coolStack.subStack.T_start_out_anode = real_parameters[477];
    coolStack.subStack.anode_channel.channel.reaction.V = real_parameters[478];
    p_cath_variation.t_max = real_parameters[479];
    m_flow_water_max = real_parameters[480];
    coolStack.coolingPipe.htcoeff.A[4] = real_parameters[481];
    coolStack.subStack.anode_channel.h_start_out = real_parameters[482];
    coolStack.subStack.anode_channel.m_flow_start = real_parameters[483];
    coolStack.subStack.dp_smooth = real_parameters[484];
    humidification_cath.rho_dry = real_parameters[485];
    coolStack.subStack.cathode_channel.channel.friction[3].m_flow0 = real_parameters[486];
    coolStack.subStack.c_stack = real_parameters[487];
    coolStack.coolingPipe.volume[3].ht_start = real_parameters[488];
    coolStack.coolingPipe.n_channels[1] = real_parameters[489];
    coolStack.subStack.cell.CF_N_eod[5] = real_parameters[490];
    coolStack.subStack.anode_channel.channel.h_start[2] = real_parameters[491];
    coolStack.subStack.anode_channel.channel.L[5] = real_parameters[492];
    coolStack.coolingPipe.CF_HeatTransfer = real_parameters[493];
    coolStack.coolingPipe.T_start[2] = real_parameters[494];
    coolStack.subStack.anode_channel.channel.z[4] = real_parameters[495];
    coolStack.subStack.cathode_channel.h_start[1] = real_parameters[496];
    coolStack.subStack.cathode_channel.h_start[2] = real_parameters[497];
    coolStack.subStack.cathode_channel.h_start[4] = real_parameters[498];
    coolStack.subStack.cell.EW_m = real_parameters[499];
    coolStack.T_start_cathode[4] = real_parameters[500];
    coolStack.p_start_out_cooling = real_parameters[501];
    coolStack.subStack.anode_channel.T_start[5] = real_parameters[502];
    coolStack.subStack.anode_channel.T_start[1] = real_parameters[503];
    flow_rate_cath_variation.t_minScaled = real_parameters[504];
    coolStack.h_start_anode[4] = real_parameters[505];
    coolStack.subStack.anode_channel.channel.friction[5].dp0 = real_parameters[506];
    coolStack.subStack.cell.waterDiffusion.CF_N[3] = real_parameters[507];
    coolStack.coolingPipe.volume[3].p_start = real_parameters[508];
    coolStack.coolingPipe.volume[5].ht_start = real_parameters[509];
    coolStack.subStack.T_start_out_cathode = real_parameters[510];
    coolStack.subStack.cathode_channel.channel.h_start_out = real_parameters[511];
    coolStack.subStack.T_start_cathode[6] = real_parameters[512];
    coolStack.coolingPipe.A_heat_internal[1] = real_parameters[513];
    coolStack.coolingPipe.volume[1].mX_start[1] = real_parameters[514];
    dp_an_variation.t_maxScaled = real_parameters[515];
    coolStack.coolingPipe.A_heat_internal[3] = real_parameters[516];
    coolStack.subStack.anode_channel.channel.htcoeff[3].L = real_parameters[517];
    coolStack.h_start_cathode[3] = real_parameters[518];
    coolStack.subStack.cathode_channel.p_start_out = real_parameters[519];
    multiDisplaySensor1.multiDisplaySensor.portA.X_outflow[1] = real_parameters[520];
    coolStack.subStack.T_start_anode[5] = real_parameters[521];
    coolStack.subStack.cathode_channel.A_heat = real_parameters[522];
    coolStack.coolingPipe.friction.Dhyd[4] = real_parameters[523];
    coolStack.subStack.cell.CF_N_gasDiffusion[5,2] = real_parameters[524];
    humidification_cath.y_dry_in[2] = real_parameters[525];
    sinkP.fluidPort.X_outflow[1] = real_parameters[526];
    coolStack.coolingPipe.h_start[5] = real_parameters[527];
    dp_an_variation.shiftTime = real_parameters[528];
    coolStack.subStack.cell.pstart = real_parameters[529];
    coolStack.coolingPipe.htcoeff.F_user = real_parameters[530];
    coolStack.coolingPipe.state[1].X[1] = real_parameters[531];
    coolStack.coolingPipe.Dhyd[4] = real_parameters[532];
    coolStack.coolingPipe.z[5] = real_parameters[533];
    coolStack.subStack.anode_channel.channel.friction[4].Dhyd = real_parameters[534];
    coolStack.subStack.anode_channel.channel.friction[5].dp_smooth = real_parameters[535];
    coolStack.subStack.cathode_channel.h_start[5] = real_parameters[536];
    dp_an_variation.t_minScaled = real_parameters[537];
    multiDisplaySensor4.multiDisplaySensor.state.X[1] = real_parameters[538];
    coolStack.subStack.D_anode = real_parameters[539];
    coolStack.subStack.anode_channel.channel.friction[3].m_flow0 = real_parameters[540];
    V_cell_exp.t_min = real_parameters[541];
    coolStack.coolingPipe.T_start_out = real_parameters[542];
    coolStack.subStack.anode_channel.channel.friction[3].dp_smooth = real_parameters[543];
    coolStack.subStack.anode_channel.channel.Dhyd[5] = real_parameters[544];
    coolStack.subStack.anode_channel.A = real_parameters[545];
    coolStack.subStack.h_start_out_anode = real_parameters[546];
    coolStack.subStack.anode_channel.summary.V = real_parameters[547];
    coolStack.subStack.anode_channel.channel.p_start[2] = real_parameters[548];
    coolStack.subStack.M_stack = real_parameters[549];
    coolStack.coolingPipe.volume[4].h_start = real_parameters[550];
    coolStack.subStack.cathode_channel.channel.friction[4].dp_smooth = real_parameters[551];
    coolStack.subStack.anode_channel.channel.friction[4].F_user = real_parameters[552];
    coolStack.subStack.p_start_out_anode = real_parameters[553];
    sinkAnode.pressureBoundary.X[3] = real_parameters[554];
    coolStack.subStack.h_start_cathode[1] = real_parameters[555];
    gain.k = real_parameters[556];
    coolStack.subStack.anode_channel.channel.htcoeff[1].L = real_parameters[557];
    coolStack.subStack.cell.waterContent.CF_0 = real_parameters[558];
    coolStack.subStack.T_start_anode[3] = real_parameters[559];
    coolStack.coolingPipe.volume[3].h_start = real_parameters[560];
    coolStack.T_start_out_anode = real_parameters[561];
    coolStack.subStack.Dhyd_anode = real_parameters[562];
    coolStack.subStack.anode_channel.channel.friction[1].mflow_smooth = real_parameters[563];
    coolStack.subStack.anode_channel.p_start[1] = real_parameters[564];
    coolStack.subStack.cathode_channel.dp_smooth = real_parameters[565];
    coolStack.subStack.anode_channel.channel.friction[2].lengthFraction = real_parameters[566];
    coolStack.subStack.p_start_anode[2] = real_parameters[567];
    coolStack.subStack.cathode_channel.channel.A_heat[3] = real_parameters[568];
    coolStack.subStack.cathode_channel.channel.friction[2].dp_smooth = real_parameters[569];
    coolStack.coolingPipe.levels[4] = real_parameters[570];
    coolStack.subStack.A_anode = real_parameters[571];
    coolStack.coolingPipe.L[1] = real_parameters[572];
    coolStack.T_start_in_cathode = real_parameters[573];
    coolStack.coolingPipe.volume[4].Tt_start = real_parameters[574];
    coolStack.subStack.anode_channel.channel.h_start[3] = real_parameters[575];
    coolStack.subStack.T_start_anode[2] = real_parameters[576];
    coolStack.subStack.cell.CF_N_waterDiffusion[5] = real_parameters[577];
    coolStack.subStack.cathode_channel.channel.levels[3] = real_parameters[578];
    p_water_variation.shiftTime = real_parameters[579];
    coolStack.coolingPipe.A_heat[1] = real_parameters[580];
    coolStack.subStack.anode_channel.channel.htcoeff[3].A = real_parameters[581];
    coolStack.subStack.cell.CF_N_gasDiffusion[4,2] = real_parameters[582];
    coolStack.subStack.anode_channel.channel.friction[4].L = real_parameters[583];
    coolStack.subStack.cell.Tstart = real_parameters[584];
    coolStack.subStack.anode_channel.channel.friction[5].L = real_parameters[585];
    coolStack.subStack.cathode_channel.channel.friction[3].d0 = real_parameters[586];
    coolStack.subStack.cell.gasDiffusion.CF_N[1,1] = real_parameters[587];
    humidification_an.y_dry_in[2] = real_parameters[588];
    coolStack.coolingPipe.volume[4].T_start = real_parameters[589];
    coolStack.subStack.cell.waterContent.z = real_parameters[590];
    coolStack.coolingPipe.volume[3].T_start = real_parameters[591];
    coolStack.p_start_cooling[6] = real_parameters[592];
    coolStack.coolingPipe.friction.mflow0 = real_parameters[593];
    coolStack.subStack.anode_channel.h_start[2] = real_parameters[594];
    coolStack.subStack.cathode_channel.h_start[3] = real_parameters[595];
    coolStack.h_start_cooling[2] = real_parameters[596];
    coolStack.subStack.anode_channel.channel.z[2] = real_parameters[597];
    coolStack.coolingPipe.friction.dp0 = real_parameters[598];
    p_an_variation.t_maxScaled = real_parameters[599];
    sinkAnode.T = real_parameters[600];
    coolStack.subStack.anode_channel.channel.htcoeff[4].F_user = real_parameters[601];
    coolStack.coolingPipe.A_mean = real_parameters[602];
    coolStack.p_start_in_cathode = real_parameters[603];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_start[5] = real_parameters[604];
    dp_an_variation.t_min = real_parameters[605];
    coolStack.subStack.anode_channel.channel.friction[5].d0 = real_parameters[606];
    coolStack.coolingPipe.htcoeff.A[1] = real_parameters[607];
    coolStack.subStack.cathode_channel.channel.dp_smooth = real_parameters[608];
    sinkP.pressureBoundary.X[1] = real_parameters[609];
    coolStack.subStack.cathode_channel.channel.T_start_in = real_parameters[610];
    coolStack.subStack.cell.C_cell = real_parameters[611];
    coolStack.subStack.T_start_in_cathode = real_parameters[612];
    coolStack.subStack.cathode_channel.h_start_out = real_parameters[613];
    coolStack.subStack.anode_channel.p_start[4] = real_parameters[614];
    coolStack.p_start_cathode[1] = real_parameters[615];
    coolStack.subStack.anode_channel.channel.A[3] = real_parameters[616];
    coolStack.subStack.cathode_channel.h_start_in = real_parameters[617];
    coolStack.subStack.anode_channel.channel.h_start[1] = real_parameters[618];
    coolStack.coolingPipe.X_start[1] = real_parameters[619];
    coolStack.subStack.cell.gasDiffusion.CF_N[5,1] = real_parameters[620];
    coolStack.subStack.cell.gasDiffusion.rho_dry_m = real_parameters[621];
    coolStack.subStack.p_start_in_anode = real_parameters[622];
    coolStack.coolingPipe.L_set = real_parameters[623];
    coolStack.subStack.anode_channel.channel.V[2] = real_parameters[624];
    flowAnode.T = real_parameters[625];
    sourceW.fluidPort.X_outflow[1] = real_parameters[626];
    coolStack.subStack.anode_channel.channel.L[3] = real_parameters[627];
    coolStack.subStack.anode_channel.channel.friction[5].A = real_parameters[628];
    coolStack.coolingPipe.friction.Av = real_parameters[629];
    coolStack.subStack.cathode_channel.channel.h_start[1] = real_parameters[630];
    coolStack.coolingPipe.volume[5].m_start = real_parameters[631];
    coolStack.subStack.anode_channel.channel.friction[3].n_channels = real_parameters[632];
    coolStack.subStack.cathode_channel.channel.A_heat[4] = real_parameters[633];
    coolStack.subStack.anode_channel.channel.friction[2].m_flow0 = real_parameters[634];
    coolStack.subStack.cathode_channel.channel.friction[2].F_user = real_parameters[635];
    coolStack.coolingPipe.h_start[3] = real_parameters[636];
    coolStack.subStack.anode_channel.channel.friction[2].mflow_smooth = real_parameters[637];
    coolStack.subStack.cathode_channel.T_start[6] = real_parameters[638];
    coolStack.subStack.cell.electroOsmoticDrag.EW_m = real_parameters[639];
    coolStack.subStack.cathode_channel.T_start[2] = real_parameters[640];
    p_cath_variation.t_min = real_parameters[641];
    coolStack.subStack.anode_channel.channel.h_start[6] = real_parameters[642];
    coolStack.subStack.cathode_channel.T_start[4] = real_parameters[643];
    coolStack.coolingPipe.CF_PressureLoss = real_parameters[644];
    coolStack.coolingPipe.summary.V = real_parameters[645];
    coolStack.subStack.anode_channel.mflow_smooth = real_parameters[646];
    coolStack.coolingPipe.htcoeff.A_heat[2] = real_parameters[647];
    coolStack.subStack.cathode_channel.channel.reaction.pstart = real_parameters[648];
    coolStack.subStack.cathode_channel.channel.CF_PressureLoss = real_parameters[649];
    coolStack.subStack.cell.gasDiffusion.CF_0[1] = real_parameters[650];
    coolStack.subStack.cell.gasDiffusion.CF_N[2,1] = real_parameters[651];
    sourceW.massFlowBoundary.state.X[1] = real_parameters[652];
    coolStack.subStack.anode_channel.channel.T_start[1] = real_parameters[653];
    coolStack.subStack.anode_channel.channel.htcoeff[2].F_user = real_parameters[654];
    coolStack.h_start_cooling[1] = real_parameters[655];
    coolStack.subStack.anode_channel.channel.htcoeff[5].L = real_parameters[656];
    coolStack.coolingPipe.Dhyd[1] = real_parameters[657];
    coolStack.h_start_cooling[3] = real_parameters[658];
    coolStack.subStack.p_start_cathode[4] = real_parameters[659];
    coolStack.subStack.cathode_channel.channel.h_start[4] = real_parameters[660];
    coolStack.coolingPipe.p_start[6] = real_parameters[661];
    coolStack.subStack.cell.CF_N_waterDiffusion[3] = real_parameters[662];
    coolStack.subStack.anode_channel.h_start[5] = real_parameters[663];
    coolStack.coolingPipe.volume[1].V_tot = real_parameters[664];
    sinkAnode.pressureBoundary.X[4] = real_parameters[665];
    sinkAnode.pressureBoundary.h = real_parameters[666];
    coolStack.subStack.anode_channel.channel.friction[1].d0 = real_parameters[667];
    coolStack.subStack.anode_channel.channel.CF_PressureLoss = real_parameters[668];
    coolStack.T_start_cooling[6] = real_parameters[669];
    dp_cath_variation.t_minScaled = real_parameters[670];
    coolStack.subStack.cell.CF_N_gasDiffusion[3,1] = real_parameters[671];
    coolStack.coolingPipe.A[3] = real_parameters[672];
    coolStack.C_anode = real_parameters[673];
    coolStack.subStack.cell.CF_N_gasDiffusion[2,1] = real_parameters[674];
    coolStack.subStack.anode_channel.channel.htcoeff[3].F_user = real_parameters[675];
    coolStack.coolingPipe.T_start_in = real_parameters[676];
    coolStack.coolingPipe.L_internal[3] = real_parameters[677];
    coolStack.coolingPipe.T_start[4] = real_parameters[678];
    coolStack.subStack.cathode_channel.channel.friction[3].dp_smooth = real_parameters[679];
    coolStack.p_start_cathode[4] = real_parameters[680];
    coolStack.subStack.anode_channel.V = real_parameters[681];
    coolStack.subStack.anode_channel.L = real_parameters[682];
    coolStack.coolingPipe.volume[4].U_start = real_parameters[683];
    coolStack.subStack.cathode_channel.channel.friction[3].mflow_smooth = real_parameters[684];
    coolStack.subStack.cell.gasDiffusion.CF_0[2] = real_parameters[685];
    coolStack.subStack.cathode_channel.channel.p_start[5] = real_parameters[686];
    coolStack.subStack.cathode_channel.T_start[1] = real_parameters[687];
    coolStack.coolingPipe.volume[1].m_start = real_parameters[688];
    flow_rate_cath_variation.t_maxScaled = real_parameters[689];
    V_cell_exp.t_maxScaled = real_parameters[690];
    coolStack.subStack.h_start_out_cathode = real_parameters[691];
    coolStack.coolingPipe.m_flow_start = real_parameters[692];
    coolStack.subStack.anode_channel.channel.friction[1].lengthFraction = real_parameters[693];
    coolStack.subStack.cathode_channel.CF_HeatTransfer = real_parameters[694];
    coolStack.T_start_cathode[1] = real_parameters[695];
    m_flow_water_min = real_parameters[696];
    coolStack.subStack.h_start_anode[2] = real_parameters[697];
    coolStack.coolingPipe.L_total = real_parameters[698];
    coolStack.coolingPipe.L_internal[5] = real_parameters[699];
    flow_rate_an_variation.t_min = real_parameters[700];
    coolStack.subStack.anode_channel.channel.friction[5].Dhyd = real_parameters[701];
    coolStack.subStack.cathode_channel.channel.h_start[5] = real_parameters[702];
    p_cath_variation.t_maxScaled = real_parameters[703];
    coolStack.subStack.cathode_channel.T_start_out = real_parameters[704];
    coolStack.coolingPipe.A[4] = real_parameters[705];
    p_cath_variation.t_minScaled = real_parameters[706];
    coolStack.coolingPipe.volume[5].p_start = real_parameters[707];
    coolStack.subStack.cathode_channel.channel.p_start[6] = real_parameters[708];
    p_an_variation.t_max = real_parameters[709];
    coolStack.subStack.cathode_channel.channel.h_start[2] = real_parameters[710];
    coolStack.h_start_cooling[4] = real_parameters[711];
    coolStack.subStack.anode_channel.channel.friction[1].dp0 = real_parameters[712];
    coolStack.subStack.anode_channel.channel.htcoeff[4].Dhyd = real_parameters[713];
    coolStack.p_start_cathode[3] = real_parameters[714];
    coolStack.subStack.anode_channel.channel.reaction.Zx_start[4] = real_parameters[715];
    coolStack.subStack.cell.gasDiffusion.CF_N[3,2] = real_parameters[716];
    coolStack.subStack.anode_channel.channel.friction[5].n_channels = real_parameters[717];
    coolStack.coolingPipe.friction.n_channels[3] = real_parameters[718];
    sinkCathode.pressureBoundary.p = real_parameters[719];
    coolStack.subStack.cathode_channel.CF_PressureLoss = real_parameters[720];
    coolStack.subStack.h_start_cathode[6] = real_parameters[721];
    coolStack.coolingPipe.L[3] = real_parameters[722];
    sinkCathode.pressureBoundary.X[1] = real_parameters[723];
    coolStack.coolingPipe.volume[5].V_tot = real_parameters[724];
    coolStack.subStack.CF_AnodeSideHeatTransfer = real_parameters[725];
    coolStack.subStack.anode_channel.channel.friction[5].m_flow0 = real_parameters[726];
    coolStack.subStack.anode_channel.channel.p_start[3] = real_parameters[727];
    coolStack.subStack.T_start_cathode[3] = real_parameters[728];
    p_an_variation.t_min = real_parameters[729];
    coolStack.subStack.T_start_cathode[4] = real_parameters[730];
    sourceW.massFlowBoundary.X[1] = real_parameters[731];
    coolStack.subStack.cell.CF_N_waterContent[1] = real_parameters[732];
    coolStack.subStack.C_anode = real_parameters[733];
    coolStack.h_start_anode[1] = real_parameters[734];
    coolStack.subStack.anode_channel.channel.friction[4].lengthFraction = real_parameters[735];
    coolStack.subStack.anode_channel.channel.h_start[4] = real_parameters[736];
    coolStack.subStack.cell.waterDiffusion.EW_m = real_parameters[737];
    coolStack.p_start_anode[6] = real_parameters[738];
    coolStack.subStack.cell.alpha = real_parameters[739];
    coolStack.subStack.T_start_in_anode = real_parameters[740];
    coolStack.subStack.anode_channel.channel.reaction.Tstart = real_parameters[741];
    coolStack.coolingPipe.friction.A[3] = real_parameters[742];
    coolStack.coolingPipe.h_start_out = real_parameters[743];
    coolStack.subStack.cell.waterDiffusion.CF_N[1] = real_parameters[744];
    coolStack.coolingPipe.volume[1].U_start = real_parameters[745];
    coolStack.subStack.cathode_channel.channel.p_start[4] = real_parameters[746];
    coolStack.subStack.anode_channel.channel.htcoeff[1].F_user = real_parameters[747];
    coolStack.subStack.anode_channel.channel.friction[4].dp0 = real_parameters[748];
    coolStack.subStack.anode_channel.channel.friction[2].n_channels = real_parameters[749];
    coolStack.subStack.anode_channel.p_start[6] = real_parameters[750];
    coolStack.subStack.mflow_smooth = real_parameters[751];
    current_variation.t_min = real_parameters[752];
    coolStack.subStack.anode_channel.channel.V[3] = real_parameters[753];
    p_water_variation.t_max = real_parameters[754];
    humidification_cath.T_in = real_parameters[755];
    coolStack.coolingPipe.z[1] = real_parameters[756];
    coolStack.subStack.cell.waterDiffusion.CF_0 = real_parameters[757];
    coolStack.coolingPipe.mflow_smooth = real_parameters[758];
    coolStack.subStack.anode_channel.channel.z[3] = real_parameters[759];
    coolStack.p_start_cathode[6] = real_parameters[760];
    coolStack.coolingPipe.htcoeff.L = real_parameters[761];
    coolStack.subStack.anode_channel.channel.friction[3].mflow_smooth = real_parameters[762];
    coolStack.coolingPipe.volume[1].X_start[1] = real_parameters[763];
    coolStack.T_start_in_anode = real_parameters[764];
    coolStack.coolingPipe.p_start_out = real_parameters[765];
    coolStack.subStack.cathode_channel.channel.A_heat[2] = real_parameters[766];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_start[3] = real_parameters[767];
    coolStack.subStack.cell.gasDiffusion.CF_N[3,1] = real_parameters[768];
    coolStack.subStack.h_start_cathode[2] = real_parameters[769];
    coolStack.subStack.length_cell = real_parameters[770];
    coolStack.subStack.cell.CF_N_waterDiffusion[2] = real_parameters[771];
    coolStack.subStack.anode_channel.channel.friction[1].dp_smooth = real_parameters[772];
    coolStack.subStack.cell.waterContent.CF_N[3] = real_parameters[773];
    coolStack.subStack.anode_channel.channel.htcoeff[5].A = real_parameters[774];
    coolStack.T_start_cooling[4] = real_parameters[775];
    coolStack.subStack.cathode_channel.channel.levels[5] = real_parameters[776];
    coolStack.coolingPipe.V_internal[1] = real_parameters[777];
    coolStack.coolingPipe.friction.n_channels[1] = real_parameters[778];
    coolStack.subStack.anode_channel.channel.n_channels[1] = real_parameters[779];
    coolStack.subStack.cathode_channel.channel.friction[5].d0 = real_parameters[780];
    coolStack.subStack.cathode_channel.channel.friction[5].dp_smooth = real_parameters[781];
    coolStack.coolingPipe.friction.Dhyd[1] = real_parameters[782];
    multiDisplaySensor4.portB.X_outflow[1] = real_parameters[783];
    coolStack.subStack.T_start_cathode[2] = real_parameters[784];
    coolStack.subStack.anode_channel.channel.friction[1].F_user = real_parameters[785];
    coolStack.subStack.anode_channel.channel.friction[2].A = real_parameters[786];
    p_water_variation.t_maxScaled = real_parameters[787];
    coolStack.C_cooling = real_parameters[788];
    coolStack.h_start_cathode[6] = real_parameters[789];
    coolStack.subStack.cathode_channel.T_start[5] = real_parameters[790];
    coolStack.subStack.cell.CF_N_eod[2] = real_parameters[791];
    coolStack.subStack.cathode_channel.channel.reaction.Tstart = real_parameters[792];
    coolStack.T_start_cathode[6] = real_parameters[793];
    coolStack.coolingPipe.volume[2].pt_start = real_parameters[794];
    coolStack.subStack.cathode_channel.channel.p_start[3] = real_parameters[795];
    coolStack.subStack.anode_channel.channel.friction[4].n_channels = real_parameters[796];
    sinkCathode.T = real_parameters[797];
    flow_rate_an_variation.t_minScaled = real_parameters[798];
    coolStack.A_heat_cooling = real_parameters[799];
    coolStack.subStack.cell.electroOsmoticDrag.A_cell = real_parameters[800];
    coolStack.subStack.anode_channel.channel.friction[2].dp_smooth = real_parameters[801];
    coolStack.Dhyd_anode = real_parameters[802];
    V_cell_exp.shiftTime = real_parameters[803];
    p_an_variation.shiftTime = real_parameters[804];
    coolStack.subStack.cathode_channel.p_start[5] = real_parameters[805];
    coolStack.coolingPipe.volume[2].Tt_start = real_parameters[806];
    coolStack.subStack.EW_m = real_parameters[807];
    coolStack.coolingPipe.z[3] = real_parameters[808];
    coolStack.subStack.anode_channel.channel.Dhyd[1] = real_parameters[809];
    coolStack.subStack.anode_channel.channel.Dhyd[3] = real_parameters[810];
    V_cell_exp.t_minScaled = real_parameters[811];
    coolStack.subStack.anode_channel.n_channels = real_parameters[812];
    sinkP.pressureBoundary.fluidPort[1].X_outflow[1] = real_parameters[813];
    coolStack.subStack.anode_channel.dp_smooth = real_parameters[814];
    coolStack.coolingPipe.V_internal[2] = real_parameters[815];
    coolStack.subStack.anode_channel.channel.friction[4].dp_smooth = real_parameters[816];
    coolStack.subStack.anode_channel.channel.h_start_in = real_parameters[817];
    coolStack.coolingPipe.V[3] = real_parameters[818];
    coolStack.coolingPipe.Vtot = real_parameters[819];
    coolStack.subStack.anode_channel.channel.mflow_smooth = real_parameters[820];
    coolStack.subStack.cathode_channel.V = real_parameters[821];
    coolStack.subStack.cathode_channel.channel.friction[3].F_user = real_parameters[822];
    sinkAnode.pressureBoundary.T_set = real_parameters[823];
    coolStack.subStack.n_channels_anode = real_parameters[824];
    coolStack.coolingPipe.p_start_in = real_parameters[825];
    coolStack.subStack.cathode_channel.m_flow_start = real_parameters[826];
    coolStack.subStack.cell.waterContent.rho_dry_m = real_parameters[827];
    coolStack.coolingPipe.volume[2].ht_start = real_parameters[828];
    coolStack.h_start_cooling[5] = real_parameters[829];
    p_water_variation.t_minScaled = real_parameters[830];
    coolStack.subStack.anode_channel.channel.friction[4].A = real_parameters[831];
    coolStack.T_start_anode[5] = real_parameters[832];
    coolStack.A_cooling = real_parameters[833];
    coolStack.coolingPipe.T_start[1] = real_parameters[834];
    sourceW.massFlowBoundary.fluidPort.X_outflow[1] = real_parameters[835];
    coolStack.subStack.anode_channel.p_start[3] = real_parameters[836];
    coolStack.subStack.cathode_channel.channel.friction[4].m_flow0 = real_parameters[837];
    coolStack.coolingPipe.XB[1] = real_parameters[838];
    coolStack.subStack.anode_channel.channel.reaction.Zx_start[1] = real_parameters[839];
    coolStack.subStack.CF_CathodeSidePressureLoss = real_parameters[840];
    flowAnode.massFlowBoundary.T_set = real_parameters[841];
    coolStack.subStack.anode_channel.channel.htcoeff[5].Dhyd = real_parameters[842];
    coolStack.subStack.anode_channel.channel.reaction.Ztot_start = real_parameters[843];
    coolStack.subStack.anode_channel.channel.Dhyd[2] = real_parameters[844];
    sinkCathode.pressureBoundary.X[4] = real_parameters[845];
    coolStack.subStack.anode_channel.channel.V[1] = real_parameters[846];
    sourceW.massFlowBoundary.V_flow = real_parameters[847];
    coolStack.coolingPipe.friction.A[5] = real_parameters[848];
    coolStack.subStack.anode_channel.channel.htcoeff[4].A = real_parameters[849];
    coolStack.subStack.anode_channel.channel.p_start[6] = real_parameters[850];
    coolStack.coolingPipe.volume[1].pt_start = real_parameters[851];
    coolStack.subStack.anode_channel.channel.friction[1].L = real_parameters[852];
    coolStack.coolingPipe.friction.L[3] = real_parameters[853];
    coolStack.subStack.anode_channel.channel.friction[4].d0 = real_parameters[854];
    coolStack.subStack.cell.waterDiffusion.z = real_parameters[855];
    coolStack.coolingPipe.p_start[1] = real_parameters[856];
    dp_cath_variation.t_max = real_parameters[857];
    coolStack.T_start_cathode[2] = real_parameters[858];
    coolStack.subStack.anode_channel.channel.friction[1].Dhyd = real_parameters[859];
    coolStack.coolingPipe.htcoeff.A_heat[1] = real_parameters[860];
    coolStack.coolingPipe.volume[5].pt_start = real_parameters[861];
    humidification_cath.y_dry_in[1] = real_parameters[862];
    coolStack.subStack.cell.CF_N_gasDiffusion[4,1] = real_parameters[863];
    coolStack.subStack.T_start_anode[6] = real_parameters[864];
    ramp_m_flow_water.offset = real_parameters[865];
    coolStack.subStack.anode_channel.channel.A_heat[3] = real_parameters[866];
    coolStack.coolingPipe.volume[3].mX_start[1] = real_parameters[867];
    multiDisplaySensor1.portB.p = real_variables[1];
    coolStack.subStack.cell.anode[2].h_component[3] = real_variables[2];
    sinkAnode.fluidPort.X_outflow[2] = real_variables[3];
    coolStack.subStack.cell.E_act_cell[1] = real_variables[4];
    coolStack.subStack.anode_channel.channel.gas[2].X[3] = real_variables[5];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[4,2] = real_variables[6];
    coolStack.subStack.cell.P_cell[4] = real_variables[7];
    coolStack.subStack.cell.anode[2].p_bar = real_variables[8];
    display_phTmdot_cath_out.y.enthalpy = real_variables[9];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[4,3] = real_variables[10];
    coolStack.subStack.cathode_channel.channel.gas[5].h_component[5] = real_variables[11];
    flowAnode.fluidPort.m_flow = real_variables[12];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.T = real_variables[13];
    gasSensor1.portB.X_outflow[1] = real_variables[14];
    coolStack.subStack.cell.waterContent.lambda_an[2] = real_variables[15];
    coolStack.subStack.anode_channel.channel.gas[4].Xi[2] = real_variables[16];
    coolStack.subStack.cell.cathode[1].Xi[5] = real_variables[17];
    coolStack.coolingPipe.T_liq[5] = real_variables[18];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[5,4] = real_variables[19];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[3,4] = real_variables[20];
    coolStack.coolingPipe.h_vap[4] = real_variables[21];
    coolStack.subStack.anode_channel.channel.gas[2].h_component[3] = real_variables[22];
    coolStack.subStack.anode_channel.portA.X_outflow[2] = real_variables[23];
    coolStack.subStack.cell.electroOsmoticDrag.lambda[1] = real_variables[24];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[1,3] = real_variables[25];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_real[3] = real_variables[26];
    coolStack.subStack.anode_channel.channel.gas[5].u_comp[4] = real_variables[27];
    coolStack.coolingPipe.q_fluid[1].T = real_variables[28];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[3,2] = real_variables[29];
    coolStack.subStack.cell.anode[2].Xi[3] = real_variables[30];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.X[3] = real_variables[32];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[3,4] = real_variables[33];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[5,4] = real_variables[34];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA_out.X[1] = real_variables[35];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB_out.T = real_variables[36];
    coolStack.subStack.cell.cathode[5].h_component[4] = real_variables[37];
    coolStack.subStack.anode_channel.channel.gas[1].state.X[1] = real_variables[39];
    coolStack.subStack.cell.p_an_partial[5,2] = real_variables[40];
    flowCathode.massFlowBoundary.state.X[5] = real_variables[43];
    coolStack.subStack.cell.contaminantsLoss.pin_p[5].i = real_variables[44];
    coolStack.subStack.T_stack[2] = real_variables[46];
    coolStack.subStack.cell.anode[4].g_formation[4] = real_variables[47];
    coolStack.subStack.cathode_channel.channel.gas[3].h_component[2] = real_variables[48];
    coolStack.subStack.cell.activationLoss.pin_p[1].i = real_variables[50];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_inflow.X[4] = real_variables[51];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.p = real_variables[53];
    coolStack.coolingPipe.sat[2].lam_vap = real_variables[55];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[1,2] = real_variables[56];
    coolStack.subStack.cell.waterContent.p_cath_partial[4,1] = real_variables[57];
    coolStack.subStack.cell.anode[5].s_component[1] = real_variables[58];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[2,5] = real_variables[59];
    coolStack.subStack.cell.gasDiffusion.T_cell[1] = real_variables[61];
    coolStack.subStack.cathode_channel.channel.gas[2].s_component[3] = real_variables[62];
    sourceW.massFlowBoundary.fluidPort.h_outflow = real_variables[63];
    coolStack.subStack.cell.cathode[3].MM = real_variables[64];
    coolStack.coolingPipe.htcoeff.Re[2] = real_variables[65];
    coolStack.coolingPipe.sat[3].d_liq = real_variables[66];
    display_an_out.X_N2 = real_variables[67];
    coolStack.subStack.cathode_channel.channel.gas[2].h_component[5] = real_variables[69];
    coolStack.subStack.cathode_channel.summary.T_in = real_variables[70];
    humidification_an.y_wet_in[3] = real_variables[71];
    coolStack.coolingPipe.friction.sat[5].d_liq = real_variables[73];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.X[4] = real_variables[74];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB_out.X[2] = real_variables[76];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].Re = real_variables[77];
    coolStack.subStack.cell.anode[1].s_component[4] = real_variables[79];
    coolStack.coolingPipe.satB.x = real_variables[80];
    coolStack.subStack.anode_channel.port[5].X[2] = real_variables[81];
    coolStack.summary.T_cool[2] = real_variables[82];
    coolStack.subStack.cell.cathode[2].dUZT[5] = real_variables[83];
    coolStack.coolingPipe.htcoeff.sat[4].cp_liq = real_variables[84];
    coolStack.subStack.anode_channel.channel.reaction.y_out[5,1] = real_variables[86];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[4,1] = real_variables[87];
    coolStack.coolingPipe.htcoeff.eta[5] = real_variables[88];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[5,3] = real_variables[89];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[5,3] = real_variables[90];
    coolStack.subStack.cathode_channel.channel.gas[4].u_comp[5] = real_variables[91];
    coolStack.subStack.cathode_channel.channel.U[4] = real_variables[92];
    coolStack.coolingPipe.htcoeff.Pr[3] = real_variables[93];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.X[1] = real_variables[94];
    multiDisplaySensor1.multiDisplaySensor.portA.m_flow = real_variables[95];
    coolStack.subStack.anode_channel.channel.gas[5].p = real_variables[96];
    display_phTmdot_an_in.y.X[4] = real_variables[97];
    coolStack.coolingPipe.sat[3].cp_liq = real_variables[98];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[4,4] = real_variables[99];
    coolStack.subStack.cathode_channel.channel.p[3] = real_variables[100];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[1,5] = real_variables[101];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.X[1] = real_variables[102];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].cp = real_variables[105];
    coolStack.subStack.anode_channel.channel.portA[1].X_outflow[1] = real_variables[106];
    coolStack.subStack.cathode_channel.port[3].H_flow = real_variables[108];
    coolStack.coolingPipe.summary.d_in = real_variables[109];
    multiDisplaySensor1.portA.h_outflow = real_variables[111];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[3,2] = real_variables[112];
    coolStack.subStack.cell.anode[3].g_formation[2] = real_variables[113];
    flowCathode.X_in[3] = real_variables[114];
    coolStack.subStack.cell.cathode[1].dUZT[4] = real_variables[115];
    coolStack.subStack.cathode_channel.channel.gas[5].Xi[5] = real_variables[116];
    coolStack.subStack.cell.cathode[4].state.X[2] = real_variables[117];
    coolStack.subStack.cell.p_an_partial[2,3] = real_variables[118];
    coolStack.subStack.cathode_channel.channel.state[5].X[1] = real_variables[119];
    coolStack.subStack.cell.T_cell[1] = real_variables[120];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.X[4] = real_variables[122];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[1,4] = real_variables[123];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[5,2] = real_variables[124];
    flowAnode.massFlowBoundary.fluidPort.X_outflow[1] = real_variables[125];
    coolStack.subStack.cell.port_cath[1].X[3] = real_variables[128];
    display_phTmdot_an_out.y.temp = real_variables[129];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[2,4] = real_variables[130];
    coolStack.subStack.cell.concentrationLoss.j_ionic[5] = real_variables[131];
    coolStack.subStack.cell.cathode[1].dUZT[2] = real_variables[132];
    coolStack.subStack.cathode_channel.channel.state[3].X[3] = real_variables[133];
    coolStack.summary.T_cool[4] = real_variables[134];
    coolStack.subStack.cell.cathode[5].s_component[3] = real_variables[135];
    gasSensor3.portA.m_flow = real_variables[136];
    coolStack.subStack.cell.anode[1].dUZT[3] = real_variables[137];
    coolStack.subStack.cathode_channel.channel.portB[1].h_outflow = real_variables[138];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[2,3] = real_variables[139];
    coolStack.subStack.cathode_channel.channel.state[1].X[3] = real_variables[140];
    coolStack.subStack.cell.anode[5].state.p = real_variables[141];
    coolStack.subStack.cathode_channel.port[1].X[1] = real_variables[142];
    coolStack.coolingPipe.volume[2].Tt = real_variables[143];
    coolStack.subStack.cell.cathode[3].p_bar = real_variables[144];
    coolStack.feed_cath.X_outflow[3] = real_variables[147];
    coolStack.coolingPipe.friction.sat[2].x = real_variables[148];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[1,2] = real_variables[151];
    coolStack.subStack.cell.electroOsmoticDrag.T_an[4] = real_variables[152];
    coolStack.subStack.cell.anode[4].ddTp = real_variables[153];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[3,1] = real_variables[154];
    coolStack.subStack.cell.waterDiffusion.T_cell[5] = real_variables[155];
    coolStack.coolingPipe.friction.dp[5] = real_variables[156];
    coolStack.subStack.cell.anode[2].X[1] = real_variables[157];
    coolStack.subStack.cell.y_cath[4,1] = real_variables[158];
    coolStack.subStack.cell.ohmicLoss.pin_p[5].i = real_variables[160];
    coolStack.subStack.anode_channel.channel.gas[3].Z[3] = real_variables[161];
    coolStack.feed_an.X_outflow[3] = real_variables[164];
    coolStack.subStack.cell.waterDiffusion.T_an[5] = real_variables[165];
    coolStack.subStack.anode_channel.channel.gas[3].g_formation[1] = real_variables[166];
    coolStack.subStack.cathode_channel.channel.gas[2].dUZT[3] = real_variables[167];
    coolStack.subStack.cell.y_cath[1,3] = real_variables[168];
    coolStack.coolingPipe.htcoeff.eta[3] = real_variables[169];
    sinkAnode.pressureBoundary.X_in[1] = real_variables[170];
    display_cath_in.data.X_flow[4] = real_variables[171];
    coolStack.subStack.cathode_channel.channel.gas[4].state.X[4] = real_variables[172];
    coolStack.subStack.cell.wall_an[4].Q_flow = real_variables[173];
    coolStack.summary.T_stack[1] = real_variables[174];
    coolStack.subStack.cell.anode[2].s_component[3] = real_variables[175];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.X[3] = real_variables[176];
    coolStack.coolingPipe.htcoeff.sat[2].cp_liq = real_variables[177];
    coolStack.subStack.cell.wall_an[3].Q_flow = real_variables[178];
    coolStack.subStack.cell.waterContent.p_cath_partial[4,3] = real_variables[179];
    coolStack.subStack.cell.anode[3].u = real_variables[180];
    coolStack.subStack.cell.anode[5].T = real_variables[181];
    coolStack.subStack.anode_channel.port[3].X[3] = real_variables[182];
    coolStack.subStack.anode_channel.channel.gas[4].state.X[3] = real_variables[183];
    coolStack.subStack.anode_channel.channel.gas[3].h = real_variables[185];
    coolStack.subStack.cathode_channel.channel.p[2] = real_variables[186];
    coolStack.subStack.anode_channel.channel.gas[4].state.X[4] = real_variables[187];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB.X[1] = real_variables[188];
    gasSensor1.portB.X_outflow[5] = real_variables[189];
    coolStack.subStack.cathode_channel.channel.gas[4].g_formation[2] = real_variables[190];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.X[2] = real_variables[191];
    coolStack.subStack.cell.cathode[3].dUZT[3] = real_variables[194];
    coolStack.coolingPipe.q_fluid[4].T = real_variables[195];
    coolStack.subStack.cell.cathode[5].state.p = real_variables[196];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[5,5] = real_variables[197];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[3,1] = real_variables[198];
    coolStack.subStack.cathode_channel.channel.gas[4].ddx[2] = real_variables[199];
    coolStack.subStack.cathode_channel.channel.gas[5].p = real_variables[200];
    coolStack.subStack.cathode_channel.channel.state[3].X[2] = real_variables[201];
    multiDisplaySensor4.multiDisplaySensor.u.X_flow[1] = real_variables[202];
    coolStack.coolingPipe.htcoeff.sat[5].eta_liq = real_variables[203];
    coolStack.coolingPipe.htcoeff.k_1ph[3] = real_variables[204];
    coolStack.coolingPipe.volume[2].state.h = real_variables[205];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.X[4] = real_variables[206];
    coolStack.subStack.cell.P_cell[5] = real_variables[207];
    gasSensor4.state.X[3] = real_variables[208];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB.X[3] = real_variables[209];
    coolStack.coolingPipe.stateB_out.h = real_variables[210];
    coolStack.subStack.cell.anode[3].T_degC = real_variables[211];
    display_an_in.y[1] = real_variables[212];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[4,5] = real_variables[213];
    coolStack.subStack.anode_channel.channel.portB[1].X_outflow[2] = real_variables[214];
    coolStack.subStack.cell.cathode[1].h_component[3] = real_variables[215];
    coolStack.subStack.cell.waterContent.p_an_partial[4,1] = real_variables[216];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.T = real_variables[217];
    coolStack.coolingPipe.sat[3].x = real_variables[218];
    coolStack.subStack.cell.port_an[2].X[3] = real_variables[219];
    coolStack.subStack.wall[3].T = real_variables[220];
    coolStack.subStack.cell.cathode[4].Xi[5] = real_variables[223];
    coolStack.subStack.cell.cathode[4].ddpT = real_variables[224];
    coolStack.subStack.cathode_channel.channel.gas[2].h_component[2] = real_variables[225];
    coolStack.coolingPipe.sigma[5] = real_variables[226];
    coolStack.subStack.cell.sourceV[1].i = real_variables[227];
    coolStack.subStack.cell.waterContent.p_cath_partial[1,5] = real_variables[228];
    coolStack.subStack.cell.waterContent.T_cath[3] = real_variables[229];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[4,4] = real_variables[230];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[5,4] = real_variables[231];
    coolStack.subStack.cell.activationLoss.powerLoss_stack = real_variables[232];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[2,1] = real_variables[233];
    coolStack.subStack.cathode_channel.channel.q_fluid[4].T = real_variables[234];
    coolStack.subStack.cathode_channel.channel.gas[2].Z[5] = real_variables[235];
    coolStack.subStack.cell.gasDiffusion.T_cath[4] = real_variables[236];
    coolStack.subStack.anode_channel.channel.q_fluid[1].Q_flow = real_variables[237];
    coolStack.subStack.cell.cathode[2].h_component[1] = real_variables[238];
    coolStack.subStack.cathode_channel.channel.Q_extra[3] = real_variables[239];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.X[4] = real_variables[240];
    coolStack.coolingPipe.friction.d[6] = real_variables[241];
    dp_an_variation.y[1] = real_variables[242];
    coolStack.subStack.anode_channel.channel.gas[2].p_bar = real_variables[243];
    coolStack.subStack.cell.port_an[4].mX_flow[1] = real_variables[244];
    coolStack.subStack.cell.contaminantsLoss.y_an[4,4] = real_variables[245];
    coolStack.coolingPipe.state[5].p = real_variables[247];
    coolStack.subStack.anode_channel.channel.reaction.y_out[3,4] = real_variables[248];
    coolStack.subStack.cell.waterContent.lambda_an[4] = real_variables[249];
    coolStack.subStack.cell.anode[3].Z[2] = real_variables[250];
    coolStack.coolingPipe.T_liqA = real_variables[252];
    coolStack.subStack.cell.anode[5].u_comp[4] = real_variables[253];
    coolStack.subStack.anode_channel.channel.MX[2,1] = real_variables[254];
    gasSensor3.u.X_flow[3] = real_variables[255];
    coolStack.subStack.cell.anode[2].dUZT[2] = real_variables[256];
    coolStack.subStack.anode_channel.channel.portA[1].X_outflow[4] = real_variables[257];
    error.y = real_variables[258];
    gasSensor4.state.X[5] = real_variables[259];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[3,3] = real_variables[260];
    display_phTmdot_an_out.y.X_flow[1] = real_variables[261];
    coolStack.subStack.cathode_channel.port[5].X[2] = real_variables[262];
    coolStack.subStack.cell.activationLoss.E_loss_cell[3] = real_variables[263];
    coolStack.subStack.anode_channel.channel.gas[3].g_formation[2] = real_variables[265];
    coolStack.subStack.cell.y_cath[4,4] = real_variables[266];
    humidification_an.x_wet_in[3] = real_variables[267];
    coolStack.subStack.cell.anode[5].s_component[2] = real_variables[268];
    coolStack.coolingPipe.friction.sat[2].d_vap = real_variables[269];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.X[2] = real_variables[270];
    coolStack.subStack.anode_channel.port[4].X[3] = real_variables[271];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.X[3] = real_variables[272];
    coolStack.coolingPipe.htcoeff.sat[2].cp_vap = real_variables[273];
    coolStack.subStack.cell.T_cell[5] = real_variables[274];
    coolStack.subStack.cathode_channel.channel.dp[5] = real_variables[275];
    coolStack.subStack.cathode_channel.wall[1].T = real_variables[277];
    coolStack.subStack.cell.cathode[4].X[4] = real_variables[278];
    sinkCathode.pressureBoundary.state.T = real_variables[279];
    coolStack.subStack.cell.cathode[5].Xi[4] = real_variables[280];
    coolStack.subStack.anode_channel.channel.friction[3].dB = real_variables[281];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[1,2] = real_variables[282];
    coolStack.subStack.cathode_channel.channel.gas[3].s_component[3] = real_variables[283];
    coolStack.subStack.cell.cathode[5].X[1] = real_variables[284];
    coolStack.subStack.cell.anode[3].dUZT[2] = real_variables[285];
    coolStack.subStack.cell.anode[5].dUZT[4] = real_variables[286];
    coolStack.subStack.cathode_channel.channel.gas[3].ddTp = real_variables[288];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.X[4] = real_variables[290];
    coolStack.subStack.cathode_channel.channel.gas[4].dUZT[5] = real_variables[291];
    coolStack.subStack.cell.cathode[3].dUZT[1] = real_variables[293];
    coolStack.subStack.anode_channel.channel.gas[1].X[1] = real_variables[294];
    coolStack.subStack.cathode_channel.channel.gas[4].T = real_variables[296];
    multiDisplaySensor4.multiDisplaySensor.portA.m_flow = real_variables[297];
    gasSensor1.state.X[3] = real_variables[298];
    coolStack.subStack.anode_channel.channel.reaction.X_in[5,4] = real_variables[299];
    coolStack.subStack.anode_channel.channel.friction[5].dA = real_variables[300];
    coolStack.subStack.cell.waterContent.T_an[3] = real_variables[301];
    coolStack.coolingPipe.htcoeff.Q_s[2] = real_variables[302];
    coolStack.subStack.anode_channel.channel.reaction.T[1] = real_variables[303];
    coolStack.subStack.cell.anode[2].Z[2] = real_variables[304];
    coolStack.coolingPipe.htcoeff.Fr[4] = real_variables[305];
    sinkCathode.pressureBoundary.X_in[3] = real_variables[306];
    coolStack.subStack.cell.port_cath[5].mX_flow[3] = real_variables[307];
    coolStack.coolingPipe.hA = real_variables[308];
    coolStack.subStack.anode_channel.channel.sh[3] = real_variables[309];
    sinkAnode.pressureBoundary.state.X[4] = real_variables[310];
    flowCathode.massFlowBoundary.X_in[2] = real_variables[311];
    coolStack.subStack.anode_channel.channel.state[2].X[1] = real_variables[312];
    coolStack.coolingPipe.friction.sat[5].cp_liq = real_variables[313];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[3,3] = real_variables[314];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.X[1] = real_variables[315];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA_out.T = real_variables[316];
    gasSensor1.u.pressure = real_variables[317];
    coolStack.subStack.anode_channel.channel.gas[3].X[2] = real_variables[318];
    coolStack.coolingPipe.satB.eta_vap = real_variables[319];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[1,1] = real_variables[320];
    humidification_an.x_wet_in[4] = real_variables[321];
    coolStack.subStack.cell.Q_wall_cell[5] = real_variables[322];
    coolStack.subStack.cell.sourceV[4].n.i = real_variables[324];
    coolStack.subStack.anode_channel.channel.gas[3].h_component[2] = real_variables[325];
    coolStack.subStack.cathode_channel.channel.MX[4,4] = real_variables[326];
    coolStack.coolingPipe.friction.sat[3].lam_liq = real_variables[327];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[4,2] = real_variables[328];
    coolStack.subStack.cell.cathode[1].ddx[2] = real_variables[329];
    coolStack.subStack.cathode_channel.channel.gas[1].g_formation[2] = real_variables[330];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[5,4] = real_variables[331];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[5,4] = real_variables[332];
    gasSensor2.u.X_flow[4] = real_variables[333];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA.p = real_variables[334];
    coolStack.subStack.cell.X_cath[1,5] = real_variables[335];
    coolStack.subStack.anode_channel.channel.reaction.X_in[5,1] = real_variables[336];
    coolStack.subStack.cathode_channel.channel.state[1].X[2] = real_variables[338];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.X[4] = real_variables[339];
    coolStack.subStack.cell.anode[2].X[2] = real_variables[340];
    coolStack.subStack.feed_cathode.p = real_variables[341];
    coolStack.subStack.cell.anode[3].MM = real_variables[342];
    coolStack.subStack.cell.port_cath[1].mX_flow[5] = real_variables[343];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[2,1] = real_variables[344];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_inflow.X[3] = real_variables[345];
    gasSensor1.portB.m_flow = real_variables[346];
    gasSensor3.u.X_flow[4] = real_variables[347];
    coolStack.subStack.cell.cathode[5].Z[4] = real_variables[348];
    coolStack.subStack.cell.cathode[2].dUZT[2] = real_variables[349];
    gasSensor3.portA.X_outflow[1] = real_variables[350];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[2,3] = real_variables[351];
    coolStack.subStack.cell.anode[1].u_comp[2] = real_variables[352];
    flowAnode.massFlowBoundary.fluidPort.X_outflow[4] = real_variables[353];
    coolStack.subStack.cell.anode[3].state.X[4] = real_variables[354];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.X[3] = real_variables[355];
    coolStack.subStack.anode_channel.channel.gas[3].d = real_variables[356];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.X[4] = real_variables[359];
    display_phTmdot_w_out.p_bar = real_variables[360];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[5,3] = real_variables[361];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[4,1] = real_variables[362];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA.p = real_variables[364];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[2,1] = real_variables[365];
    coolStack.subStack.anode_channel.channel.reaction.Zx[1,3] = real_variables[366];
    coolStack.subStack.summary.m_flow_cath = real_variables[367];
    coolStack.subStack.cell.cathode[2].u = real_variables[368];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB_out.X[4] = real_variables[369];
    coolStack.subStack.cathode_channel.channel.MX[4,3] = real_variables[370];
    gasSensor1.u.mdot = real_variables[372];
    coolStack.coolingPipe.T[2] = real_variables[373];
    multiDisplaySensor1.u.pressure = real_variables[374];
    coolStack.subStack.cell.X_an[2,2] = real_variables[375];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[1,3] = real_variables[376];
    coolStack.subStack.cell.ohmicLoss.ASR[5] = real_variables[377];
    coolStack.subStack.anode_channel.channel.gas[3].X[4] = real_variables[378];
    coolStack.subStack.anode_channel.summary.h_in = real_variables[379];
    coolStack.subStack.feed_anode.p = real_variables[380];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_outflow.T = real_variables[381];
    coolStack.subStack.cathode_channel.channel.portA[1].h_outflow = real_variables[382];
    flowAnode.fluidPort.p = real_variables[383];
    coolStack.subStack.cathode_channel.channel.gas[2].ddpT = real_variables[384];
    coolStack.subStack.cell.port_an[2].p = real_variables[385];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[1,2] = real_variables[386];
    coolStack.subStack.cell.P_stack = real_variables[387];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_inflow.X[3] = real_variables[388];
    coolStack.subStack.cathode_channel.channel.TA = real_variables[389];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[3,3] = real_variables[391];
    coolStack.subStack.cell.anode[1].X[4] = real_variables[392];
    coolStack.coolingPipe.sat[4].lam_liq = real_variables[393];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[4,4] = real_variables[394];
    coolStack.subStack.cell.activationLoss.E_loss_stack[3] = real_variables[396];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_inflow.X[2] = real_variables[397];
    coolStack.subStack.cathode_channel.channel.reaction.a[1] = real_variables[398];
    coolStack.subStack.cathode_channel.channel.gas[3].dUZT[4] = real_variables[399];
    coolStack.coolingPipe.dA_out = real_variables[400];
    coolStack.subStack.cathode_channel.channel.state[7].X[4] = real_variables[401];
    coolStack.subStack.cell.waterContent.p_cath_partial[3,5] = real_variables[402];
    coolStack.subStack.wall[4].Q_flow = real_variables[403];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[3,3] = real_variables[404];
    coolStack.summary.dp_cooling = real_variables[405];
    coolStack.coolingPipe.dp_internal[4] = real_variables[406];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[2,1] = real_variables[407];
    coolStack.subStack.anode_channel.channel.MX[4,4] = real_variables[409];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[5,5] = real_variables[410];
    coolStack.subStack.cell.contaminantsLoss.T_cell[5] = real_variables[411];
    gain.u = real_variables[412];
    coolStack.subStack.cathode_channel.channel.MX[5,1] = real_variables[413];
    coolStack.subStack.cell.cathode[5].state.X[4] = real_variables[414];
    coolStack.subStack.cell.anode[5].ddx[2] = real_variables[415];
    coolStack.subStack.cathode_channel.channel.gas[4].X[4] = real_variables[416];
    coolStack.subStack.cell.waterDiffusion.m_flow[3] = real_variables[417];
    coolStack.subStack.cell.p_cath_partial[5,3] = real_variables[419];
    coolStack.subStack.cell.cathode[1].u_comp[2] = real_variables[420];
    coolStack.coolingPipe.friction.twoPhaseFraction[5] = real_variables[421];
    coolStack.subStack.cell.anode[5].ddx[3] = real_variables[422];
    coolStack.subStack.cell.contaminantsLoss.y_an[2,3] = real_variables[423];
    coolStack.subStack.cathode_channel.channel.MX[3,3] = real_variables[424];
    coolStack.subStack.cathode_channel.channel.gas[2].dUZT[1] = real_variables[425];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.X[1] = real_variables[426];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[3,2] = real_variables[427];
    gasSensor1.u.X_flow[5] = real_variables[428];
    coolStack.subStack.cell.cathode[3].dUZT[2] = real_variables[429];
    coolStack.subStack.anode_channel.channel.state[7].X[4] = real_variables[431];
    sinkCathode.pressureBoundary.fluidPort[1].X_outflow[1] = real_variables[432];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[1,1] = real_variables[434];
    coolStack.subStack.anode_channel.channel.gas[3].state.T = real_variables[435];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[2,2] = real_variables[436];
    coolStack.subStack.anode_channel.channel.gas[5].dUZT[4] = real_variables[437];
    coolStack.subStack.anode_channel.channel.reaction.y_out[5,4] = real_variables[438];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[5,4] = real_variables[439];
    coolStack.coolingPipe.volume[5].T_in = real_variables[440];
    coolStack.subStack.drain_cathode.X_outflow[3] = real_variables[441];
    coolStack.subStack.cathode_channel.channel.friction[1].dB = real_variables[442];
    coolStack.subStack.cell.ohmicLoss.T_cell[1] = real_variables[443];
    coolStack.coolingPipe.friction.m_flow[5] = real_variables[444];
    coolStack.subStack.cathode_channel.port[5].mX_flow[5] = real_variables[445];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_real[1] = real_variables[446];
    coolStack.subStack.cathode_channel.channel.gas[3].Xi[3] = real_variables[447];
    coolStack.subStack.cell.waterContent.f_w[5] = real_variables[448];
    display_an_out.data.X_flow[3] = real_variables[449];
    coolStack.subStack.cell.waterContent.lambda_cath[2] = real_variables[450];
    coolStack.subStack.cell.port_cath[1].X[1] = real_variables[451];
    coolStack.subStack.cathode_channel.channel.gas[4].dUZT[3] = real_variables[452];
    coolStack.subStack.cell.anode[5].X[1] = real_variables[453];
    coolStack.subStack.cathode_channel.channel.gas[5].s_component[2] = real_variables[454];
    coolStack.subStack.cell.ohmicLoss.pin_n[4].v = real_variables[455];
    coolStack.subStack.anode_channel.channel.gas[5].Z[1] = real_variables[456];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.T = real_variables[459];
    coolStack.subStack.cathode_channel.channel.Q_extra[4] = real_variables[460];
    coolStack.subStack.cathode_channel.channel.gas[2].s_component[4] = real_variables[461];
    coolStack.subStack.cathode_channel.port[4].X[3] = real_variables[462];
    display_an_out.data.X[4] = real_variables[463];
    coolStack.coolingPipe.volume[4].dE = real_variables[464];
    flowCathode.massFlowBoundary.p = real_variables[465];
    coolStack.subStack.anode_channel.channel.reaction.y_out[1,1] = real_variables[466];
    coolStack.coolingPipe.htcoeff.twoPhaseFraction[2] = real_variables[467];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.X[4] = real_variables[468];
    coolStack.subStack.anode_channel.channel.MX[2,3] = real_variables[469];
    coolStack.subStack.anode_channel.channel.friction[2].dA = real_variables[470];
    coolStack.subStack.cell.cathode[1].dUZT[3] = real_variables[471];
    coolStack.coolingPipe.htcoeff.lam[1] = real_variables[472];
    coolStack.subStack.cell.cathode[2].u_comp[2] = real_variables[473];
    coolStack.subStack.cell.waterContent.T_cath[4] = real_variables[474];
    coolStack.subStack.anode_channel.channel.gas[1].Z[3] = real_variables[475];
    display_cath_in.data.X[3] = real_variables[476];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[2,3] = real_variables[477];
    coolStack.subStack.cell.cathode[1].g_formation[2] = real_variables[479];
    coolStack.subStack.cell.cathode[1].Rg = real_variables[480];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.X[5] = real_variables[481];
    coolStack.subStack.cathode_channel.channel.gas[2].g_formation[4] = real_variables[482];
    coolStack.subStack.cell.Q_wall_cell[2] = real_variables[483];
    coolStack.subStack.cell.anode[1].state.T = real_variables[484];
    coolStack.coolingPipe.dp[3] = real_variables[486];
    coolStack.subStack.cell.cathode[1].s_component[4] = real_variables[488];
    coolStack.subStack.cell.ohmicLoss.E_loss_cell[2] = real_variables[489];
    coolStack.subStack.cell.anode[3].d = real_variables[490];
    gasSensor1.portB.X_outflow[3] = real_variables[492];
    coolStack.subStack.cell.h_conv_cath[1] = real_variables[493];
    coolStack.X_feed_cath[3] = real_variables[494];
    coolStack.subStack.anode_channel.channel.gas[3].Xi[4] = real_variables[495];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[4,4] = real_variables[496];
    coolStack.coolingPipe.volume[5].ht = real_variables[497];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[2,5] = real_variables[498];
    coolStack.subStack.anode_channel.channel.htcoeff[3].Pr = real_variables[499];
    coolStack.coolingPipe.satA.lam_vap = real_variables[500];
    coolStack.subStack.cell.cathode[3].g_formation[3] = real_variables[501];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[4,2] = real_variables[502];
    coolStack.subStack.cell.cathode[4].dUZT[2] = real_variables[503];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[5,1] = real_variables[504];
    coolStack.subStack.cell.ohmicLoss.powerLoss_stack = real_variables[505];
    humidification_cath.y_wet_in[2] = real_variables[507];
    gasSensor1.u.X[1] = real_variables[508];
    coolStack.subStack.anode_channel.channel.MX[5,2] = real_variables[509];
    coolStack.subStack.cell.cathode[5].g_formation[5] = real_variables[511];
    coolStack.subStack.anode_channel.channel.portA[1].m_flow = real_variables[512];
    coolStack.coolingPipe.htcoeff.Fr[1] = real_variables[513];
    coolStack.subStack.anode_channel.channel.gas[2].s_component[3] = real_variables[514];
    coolStack.subStack.anode_channel.channel.reaction.y_out[2,1] = real_variables[515];
    coolStack.subStack.anode_channel.channel.MX[4,3] = real_variables[516];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].alphaA = real_variables[517];
    coolStack.subStack.anode_channel.channel.gas[1].Z[2] = real_variables[518];
    coolStack.subStack.cathode_channel.channel.gas[2].X[2] = real_variables[519];
    display_phTmdot_an_in.p_bar = real_variables[520];
    coolStack.subStack.cell.p_cath[1] = real_variables[521];
    coolStack.subStack.anode_channel.channel.friction[3].dp = real_variables[522];
    coolStack.subStack.cell.contaminantsLoss.y_an[4,1] = real_variables[523];
    coolStack.coolingPipe.summary.T_in = real_variables[524];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.X[3] = real_variables[525];
    coolStack.subStack.drain_cathode.X_outflow[2] = real_variables[526];
    coolStack.subStack.cell.y_cath[5,1] = real_variables[527];
    coolStack.subStack.cell.cathode[5].Rg = real_variables[528];
    coolStack.subStack.anode_channel.portA.h_outflow = real_variables[529];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[5,2] = real_variables[530];
    coolStack.subStack.anode_channel.channel.Q[3] = real_variables[531];
    coolStack.coolingPipe.friction.dp[3] = real_variables[533];
    coolStack.subStack.anode_channel.wall[3].T = real_variables[534];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[4,3] = real_variables[535];
    coolStack.subStack.cell.anode[1].u_comp[3] = real_variables[536];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[5,4] = real_variables[537];
    coolStack.subStack.cell.ohmicLoss.lambda_mean[2] = real_variables[538];
    coolStack.subStack.cell.anode[4].g_formation[2] = real_variables[539];
    display_phTmdot_w_in.y.temp = real_variables[540];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].Nu = real_variables[541];
    coolStack.subStack.cathode_channel.channel.gas[4].Xi[1] = real_variables[542];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[2,1] = real_variables[543];
    coolStack.subStack.anode_channel.channel.gas[3].h_component[4] = real_variables[544];
    display_j.showNumber = real_variables[545];
    coolStack.subStack.cell.waterContent.p_an_partial[4,3] = real_variables[546];
    coolStack.subStack.cathode_channel.channel.gas[5].ddx[5] = real_variables[547];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[1,2] = real_variables[548];
    coolStack.subStack.cathode_channel.channel.gas[5].g_formation[5] = real_variables[549];
    coolStack.subStack.cell.port_cath[3].p = real_variables[550];
    coolStack.subStack.anode_channel.channel.gas[1].g_formation[1] = real_variables[552];
    coolStack.subStack.cell.cathode[2].h_component[4] = real_variables[555];
    coolStack.coolingPipe.eta[5] = real_variables[556];
    coolStack.subStack.cell.cathode[5].g_formation[1] = real_variables[557];
    coolStack.subStack.anode_channel.channel.gas[1].g_formation[3] = real_variables[558];
    coolStack.subStack.cell.waterContent.a_cath_H2O[1] = real_variables[559];
    coolStack.subStack.cell.y_an[1,2] = real_variables[560];
    coolStack.coolingPipe.sat[1].lam_liq = real_variables[561];
    coolStack.subStack.cathode_channel.channel.gas[3].ddx[1] = real_variables[563];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[1,3] = real_variables[564];
    coolStack.subStack.cathode_channel.channel.gas[1].cp = real_variables[565];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.X[2] = real_variables[566];
    coolStack.subStack.anode_channel.channel.friction[1].dB = real_variables[567];
    coolStack.subStack.cell.cathode[5].MM = real_variables[568];
    coolStack.subStack.cell.waterDiffusion.T_an[4] = real_variables[570];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.X[4] = real_variables[571];
    coolStack.subStack.anode_channel.checkEnergyBalance = real_variables[573];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.p = real_variables[574];
    coolStack.coolingPipe.volume[1].state.p = real_variables[575];
    coolStack.subStack.cell.anode[5].h_component[4] = real_variables[576];
    coolStack.subStack.cell.E_act_cell[3] = real_variables[578];
    coolStack.subStack.cell.p_an_partial[2,1] = real_variables[579];
    flowCathode.fluidPort.X_outflow[3] = real_variables[580];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.X[1] = real_variables[581];
    sourceW.massFlowBoundary.state.p = real_variables[582];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.T = real_variables[583];
    coolStack.subStack.anode_channel.channel.portB[1].X_outflow[3] = real_variables[584];
    gasSensor1.portB.h_outflow = real_variables[585];
    coolStack.subStack.cathode_channel.channel.TB = real_variables[587];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB.X[2] = real_variables[588];
    coolStack.subStack.cathode_channel.channel.gas[1].state.X[2] = real_variables[589];
    gasSensor3.portB.m_flow = real_variables[590];
    coolStack.coolingPipe.volume[1].p = real_variables[591];
    display_cath_out.data.X[2] = real_variables[592];
    coolStack.subStack.cell.cathode[2].state.X[1] = real_variables[594];
    coolStack.subStack.X_feed_cath[1] = real_variables[595];
    coolStack.subStack.anode_channel.channel.gas[3].state.p = real_variables[596];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_rescaled[4] = real_variables[597];
    coolStack.subStack.cell.cathode[5].s_component[2] = real_variables[598];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.p = real_variables[599];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.X[1] = real_variables[601];
    coolStack.subStack.anode_channel.channel.gas[5].s_component[1] = real_variables[602];
    coolStack.subStack.cell.ohmicLoss.pin_p[4].v = real_variables[603];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.p = real_variables[604];
    coolStack.subStack.cell.electroOsmoticDrag.T_cell[3] = real_variables[605];
    coolStack.subStack.cell.y_cath[1,5] = real_variables[607];
    sinkAnode.pressureBoundary.fluidPort[1].X_outflow[2] = real_variables[608];
    coolStack.coolingPipe.mflow_B_in = real_variables[609];
    coolStack.subStack.cell.concentrationLoss.pin_p[1].v = real_variables[610];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[5,1] = real_variables[611];
    coolStack.subStack.anode_channel.channel.gas[2].state.X[4] = real_variables[612];
    coolStack.subStack.cathode_channel.channel.gas[3].Rg = real_variables[613];
    coolStack.coolingPipe.T_liq_out = real_variables[614];
    coolStack.subStack.cell.ohmicLoss.E_loss_cell[5] = real_variables[615];
    coolStack.subStack.cell.waterContent.p_cath_partial[3,4] = real_variables[616];
    coolStack.subStack.anode_channel.channel.reaction.Zx[5,1] = real_variables[617];
    coolStack.subStack.anode_channel.channel.gas[1].h_component[3] = real_variables[618];
    coolStack.subStack.anode_channel.wall[5].T = real_variables[619];
    variable_load.i = real_variables[621];
    coolStack.subStack.cathode_channel.port[4].m_flow = real_variables[622];
    coolStack.subStack.anode_channel.portA.p = real_variables[623];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[4,1] = real_variables[624];
    coolStack.subStack.cell.dTdt[3] = real_variables[625];
    coolStack.coolingPipe.M[4] = real_variables[626];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB.X[1] = real_variables[627];
    coolStack.subStack.cathode_channel.channel.gas[3].dUZT[5] = real_variables[628];
    coolStack.subStack.cell.dUdt = real_variables[629];
    p_cath_out.u2 = real_variables[630];
    coolStack.subStack.cell.gasDiffusion.lambda[1] = real_variables[631];
    coolStack.subStack.cell.Q_wall_an_cell[4] = real_variables[633];
    coolStack.subStack.cell.E_ohm_cell[1] = real_variables[634];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.T = real_variables[635];
    coolStack.subStack.cell.sourceV[5].i = real_variables[637];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_outflow.X[3] = real_variables[638];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[5,5] = real_variables[639];
    coolStack.subStack.cell.ohmicLoss.lambda_mean[1] = real_variables[640];
    coolStack.coolingPipe.p_sat[3] = real_variables[641];
    coolStack.coolingPipe.volume[2].T_in = real_variables[642];
    gasSensor1.u.X[5] = real_variables[643];
    coolStack.subStack.cell.waterContent.p_an_partial[5,4] = real_variables[644];
    coolStack.subStack.cathode_channel.channel.gas[5].ddpT = real_variables[645];
    coolStack.subStack.anode_channel.channel.gas[5].h_component[4] = real_variables[646];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[4,4] = real_variables[647];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_inflow.X[2] = real_variables[648];
    display_phTmdot_cath_out.h_kJ = real_variables[649];
    coolStack.coolingPipe.friction.sigma[3] = real_variables[650];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].Nu = real_variables[651];
    coolStack.subStack.cell.cathode[2].s_component[5] = real_variables[652];
    coolStack.subStack.cathode_channel.channel.summary.dp = real_variables[653];
    coolStack.subStack.anode_channel.channel.gas[5].d = real_variables[654];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[2,2] = real_variables[655];
    coolStack.subStack.cell.anode[2].g_formation[4] = real_variables[656];
    coolStack.subStack.cell.ohmicLoss.I[1] = real_variables[657];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[1,4] = real_variables[658];
    display_phTmdot_cath_out.y.X_flow[5] = real_variables[659];
    coolStack.subStack.cell.anode[1].g_formation[4] = real_variables[660];
    coolStack.subStack.cell.activationLoss.pin_p[2].i = real_variables[661];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_inflow.T = real_variables[662];
    coolStack.subStack.cathode_channel.channel.gas[2].Xi[4] = real_variables[663];
    coolStack.coolingPipe.htcoeff.Re[3] = real_variables[664];
    coolStack.subStack.cell.anode[2].duTp = real_variables[665];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].Nu = real_variables[666];
    humidification_an.x_wet_in[2] = real_variables[667];
    coolStack.subStack.anode_channel.channel.reaction.X_in[3,1] = real_variables[668];
    gasSensor1.state.X[1] = real_variables[669];
    coolStack.subStack.cathode_channel.channel.gas[2].X[5] = real_variables[670];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[1,3] = real_variables[671];
    coolStack.subStack.drain_cathode.X_outflow[5] = real_variables[672];
    coolStack.subStack.anode_channel.channel.reaction.Zx[1,2] = real_variables[673];
    coolStack.coolingPipe.htcoeff.sat[2].d_vap = real_variables[674];
    coolStack.coolingPipe.satA.lam_liq = real_variables[675];
    coolStack.subStack.cathode_channel.channel.gas[4].cp = real_variables[678];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_inflow.X[1] = real_variables[679];
    coolStack.subStack.cell.contaminantsLoss.y_an[4,3] = real_variables[681];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[2,3] = real_variables[682];
    coolStack.subStack.anode_channel.channel.friction[2].m_flow = real_variables[683];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].alphaA = real_variables[684];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[4,4] = real_variables[685];
    display_phTmdot_cath_in.y.X[3] = real_variables[686];
    coolStack.subStack.cell.cathode[2].u_comp[5] = real_variables[687];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[3,5] = real_variables[688];
    coolStack.coolingPipe.sat[1].d_vap = real_variables[689];
    coolStack.subStack.cell.p_an[1] = real_variables[690];
    coolStack.subStack.cell.port_an[1].p = real_variables[691];
    coolStack.coolingPipe.stateA_out.p = real_variables[692];
    coolStack.coolingPipe.friction.twoPhaseFraction[4] = real_variables[694];
    coolStack.coolingPipe.state[4].h = real_variables[695];
    flow_rate_an_variation.y[1] = real_variables[696];
    coolStack.coolingPipe.satB.lam_liq = real_variables[697];
    sinkCathode.pressureBoundary.p_in = real_variables[698];
    coolStack.subStack.anode_channel.port[4].mX_flow[2] = real_variables[699];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_inflow.X[2] = real_variables[700];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[3,1] = real_variables[702];
    display_phTmdot_an_in.y.enthalpy = real_variables[703];
    coolStack.subStack.cell.sourceV[2].i = real_variables[704];
    coolStack.subStack.cell.anode[1].s_component[3] = real_variables[705];
    coolStack.subStack.cathode_channel.channel.portB[1].X_outflow[5] = real_variables[706];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB.X[2] = real_variables[707];
    coolStack.subStack.anode_channel.channel.reaction.X_out[5,3] = real_variables[708];
    multiDisplaySensor1.u.temp = real_variables[709];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_inflow.p = real_variables[710];
    coolStack.coolingPipe.sat[5].d_liq = real_variables[711];
    gasSensor2.portA.m_flow = real_variables[712];
    coolStack.coolingPipe.htcoeff.T[3] = real_variables[713];
    coolStack.subStack.cathode_channel.channel.gas[4].X[2] = real_variables[714];
    coolStack.subStack.cell.waterDiffusion.lambda_cath[4] = real_variables[716];
    coolStack.subStack.anode_channel.portB.X_outflow[4] = real_variables[717];
    coolStack.subStack.feed_anode.m_flow = real_variables[718];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[3,1] = real_variables[719];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[1,1] = real_variables[720];
    sinkP.pressureBoundary.X_port[1,1] = real_variables[721];
    coolStack.subStack.cathode_channel.channel.reaction.Ztot[5] = real_variables[723];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[4,4] = real_variables[724];
    coolStack.drain_an.X_outflow[4] = real_variables[725];
    coolStack.coolingPipe.sh[5] = real_variables[726];
    coolStack.subStack.anode_channel.channel.gas[1].ddx[3] = real_variables[727];
    coolStack.subStack.cell.p_an_partial[3,1] = real_variables[729];
    coolStack.subStack.cell.anode[1].u_comp[1] = real_variables[730];
    coolStack.subStack.anode_channel.port[2].H_flow = real_variables[731];
    display_cath_in.X_H2O = real_variables[732];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_inflow.p = real_variables[733];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[1,5] = real_variables[734];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[3,3] = real_variables[735];
    gasSensor3.u.X[4] = real_variables[736];
    coolStack.subStack.cathode_channel.port[3].X[1] = real_variables[737];
    coolStack.subStack.cell.X_an[3,4] = real_variables[738];
    coolStack.coolingPipe.friction.sat[3].eta_liq = real_variables[739];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[5,3] = real_variables[741];
    coolStack.coolingPipe.T_fluid[5] = real_variables[742];
    gasSensor1.portA.h_outflow = real_variables[743];
    coolStack.subStack.cell.port_an[1].H_flow = real_variables[744];
    coolStack.subStack.cell.ohmicLoss.pin_n[1].i = real_variables[745];
    coolStack.subStack.cell.p_cath_partial[4,3] = real_variables[746];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.X[1] = real_variables[747];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.T = real_variables[748];
    coolStack.subStack.cell.waterContent.p_an_partial[5,3] = real_variables[749];
    coolStack.subStack.cell.port_an[4].X[2] = real_variables[750];
    coolStack.subStack.cell.port_an[5].m_flow = real_variables[751];
    coolStack.subStack.cell.X_cath[1,3] = real_variables[752];
    coolStack.subStack.anode_channel.channel.gas[5].Z[4] = real_variables[753];
    coolStack.subStack.cell.electroOsmoticDrag.T_cath[2] = real_variables[754];
    coolStack.subStack.cell.X_cath[3,2] = real_variables[756];
    coolStack.subStack.cell.cathode[5].g_formation[4] = real_variables[757];
    coolStack.summary.T_stack[3] = real_variables[758];
    coolStack.subStack.cell.cathode[5].dUZT[1] = real_variables[759];
    coolStack.subStack.cathode_channel.channel.gas[1].ddx[3] = real_variables[760];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_real[2] = real_variables[761];
    coolStack.subStack.feed_cathode.X_outflow[2] = real_variables[762];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[4,4] = real_variables[763];
    coolStack.subStack.h_inflow_cath = real_variables[767];
    display_an_out.data.mdot = real_variables[769];
    coolStack.subStack.cell.waterDiffusion.lambda_cath[2] = real_variables[770];
    display_phTmdot_cath_out.y.temp = real_variables[772];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_outflow.X[1] = real_variables[773];
    coolStack.subStack.cell.p_cath_partial[5,4] = real_variables[774];
    gasSensor3.portB.p = real_variables[775];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_outflow.X[2] = real_variables[776];
    coolStack.subStack.cathode_channel.channel.gas[4].X[1] = real_variables[777];
    coolStack.subStack.cathode_channel.channel.MX[1,2] = real_variables[778];
    humidification_cath.m_flow_dry_in = real_variables[780];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[5,3] = real_variables[781];
    display_phTmdot_an_in.y.X_flow[2] = real_variables[782];
    coolStack.subStack.cell.cathode[1].X[5] = real_variables[783];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_outflow.X[3] = real_variables[784];
    coolStack.subStack.anode_channel.port[5].H_flow = real_variables[785];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[3,5] = real_variables[787];
    coolStack.subStack.cell.cathode[1].X[1] = real_variables[789];
    coolStack.subStack.anode_channel.channel.gas[2].dUZT[3] = real_variables[790];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[5,5] = real_variables[791];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[4,4] = real_variables[795];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_outflow.X[2] = real_variables[796];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA.X[1] = real_variables[797];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[1,4] = real_variables[798];
    coolStack.subStack.cell.anode[3].Xi[3] = real_variables[799];
    coolStack.subStack.cathode_channel.port[1].p = real_variables[800];
    display_cath_in.data.X_flow[3] = real_variables[801];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB_out.X[4] = real_variables[802];
    coolStack.coolingPipe.volume[4].ht = real_variables[803];
    coolStack.subStack.anode_channel.channel.gas[2].u_comp[1] = real_variables[804];
    coolStack.subStack.cell.ohmicLoss.pin_n[5].v = real_variables[805];
    coolStack.subStack.cell.Q_wall_cell[1] = real_variables[806];
    coolStack.subStack.cathode_channel.channel.gas[4].ddx[4] = real_variables[807];
    coolStack.subStack.cell.concentrationLoss.E_loss_cell[2] = real_variables[808];
    coolStack.subStack.cell.anode[2].u_comp[2] = real_variables[809];
    coolStack.coolingPipe.dp_internal[2] = real_variables[811];
    coolStack.subStack.anode_channel.channel.gas[4].h_component[3] = real_variables[812];
    coolStack.subStack.cell.cathode[5].state.X[5] = real_variables[813];
    coolStack.subStack.cathode_channel.channel.gas[5].X[2] = real_variables[814];
    coolStack.subStack.cathode_channel.channel.gas[5].u_comp[2] = real_variables[815];
    flowAnode.massFlowBoundary.fluidPort.p = real_variables[816];
    coolStack.subStack.cell.cathode[2].state.X[3] = real_variables[817];
    coolStack.subStack.cell.mX_flow_cath_reac[3,3] = real_variables[818];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_inflow.T = real_variables[819];
    coolStack.subStack.anode_channel.channel.gas[2].p = real_variables[821];
    gasSensor3.u.pressure = real_variables[822];
    coolStack.subStack.cell.Q_wall_an_stack = real_variables[823];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[2,5] = real_variables[824];
    coolStack.coolingPipe.Re[4] = real_variables[825];
    coolStack.subStack.cell.electroOsmoticDrag.n_eod[1] = real_variables[826];
    coolStack.subStack.feed_anode.X_outflow[3] = real_variables[827];
    coolStack.subStack.anode_channel.wall[4].T = real_variables[829];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.X[1] = real_variables[830];
    coolStack.subStack.cell.anode[4].duTp = real_variables[831];
    coolStack.subStack.cell.anode[1].Rg = real_variables[832];
    coolStack.summary.P_stack = real_variables[833];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB_out.X[4] = real_variables[834];
    coolStack.subStack.cell.cathode[5].ddx[1] = real_variables[836];
    coolStack.coolingPipe.Q[4] = real_variables[837];
    coolStack.coolingPipe.h_liqB = real_variables[839];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.p = real_variables[840];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[2,1] = real_variables[841];
    coolStack.subStack.cell.anode[3].Rg = real_variables[842];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[5,2] = real_variables[843];
    coolStack.subStack.cell.cathode[4].state.T = real_variables[844];
    coolStack.subStack.cell.cathode[1].dUZT[1] = real_variables[845];
    coolStack.h_inflow_cath = real_variables[846];
    coolStack.subStack.cathode_channel.channel.gas[3].X[3] = real_variables[847];
    coolStack.subStack.anode_channel.channel.reaction.X_in[1,1] = real_variables[848];
    gasSensor4.portB.X_outflow[1] = real_variables[849];
    multiDisplaySensor1.multiDisplaySensor.portA.p = real_variables[850];
    sourceW.massFlowBoundary.p = real_variables[852];
    coolStack.subStack.cell.activationLoss.T_cell[3] = real_variables[854];
    relative_error.showNumber = real_variables[856];
    coolStack.coolingPipe.htcoeff.m_flow[5] = real_variables[857];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB_out.X[1] = real_variables[858];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.X[3] = real_variables[860];
    coolStack.coolingPipe.M[3] = real_variables[861];
    coolStack.subStack.cell.gasDiffusion.T_cell[5] = real_variables[862];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[4,3] = real_variables[863];
    coolStack.subStack.cathode_channel.channel.gas[3].Z[4] = real_variables[864];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[1,5] = real_variables[865];
    coolStack.subStack.cathode_channel.port[3].mX_flow[3] = real_variables[866];
    coolStack.subStack.cell.concentrationLoss.E_loss_cell[4] = real_variables[867];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA_out.X[1] = real_variables[868];
    coolStack.subStack.summary.cathode_stoich = real_variables[869];
    gasSensor4.state.X[2] = real_variables[870];
    coolStack.subStack.anode_channel.channel.reaction.p[3] = real_variables[872];
    coolStack.subStack.cathode_channel.channel.state[2].X[4] = real_variables[874];
    coolStack.subStack.anode_channel.channel.reaction.Ztot[5] = real_variables[875];
    coolStack.subStack.anode_channel.channel.reaction.MM[1] = real_variables[876];
    coolStack.subStack.cathode_channel.channel.gas[4].Z[5] = real_variables[878];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA_out.X[3] = real_variables[879];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.p = real_variables[880];
    coolStack.coolingPipe.cp[2] = real_variables[881];
    coolStack.coolingPipe.friction.sat[3].lam_vap = real_variables[882];
    coolStack.subStack.cell.anode[4].s_component[2] = real_variables[883];
    sinkAnode.fluidPort.m_flow = real_variables[884];
    coolStack.subStack.cathode_channel.channel.dp[6] = real_variables[885];
    coolStack.subStack.anode_channel.channel.gas[2].ddx[2] = real_variables[886];
    display_cath_in.y[5] = real_variables[887];
    coolStack.coolingPipe.Re_liq[1] = real_variables[888];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB_out.X[2] = real_variables[889];
    coolStack.subStack.anode_channel.channel.gas[1].h_component[4] = real_variables[890];
    coolStack.coolingPipe.volume[5].u = real_variables[891];
    gasSensor2.u.X_flow[1] = real_variables[892];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.X[2] = real_variables[893];
    coolStack.subStack.anode_channel.port[3].mX_flow[1] = real_variables[895];
    coolStack.subStack.cell.Q_wall_cath_cell[1] = real_variables[896];
    coolStack.subStack.cell.mX_flow_an_reac[1,1] = real_variables[897];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[3,4] = real_variables[898];
    coolStack.coolingPipe.htcoeff.sat[5].cp_liq = real_variables[899];
    coolStack.subStack.cathode_channel.channel.gas[5].ddx[4] = real_variables[900];
    coolStack.subStack.cell.port_an[2].mX_flow[2] = real_variables[901];
    coolStack.subStack.feed_anode.X_outflow[1] = real_variables[902];
    coolStack.subStack.cathode_channel.channel.Q_fluid[5] = real_variables[903];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].Re = real_variables[904];
    coolStack.subStack.cell.cathode[4].Z[1] = real_variables[905];
    coolStack.subStack.anode_channel.channel.friction[5].dB = real_variables[906];
    coolStack.subStack.cell.port_an[5].X[3] = real_variables[907];
    coolStack.subStack.anode_channel.channel.gas[1].s_component[3] = real_variables[908];
    coolStack.subStack.cell.cathode[3].u_comp[4] = real_variables[910];
    coolStack.subStack.cathode_channel.channel.state[6].X[1] = real_variables[912];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_inflow.T = real_variables[913];
    coolStack.subStack.cathode_channel.channel.reaction.MM[4] = real_variables[914];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[2,4] = real_variables[915];
    coolStack.subStack.anode_channel.channel.reaction.X_out[5,4] = real_variables[916];
    flowAnode.massFlowBoundary.state.X[4] = real_variables[917];
    coolStack.subStack.cell.cathode[5].u_comp[1] = real_variables[918];
    coolStack.subStack.cell.wall[4].T = real_variables[919];
    humidification_cath.x_wet_in[3] = real_variables[920];
    coolStack.subStack.cell.gasDiffusion.f_w[3] = real_variables[921];
    coolStack.subStack.cell.anode[5].h_component[3] = real_variables[922];
    variable_load.n.i = real_variables[923];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[1,3] = real_variables[924];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[3,1] = real_variables[925];
    coolStack.subStack.cathode_channel.port[5].X[5] = real_variables[926];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[5,4] = real_variables[927];
    coolStack.subStack.cell.anode[1].u_comp[4] = real_variables[928];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[2,3] = real_variables[931];
    coolStack.subStack.cell.anode[2].d = real_variables[932];
    coolStack.subStack.cell.E0_cell[3] = real_variables[934];
    coolStack.subStack.cell.cathode[5].dUZT[5] = real_variables[935];
    coolStack.subStack.anode_channel.channel.gas[3].dUZT[2] = real_variables[936];
    multiDisplaySensor4.multiDisplaySensor.state.p = real_variables[937];
    coolStack.subStack.cell.cathode[1].h_component[2] = real_variables[938];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.X[2] = real_variables[939];
    coolStack.subStack.cell.X_an[5,2] = real_variables[940];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[4,5] = real_variables[941];
    coolStack.subStack.cell.anode[1].X[3] = real_variables[942];
    coolStack.coolingPipe.h_liq[2] = real_variables[943];
    coolStack.coolingPipe.volume[3].u = real_variables[944];
    coolStack.subStack.cell.cathode[3].Z[3] = real_variables[945];
    coolStack.subStack.cell.cathode[4].dUZT[4] = real_variables[946];
    coolStack.subStack.cathode_channel.channel.reaction.p[4] = real_variables[947];
    coolStack.subStack.anode_channel.channel.state[3].X[2] = real_variables[948];
    coolStack.subStack.cell.y_cath[2,1] = real_variables[949];
    coolStack.subStack.feed_cathode.X_outflow[3] = real_variables[950];
    coolStack.coolingPipe.T_vap[3] = real_variables[951];
    coolStack.subStack.anode_channel.channel.gas[5].dUZT[2] = real_variables[953];
    coolStack.subStack.cell.y_cath[5,5] = real_variables[954];
    coolStack.subStack.anode_channel.channel.gas[2].Xi[1] = real_variables[955];
    coolStack.subStack.cathode_channel.channel.gas[3].state.p = real_variables[956];
    coolStack.coolingPipe.friction.sat[6].cp_vap = real_variables[957];
    coolStack.subStack.drain_cathode.p = real_variables[958];
    coolStack.subStack.cathode_channel.channel.gas[3].u_comp[3] = real_variables[959];
    gasSensor4.portA.p = real_variables[960];
    coolStack.coolingPipe.volume[1].ddph = real_variables[961];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_outflow.X[1] = real_variables[962];
    coolStack.subStack.T_stack[3] = real_variables[963];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_outflow.T = real_variables[964];
    sinkCathode.pressureBoundary.X_in[1] = real_variables[965];
    coolStack.subStack.cathode_channel.channel.gas[4].s_component[4] = real_variables[966];
    coolStack.subStack.cathode_channel.channel.Q[4] = real_variables[967];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[5,4] = real_variables[968];
    coolStack.coolingPipe.friction.dp[2] = real_variables[969];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[2,5] = real_variables[970];
    sinkCathode.fluidPort.m_flow = real_variables[971];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[5,5] = real_variables[972];
    coolStack.coolingPipe.friction.sat[5].lam_liq = real_variables[973];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_inflow.T = real_variables[974];
    coolStack.subStack.cell.cathode[3].T = real_variables[975];
    gasSensor3.u.X[3] = real_variables[977];
    coolStack.coolingPipe.volume[4].M = real_variables[978];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[2,4] = real_variables[979];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.p = real_variables[980];
    coolStack.subStack.anode_channel.wall[5].Q_flow = real_variables[981];
    humidification_an.x_wet_in[1] = real_variables[982];
    coolStack.subStack.anode_channel.channel.gas[4].T = real_variables[983];
    display_I.showNumber = real_variables[984];
    gasSensor2.portA.h_outflow = real_variables[985];
    coolStack.subStack.cell.contaminantsLoss.T_cell[4] = real_variables[986];
    coolStack.subStack.cell.cathode[3].ddTp = real_variables[989];
    coolStack.subStack.cell.contaminantsLoss.pin_p[1].i = real_variables[990];
    multiDisplaySensor4.u.X[1] = real_variables[991];
    coolStack.subStack.cell.P_cell[1] = real_variables[992];
    coolStack.subStack.cell.Q_cell[1] = real_variables[993];
    coolStack.subStack.anode_channel.channel.gas[3].g_formation[3] = real_variables[994];
    coolStack.h_inflow_an = real_variables[995];
    coolStack.subStack.cell.p_cath_partial[4,2] = real_variables[996];
    coolStack.subStack.cell.cathode[4].ddx[2] = real_variables[997];
    coolStack.subStack.anode_channel.channel.gas[1].dUZT[3] = real_variables[998];
    gasSensor2.portB.X_outflow[4] = real_variables[999];
    coolStack.subStack.anode_channel.channel.summary.h_out = real_variables[1000];
    coolStack.subStack.pin_p.i = real_variables[1001];
    coolStack.subStack.anode_channel.channel.state[1].X[3] = real_variables[1002];
    coolStack.subStack.cell.anode[2].p = real_variables[1003];
    sinkCathode.pressureBoundary.m_flow[1] = real_variables[1004];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[3,3] = real_variables[1005];
    coolStack.subStack.anode_channel.channel.rMX[3,2] = real_variables[1006];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.X[5] = real_variables[1007];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[3,2] = real_variables[1008];
    coolStack.subStack.cathode_channel.channel.gas[5].h_component[4] = real_variables[1009];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_outflow.X[3] = real_variables[1010];
    coolStack.subStack.cell.port_cath[1].p = real_variables[1011];
    coolStack.subStack.cathode_channel.channel.gas[5].Rg = real_variables[1012];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[4,5] = real_variables[1013];
    coolStack.coolingPipe.friction.sat[2].lam_vap = real_variables[1014];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.T = real_variables[1015];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[3,4] = real_variables[1016];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA.X[1] = real_variables[1017];
    coolStack.subStack.cell.y_an[5,3] = real_variables[1019];
    coolStack.subStack.cell.anode[2].g_formation[1] = real_variables[1021];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_outflow.T = real_variables[1022];
    coolStack.subStack.anode_channel.channel.MX[3,2] = real_variables[1023];
    coolStack.subStack.cell.cathode[1].p_bar = real_variables[1025];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA_out.p = real_variables[1026];
    display_phTmdot_cath_out.y.X_flow[1] = real_variables[1027];
    coolStack.subStack.cathode_channel.channel.gas[4].g_formation[1] = real_variables[1028];
    variable_load.p.i = real_variables[1029];
    coolStack.coolingPipe.htcoeff.sat[1].d_liq = real_variables[1030];
    gasSensor1.u.X[4] = real_variables[1031];
    coolStack.subStack.cathode_channel.channel.M[3] = real_variables[1032];
    coolStack.subStack.cell.anode[4].g_formation[1] = real_variables[1034];
    coolStack.subStack.cell.gasDiffusion.T_an[3] = real_variables[1035];
    coolStack.subStack.anode_channel.wall[1].T = real_variables[1036];
    coolStack.subStack.cell.anode[1].h_component[3] = real_variables[1037];
    coolStack.coolingPipe.q_fluid[2].T = real_variables[1038];
    coolStack.subStack.cell.wall_an[5].Q_flow = real_variables[1039];
    coolStack.coolingPipe.friction.sat[5].cp_vap = real_variables[1040];
    coolStack.coolingPipe.twoPhaseFraction_def[2] = real_variables[1042];
    coolStack.subStack.cell.anode[1].state.X[4] = real_variables[1043];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.X[3] = real_variables[1044];
    coolStack.subStack.cathode_channel.channel.portB[1].X_outflow[2] = real_variables[1045];
    coolStack.subStack.cell.cathode[1].MM = real_variables[1046];
    coolStack.subStack.cell.T_cath[4] = real_variables[1047];
    display_phTmdot_an_out.y.X[4] = real_variables[1048];
    coolStack.subStack.cell.T_an[4] = real_variables[1049];
    coolStack.subStack.cathode_channel.channel.gas[5].state.X[3] = real_variables[1050];
    display_cath_out.data.mdot = real_variables[1051];
    coolStack.coolingPipe.htcoeff.sat[3].eta_vap = real_variables[1052];
    coolStack.subStack.cell.waterContent.p_cath_partial[3,2] = real_variables[1053];
    coolStack.subStack.anode_channel.channel.gas[4].ddx[3] = real_variables[1055];
    coolStack.subStack.cell.cathode[5].dUZT[2] = real_variables[1056];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_rescaled[2] = real_variables[1057];
    coolStack.subStack.cell.anode[2].h_component[4] = real_variables[1058];
    coolStack.subStack.cell.cathode[3].h_component[2] = real_variables[1059];
    coolStack.subStack.cell.cathode[1].T_degC = real_variables[1060];
    coolStack.coolingPipe.htcoeff.cp[1] = real_variables[1061];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA.X[4] = real_variables[1062];
    coolStack.coolingPipe.volume[3].ddph = real_variables[1063];
    coolStack.subStack.cell.port_an[5].mX_flow[2] = real_variables[1064];
    coolStack.subStack.cathode_channel.summary.d_in = real_variables[1065];
    display_cath_in.X_N2 = real_variables[1066];
    coolStack.coolingPipe.volume[4].T_in = real_variables[1067];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_inflow.X[4] = real_variables[1068];
    coolStack.subStack.anode_channel.channel.gas[1].state.p = real_variables[1069];
    display_phTmdot_an_in.mdot = real_variables[1070];
    coolStack.subStack.cell.X_cath[2,2] = real_variables[1071];
    display_an_out.X_H2O = real_variables[1072];
    coolStack.subStack.cell.cathode[4].u_comp[3] = real_variables[1073];
    coolStack.coolingPipe.friction.sigma[4] = real_variables[1074];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_outflow.T = real_variables[1075];
    coolStack.subStack.anode_channel.channel.MX[5,3] = real_variables[1076];
    coolStack.subStack.cathode_channel.channel.gas[3].s_component[1] = real_variables[1077];
    coolStack.subStack.cell.cathode[4].Z[5] = real_variables[1078];
    display_cath_in.data.temp = real_variables[1079];
    coolStack.subStack.cell.Voc_stack[4].y = real_variables[1081];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.T = real_variables[1082];
    coolStack.coolingPipe.Re[5] = real_variables[1083];
    coolStack.subStack.cell.mX_flow_cath_reac[4,3] = real_variables[1084];
    coolStack.subStack.cell.electroOsmoticDrag.lambda[3] = real_variables[1085];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.X[2] = real_variables[1086];
    coolStack.subStack.anode_channel.channel.reaction.a[4] = real_variables[1087];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.X[5] = real_variables[1088];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[5,1] = real_variables[1089];
    coolStack.subStack.cell.cathode[2].ddx[2] = real_variables[1091];
    coolStack.summary.Q_stack = real_variables[1092];
    coolStack.subStack.cell.wall_an[2].T = real_variables[1093];
    coolStack.coolingPipe.sat[4].cp_vap = real_variables[1094];
    coolStack.subStack.cell.anode[5].ddTp = real_variables[1095];
    coolStack.subStack.cell.waterDiffusion.D_diff[5] = real_variables[1096];
    coolStack.subStack.cathode_channel.channel.state[2].X[3] = real_variables[1097];
    coolStack.subStack.cell.cathode[5].u_comp[2] = real_variables[1098];
    coolStack.subStack.cell.port_cath[2].X[3] = real_variables[1099];
    coolStack.coolingPipe.sigmaA = real_variables[1100];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA_out.X[3] = real_variables[1101];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[5,3] = real_variables[1102];
    coolStack.subStack.anode_channel.channel.reaction.X_in[2,2] = real_variables[1103];
    coolStack.subStack.anode_channel.channel.U[3] = real_variables[1104];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[4,1] = real_variables[1105];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[4,3] = real_variables[1107];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[2,3] = real_variables[1108];
    coolStack.subStack.anode_channel.channel.gas[5].state.X[3] = real_variables[1109];
    coolStack.subStack.cell.waterContent.p_cath_partial[3,1] = real_variables[1111];
    coolStack.subStack.cell.P_cell[3] = real_variables[1112];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].Nu = real_variables[1113];
    display_an_out.data.X_flow[4] = real_variables[1114];
    coolStack.subStack.cell.T_cell[3] = real_variables[1115];
    coolStack.subStack.anode_channel.summary.m_flow = real_variables[1116];
    coolStack.X_feed_an[2] = real_variables[1117];
    coolStack.subStack.cathode_channel.channel.gas[4].h_component[2] = real_variables[1118];
    coolStack.subStack.cathode_channel.channel.reaction.Ztot[3] = real_variables[1119];
    coolStack.subStack.cathode_channel.channel.alpha[3] = real_variables[1121];
    coolStack.subStack.cell.ohmicLoss.I[4] = real_variables[1122];
    coolStack.subStack.cathode_channel.channel.gas[1].MM = real_variables[1124];
    coolStack.coolingPipe.volume[5].state.h = real_variables[1125];
    coolStack.subStack.cathode_channel.channel.gas[4].h_component[3] = real_variables[1128];
    coolStack.subStack.cathode_channel.channel.state[5].T = real_variables[1130];
    coolStack.subStack.cell.activationLoss.T_cell[5] = real_variables[1131];
    gasSensor1.u.X[3] = real_variables[1132];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[2,2] = real_variables[1133];
    p_an_out.u1 = real_variables[1134];
    coolStack.subStack.cathode_channel.channel.gas[3].duTp = real_variables[1135];
    coolStack.subStack.feed_cathode.X_outflow[4] = real_variables[1136];
    coolStack.subStack.cell.Voc_stack[5].y = real_variables[1137];
    coolStack.subStack.anode_channel.channel.reaction.y_out[4,3] = real_variables[1138];
    coolStack.subStack.cell.ohmicLoss.pin_p[3].v = real_variables[1139];
    coolStack.subStack.cell.y_an[5,1] = real_variables[1140];
    coolStack.subStack.cathode_channel.channel.q_fluid[4].Q_flow = real_variables[1141];
    coolStack.subStack.cell.port_cath[5].X[2] = real_variables[1142];
    coolStack.subStack.cell.anode[3].ddTp = real_variables[1143];
    coolStack.subStack.anode_channel.channel.gas[1].Z[1] = real_variables[1145];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_inflow.T = real_variables[1146];
    coolStack.subStack.cathode_channel.channel.sh[3] = real_variables[1147];
    coolStack.subStack.drain_anode.h_outflow = real_variables[1148];
    coolStack.subStack.anode_channel.channel.gas[1].ddx[4] = real_variables[1149];
    coolStack.subStack.cathode_channel.channel.gas[1].state.X[4] = real_variables[1150];
    coolStack.coolingPipe.volume[4].h = real_variables[1151];
    display_an_out.data.temp = real_variables[1152];
    coolStack.subStack.cathode_channel.channel.gas[2].T = real_variables[1153];
    coolStack.subStack.cathode_channel.channel.gas[2].u_comp[5] = real_variables[1154];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[3,4] = real_variables[1155];
    coolStack.subStack.summary.T_stack[4] = real_variables[1156];
    sinkCathode.X_in[1] = real_variables[1157];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[2,2] = real_variables[1158];
    coolStack.subStack.cell.electroOsmoticDrag.n_eod[3] = real_variables[1159];
    coolStack.coolingPipe.volume[4].p = real_variables[1160];
    sinkAnode.pressureBoundary.state.T = real_variables[1161];
    coolStack.subStack.anode_channel.channel.gas[3].state.X[4] = real_variables[1162];
    coolStack.subStack.summary.dp_anode = real_variables[1163];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[4,5] = real_variables[1164];
    coolStack.subStack.cell.anode[4].u = real_variables[1165];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_outflow.p = real_variables[1166];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.X[5] = real_variables[1167];
    coolStack.subStack.cell.cathode[4].X[2] = real_variables[1168];
    coolStack.coolingPipe.htcoeff.sat[3].d_vap = real_variables[1169];
    coolStack.subStack.cell.cathode[3].ddpT = real_variables[1170];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.X[5] = real_variables[1171];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[1,2] = real_variables[1172];
    coolStack.subStack.cathode_channel.channel.reaction.a[5] = real_variables[1173];
    coolStack.subStack.anode_channel.channel.gas[5].ddx[3] = real_variables[1174];
    coolStack.subStack.cell.cathode[3].Xi[1] = real_variables[1175];
    coolStack.coolingPipe.p_red[5] = real_variables[1177];
    coolStack.summary.dp_cathode = real_variables[1178];
    display_cath_out.data.X_flow[3] = real_variables[1179];
    coolStack.subStack.cell.contaminantsLoss.y_an[5,1] = real_variables[1180];
    humidification_an.p_in = real_variables[1181];
    variable_load.p.v = real_variables[1182];
    coolStack.subStack.cathode_channel.channel.q_fluid[3].T = real_variables[1183];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_outflow.X[2] = real_variables[1185];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA.p = real_variables[1186];
    coolStack.coolingPipe.friction.eta[6] = real_variables[1187];
    coolStack.subStack.anode_channel.channel.reaction.X_in[2,4] = real_variables[1188];
    coolStack.subStack.cell.mX_flow_cath_reac[3,5] = real_variables[1189];
    coolStack.subStack.anode_channel.channel.dp[6] = real_variables[1190];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[3,3] = real_variables[1191];
    coolStack.coolingPipe.state[6].p = real_variables[1192];
    coolStack.subStack.anode_channel.port[1].h = real_variables[1194];
    coolStack.subStack.anode_channel.channel.htcoeff[1].cp = real_variables[1195];
    coolStack.subStack.cell.ohmicLoss.I[3] = real_variables[1196];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA.T = real_variables[1199];
    coolStack.subStack.cathode_channel.channel.gas[2].Xi[1] = real_variables[1200];
    coolStack.subStack.cathode_channel.channel.portB[1].p = real_variables[1202];
    coolStack.subStack.cell.cathode[3].h = real_variables[1203];
    coolStack.subStack.cathode_channel.channel.gas[4].u_comp[4] = real_variables[1204];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[5,3] = real_variables[1205];
    coolStack.subStack.cell.anode[1].Xi[2] = real_variables[1206];
    coolStack.subStack.anode_channel.channel.portB[1].h_outflow = real_variables[1207];
    coolStack.subStack.cell.cathode[5].ddx[2] = real_variables[1208];
    coolStack.subStack.X_feed_an[1] = real_variables[1209];
    display_phTmdot_w_in.y.pressure = real_variables[1210];
    coolStack.coolingPipe.volume[5].dE = real_variables[1211];
    flowAnode.X_in[4] = real_variables[1212];
    display_phTmdot_cath_in.T_degC = real_variables[1214];
    coolStack.subStack.cell.electroOsmoticDrag.m_flow[5] = real_variables[1215];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[1,1] = real_variables[1216];
    humidification_cath.y_wet_in[1] = real_variables[1218];
    coolStack.subStack.cell.ohmicLoss.I[5] = real_variables[1219];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[2,4] = real_variables[1220];
    coolStack.coolingPipe.htcoeff.Nu_1ph[1] = real_variables[1221];
    coolStack.subStack.cell.anode[2].state.X[1] = real_variables[1222];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.X[3] = real_variables[1223];
    display_cath_out.y[1] = real_variables[1225];
    coolStack.subStack.cell.anode[1].g_formation[3] = real_variables[1226];
    display_an_out.X_H2 = real_variables[1227];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[1,4] = real_variables[1228];
    coolStack.subStack.anode_channel.channel.gas[1].u_comp[4] = real_variables[1229];
    coolStack.subStack.cell.cathode[4].T = real_variables[1230];
    coolStack.subStack.cell.anode[2].T_degC = real_variables[1231];
    coolStack.subStack.cell.electroOsmoticDrag.T_an[5] = real_variables[1232];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA.T = real_variables[1233];
    display_cath_out.X_N2 = real_variables[1234];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[2,3] = real_variables[1235];
    sinkCathode.pressureBoundary.h_port[1] = real_variables[1236];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[4,1] = real_variables[1237];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[1,2] = real_variables[1240];
    coolStack.coolingPipe.summary.M = real_variables[1241];
    coolStack.subStack.anode_channel.channel.reaction.y_out[5,2] = real_variables[1242];
    coolStack.subStack.anode_channel.channel.gas[2].Z[4] = real_variables[1244];
    coolStack.subStack.anode_channel.channel.reaction.T[4] = real_variables[1245];
    coolStack.subStack.cell.y_cath[5,3] = real_variables[1246];
    coolStack.subStack.cell.cathode[3].ddx[2] = real_variables[1247];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA_out.X[1] = real_variables[1248];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[5,3] = real_variables[1249];
    coolStack.coolingPipe.Fr[4] = real_variables[1251];
    coolStack.subStack.cathode_channel.channel.gas[3].p_bar = real_variables[1253];
    coolStack.coolingPipe.volume[4].dMX[1] = real_variables[1255];
    coolStack.coolingPipe.alpha[4] = real_variables[1256];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA_out.X[4] = real_variables[1257];
    coolStack.subStack.cathode_channel.channel.gas[2].u_comp[1] = real_variables[1258];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[4,1] = real_variables[1259];
    coolStack.subStack.cell.activationLoss.E_loss_cell[4] = real_variables[1260];
    coolStack.subStack.cell.wall_cath[2].T = real_variables[1261];
    coolStack.subStack.anode_channel.channel.Q[2] = real_variables[1262];
    coolStack.subStack.pin_n.i = real_variables[1263];
    gasSensor2.u.pressure = real_variables[1264];
    display_phTmdot_an_out.y.pressure = real_variables[1265];
    coolStack.subStack.anode_channel.channel.state[5].p = real_variables[1266];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.X[2] = real_variables[1268];
    coolStack.subStack.cell.ohmicLoss.pin_p[2].v = real_variables[1269];
    coolStack.subStack.cell.p_cath_partial[3,3] = real_variables[1270];
    coolStack.subStack.anode_channel.channel.gas[1].Xi[3] = real_variables[1271];
    coolStack.subStack.cell.sourceV[1].p.i = real_variables[1272];
    coolStack.subStack.cell.cathode[2].X[3] = real_variables[1273];
    coolStack.subStack.cell.cathode[4].Z[3] = real_variables[1275];
    coolStack.subStack.cell.sourceV[5].p.v = real_variables[1276];
    coolStack.subStack.cell.anode[4].ddx[2] = real_variables[1277];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[5,4] = real_variables[1278];
    coolStack.subStack.cell.wall[5].Q_flow = real_variables[1279];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.X[2] = real_variables[1280];
    coolStack.subStack.cathode_channel.channel.state[6].X[3] = real_variables[1281];
    coolStack.subStack.cathode_channel.channel.reaction.Ztot[2] = real_variables[1282];
    coolStack.subStack.cathode_channel.portA.m_flow = real_variables[1283];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].eta = real_variables[1284];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[5,3] = real_variables[1285];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[3,3] = real_variables[1286];
    coolStack.subStack.cathode_channel.channel.state[7].X[2] = real_variables[1288];
    coolStack.feed_cath.X_outflow[2] = real_variables[1289];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA_out.X[1] = real_variables[1291];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[4,5] = real_variables[1292];
    display_cath_out.y[2] = real_variables[1293];
    coolStack.subStack.anode_channel.channel.q_fluid[4].T = real_variables[1294];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_outflow.X[4] = real_variables[1295];
    coolStack.subStack.anode_channel.channel.gas[5].ddx[1] = real_variables[1296];
    coolStack.subStack.cell.y_cath[3,1] = real_variables[1297];
    coolStack.subStack.cell.waterDiffusion.T_cell[2] = real_variables[1298];
    coolStack.coolingPipe.friction.sat[1].lam_liq = real_variables[1299];
    coolStack.coolingPipe.friction.sat[4].x = real_variables[1300];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.p = real_variables[1301];
    coolStack.coolingPipe.satA.cp_vap = real_variables[1302];
    coolStack.subStack.anode_channel.channel.gas[2].u = real_variables[1303];
    coolStack.subStack.cell.sourceV[4].n.v = real_variables[1304];
    coolStack.subStack.cell.dTdt[1] = real_variables[1305];
    coolStack.coolingPipe.satB.cp_vap = real_variables[1306];
    variable_load.v = real_variables[1307];
    coolStack.subStack.cathode_channel.port[4].mX_flow[3] = real_variables[1308];
    coolStack.subStack.cell.port_an[1].X[2] = real_variables[1309];
    coolStack.subStack.cathode_channel.channel.gas[3].g_formation[3] = real_variables[1310];
    coolStack.subStack.anode_channel.channel.q_fluid[2].T = real_variables[1311];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[5,4] = real_variables[1312];
    coolStack.coolingPipe.satA.d_liq = real_variables[1313];
    coolStack.subStack.cathode_channel.summary.h_out = real_variables[1314];
    coolStack.subStack.cathode_channel.channel.gas[4].dUZT[4] = real_variables[1315];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.X[2] = real_variables[1316];
    coolStack.subStack.cathode_channel.channel.p[5] = real_variables[1317];
    coolStack.subStack.cathode_channel.channel.gas[5].h_component[3] = real_variables[1318];
    coolStack.subStack.anode_channel.channel.gas[2].dUZT[4] = real_variables[1319];
    coolStack.subStack.cell.h_conv_an[5] = real_variables[1320];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_outflow.X[4] = real_variables[1322];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_real[5] = real_variables[1323];
    coolStack.subStack.cathode_channel.portB.X_outflow[5] = real_variables[1324];
    coolStack.coolingPipe.twoPhaseFraction[2] = real_variables[1325];
    coolStack.subStack.cell.cathode[4].MM = real_variables[1326];
    coolStack.subStack.anode_channel.channel.reaction.X_out[4,2] = real_variables[1327];
    coolStack.subStack.cell.anode[3].state.T = real_variables[1328];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].cp = real_variables[1329];
    coolStack.subStack.cathode_channel.channel.state[3].T = real_variables[1330];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.X[1] = real_variables[1331];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB.T = real_variables[1332];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[5,1] = real_variables[1333];
    coolStack.subStack.anode_channel.channel.Q_extra[3] = real_variables[1334];
    coolStack.subStack.cell.wall_an[4].T = real_variables[1335];
    coolStack.subStack.anode_channel.channel.p[5] = real_variables[1336];
    coolStack.coolingPipe.sat[2].cp_liq = real_variables[1337];
    coolStack.subStack.cathode_channel.channel.gas[3].T_degC = real_variables[1339];
    gasSensor4.u.X[4] = real_variables[1340];
    sinkP.p_in = real_variables[1341];
    coolStack.subStack.cathode_channel.channel.Q_fluid[2] = real_variables[1342];
    gasSensor3.u.mdot = real_variables[1344];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[5,3] = real_variables[1345];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.X[1] = real_variables[1346];
    coolStack.subStack.anode_channel.channel.rMX[4,1] = real_variables[1347];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[2,4] = real_variables[1348];
    coolStack.subStack.cell.cathode[1].d = real_variables[1349];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[2,2] = real_variables[1350];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.X[1] = real_variables[1351];
    coolStack.subStack.cell.anode[5].duTp = real_variables[1352];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[5,2] = real_variables[1353];
    coolStack.subStack.cathode_channel.channel.MX[2,3] = real_variables[1354];
    coolStack.coolingPipe.q[1].T = real_variables[1355];
    coolStack.subStack.anode_channel.channel.reaction.y_out[2,4] = real_variables[1356];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.X[5] = real_variables[1357];
    p_water_out.u1 = real_variables[1358];
    coolStack.subStack.cell.anode[3].h_component[3] = real_variables[1359];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.p = real_variables[1360];
    coolStack.subStack.cell.port_cath[2].mX_flow[3] = real_variables[1361];
    coolStack.subStack.cell.cathode[3].cp = real_variables[1363];
    coolStack.subStack.cell.wall_an[2].Q_flow = real_variables[1364];
    coolStack.summary.j_external = real_variables[1365];
    coolStack.subStack.cell.E_act_cell[4] = real_variables[1366];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.T = real_variables[1368];
    coolStack.subStack.cell.mX_flow_an_reac[5,1] = real_variables[1370];
    coolStack.coolingPipe.sat[3].cp_vap = real_variables[1371];
    coolStack.coolingPipe.v[1] = real_variables[1373];
    coolStack.subStack.anode_channel.port[2].m_flow = real_variables[1374];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[5,2] = real_variables[1375];
    multiDisplaySensor4.u.temp = real_variables[1376];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[2,3] = real_variables[1377];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[3,2] = real_variables[1378];
    coolStack.subStack.cathode_channel.channel.MX[2,1] = real_variables[1379];
    coolStack.coolingPipe.T_wall[2] = real_variables[1380];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB_out.X[1] = real_variables[1381];
    coolStack.subStack.cell.cathode[4].h_component[4] = real_variables[1382];
    coolStack.coolingPipe.sat[4].d_vap = real_variables[1383];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[2,3] = real_variables[1384];
    coolStack.subStack.anode_channel.channel.gas[5].ddx[4] = real_variables[1385];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].cp = real_variables[1386];
    coolStack.subStack.cathode_channel.channel.state[7].X[3] = real_variables[1387];
    coolStack.subStack.cell.port_cath[5].X[1] = real_variables[1388];
    coolStack.coolingPipe.M[5] = real_variables[1389];
    coolStack.subStack.pin_p.v = real_variables[1390];
    coolStack.subStack.drain_anode.X_outflow[2] = real_variables[1391];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[2,4] = real_variables[1392];
    coolStack.subStack.cell.cathode[3].Z[4] = real_variables[1393];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.p = real_variables[1394];
    coolStack.subStack.cell.concentrationLoss.E_loss_cell[5] = real_variables[1396];
    display_an_out.y[2] = real_variables[1397];
    coolStack.subStack.cell.anode[1].s_component[2] = real_variables[1398];
    coolStack.subStack.cell.anode[5].Rg = real_variables[1399];
    coolStack.coolingPipe.volume[1].T = real_variables[1400];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[5,1] = real_variables[1401];
    coolStack.subStack.cell.cathode[3].Z[2] = real_variables[1402];
    coolStack.subStack.cell.wall[1].Q_flow = real_variables[1403];
    coolStack.subStack.cell.ohmicLoss.pin_p[1].v = real_variables[1404];
    coolStack.subStack.cell.cathode[3].s_component[5] = real_variables[1405];
    coolStack.subStack.cell.cathode[1].ddTp = real_variables[1406];
    sinkAnode.fluidPort.X_outflow[4] = real_variables[1408];
    flowAnode.fluidPort.X_outflow[1] = real_variables[1409];
    display_cath_in.data.pressure = real_variables[1410];
    coolStack.subStack.cathode_channel.channel.MX[1,5] = real_variables[1411];
    coolStack.subStack.cell.anode[4].h_component[1] = real_variables[1412];
    coolStack.subStack.anode_channel.channel.state[6].T = real_variables[1413];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.X[4] = real_variables[1414];
    coolStack.coolingPipe.volume[3].dMX[1] = real_variables[1415];
    multiDisplaySensor4.multiDisplaySensor.portB.p = real_variables[1416];
    coolStack.subStack.cell.anode[5].p = real_variables[1417];
    coolStack.subStack.cell.electroOsmoticDrag.T_cath[3] = real_variables[1418];
    display_an_in.data.X[2] = real_variables[1419];
    coolStack.subStack.cathode_channel.channel.gas[2].ddTp = real_variables[1420];
    coolStack.subStack.cell.y_cath[2,3] = real_variables[1421];
    coolStack.subStack.cell.ohmicLoss.E_loss_stack[1] = real_variables[1423];
    coolStack.subStack.anode_channel.channel.portB[1].X_outflow[1] = real_variables[1424];
    coolStack.subStack.anode_channel.channel.dp[5] = real_variables[1425];
    coolStack.subStack.cell.anode[2].dUZT[4] = real_variables[1426];
    coolStack.subStack.cathode_channel.channel.gas[4].dUZT[2] = real_variables[1428];
    flowAnode.X_in[2] = real_variables[1430];
    coolStack.subStack.cell.wall_an[1].T = real_variables[1431];
    coolStack.feed_cooling.h_outflow = real_variables[1432];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_outflow.X[1] = real_variables[1434];
    coolStack.coolingPipe.friction.sat[2].lam_liq = real_variables[1435];
    coolStack.subStack.anode_channel.channel.alpha[5] = real_variables[1436];
    flowCathode.fluidPort.X_outflow[1] = real_variables[1437];
    multiDisplaySensor1.multiDisplaySensor.state.h = real_variables[1438];
    coolStack.subStack.cell.cathode[2].Z[4] = real_variables[1439];
    coolStack.subStack.cell.port_cath[4].X[4] = real_variables[1440];
    coolStack.subStack.cathode_channel.channel.gas[1].ddpT = real_variables[1441];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA.X[3] = real_variables[1442];
    coolStack.subStack.cell.cathode[4].ddx[4] = real_variables[1443];
    coolStack.subStack.cathode_channel.channel.gas[4].state.T = real_variables[1444];
    coolStack.subStack.cell.waterContent.T_cell[2] = real_variables[1445];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[2,5] = real_variables[1446];
    coolStack.subStack.cell.cathode[1].u_comp[3] = real_variables[1447];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[1,4] = real_variables[1448];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].m_flow = real_variables[1449];
    coolStack.subStack.cell.Q_wall_an_cell[5] = real_variables[1450];
    coolStack.subStack.anode_channel.channel.htcoeff[1].Pr = real_variables[1451];
    coolStack.subStack.cell.activationLoss.pin_n[3].v = real_variables[1452];
    gasSensor4.u.X_flow[4] = real_variables[1453];
    gasSensor4.portA.X_outflow[2] = real_variables[1454];
    coolStack.subStack.cathode_channel.channel.gas[4].d = real_variables[1455];
    gasSensor4.portA.X_outflow[5] = real_variables[1456];
    flowAnode.massFlowBoundary.X_in[3] = real_variables[1457];
    coolStack.coolingPipe.T_vap[4] = real_variables[1458];
    coolStack.subStack.anode_channel.channel.gas[3].ddTp = real_variables[1459];
    coolStack.subStack.cell.anode[2].Z[4] = real_variables[1460];
    sinkCathode.pressureBoundary.X_port[1,1] = real_variables[1461];
    coolStack.subStack.cathode_channel.channel.gas[2].s_component[5] = real_variables[1462];
    coolStack.subStack.summary.V_cell = real_variables[1463];
    coolStack.subStack.cell.cathode[4].T_degC = real_variables[1464];
    coolStack.subStack.cell.anode[1].ddx[3] = real_variables[1466];
    coolStack.coolingPipe.summary.dp = real_variables[1467];
    gasSensor1.portA.m_flow = real_variables[1468];
    coolStack.subStack.cell.cathode[3].Xi[3] = real_variables[1469];
    coolStack.feed_an.X_outflow[1] = real_variables[1471];
    coolStack.coolingPipe.satB.cp_liq = real_variables[1472];
    coolStack.subStack.V_stack = real_variables[1473];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.X[3] = real_variables[1474];
    coolStack.subStack.cell.y_an[3,1] = real_variables[1475];
    coolStack.subStack.anode_channel.channel.reaction.Zx[4,2] = real_variables[1476];
    coolStack.subStack.cathode_channel.channel.gas[1].state.p = real_variables[1477];
    sinkAnode.X_in[4] = real_variables[1478];
    coolStack.subStack.cathode_channel.channel.gas[4].h_component[5] = real_variables[1479];
    display_cath_out.data.X[5] = real_variables[1481];
    flowCathode.fluidPort.p = real_variables[1482];
    coolStack.subStack.cell.cathode[2].state.X[2] = real_variables[1485];
    coolStack.subStack.cell.X_cath[5,1] = real_variables[1486];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[4,1] = real_variables[1487];
    coolStack.subStack.cathode_channel.channel.gas[3].g_formation[4] = real_variables[1488];
    coolStack.subStack.cell.p_cath_partial[4,1] = real_variables[1489];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].eta = real_variables[1490];
    coolStack.coolingPipe.htcoeff.sat[4].eta_vap = real_variables[1491];
    coolStack.subStack.cathode_channel.port[5].p = real_variables[1492];
    coolStack.subStack.cell.wall_cath[5].Q_flow = real_variables[1493];
    coolStack.subStack.anode_channel.channel.reaction.X_out[2,1] = real_variables[1494];
    coolStack.subStack.cell.waterContent.T_cell[4] = real_variables[1495];
    multiDisplaySensor4.multiDisplaySensor.u.enthalpy = real_variables[1496];
    coolStack.subStack.anode_channel.channel.htcoeff[1].alphaA = real_variables[1497];
    coolStack.subStack.cell.anode[3].state.X[3] = real_variables[1498];
    coolStack.coolingPipe.Q[5] = real_variables[1499];
    coolStack.subStack.cell.cathode[2].state.X[4] = real_variables[1500];
    coolStack.subStack.cell.anode[3].dUZT[1] = real_variables[1501];
    flowCathode.X_in[4] = real_variables[1502];
    coolStack.subStack.anode_channel.channel.gas[1].ddx[2] = real_variables[1503];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB_out.p = real_variables[1504];
    gasSensor4.state.p = real_variables[1505];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[4,3] = real_variables[1507];
    coolStack.coolingPipe.friction.sat[1].lam_vap = real_variables[1508];
    coolStack.subStack.cell.anode[5].X[2] = real_variables[1509];
    coolStack.subStack.cell.anode[5].state.X[3] = real_variables[1510];
    coolStack.subStack.cell.cathode[5].dUZT[3] = real_variables[1512];
    coolStack.subStack.cell.sourceV[1].n.i = real_variables[1513];
    coolStack.coolingPipe.friction.sat[6].d_vap = real_variables[1514];
    coolStack.subStack.cathode_channel.channel.gas[4].X[5] = real_variables[1515];
    coolStack.subStack.cell.mX_flow_an_transport[2,2] = real_variables[1516];
    humidification_an.y_wet_in[1] = real_variables[1517];
    coolStack.subStack.cathode_channel.channel.gas[5].g_formation[2] = real_variables[1518];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[1,2] = real_variables[1520];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[2,2] = real_variables[1521];
    coolStack.subStack.cathode_channel.channel.gas[5].dUZT[4] = real_variables[1522];
    coolStack.subStack.anode_channel.channel.gas[4].X[3] = real_variables[1523];
    coolStack.subStack.cathode_channel.summary.m_flow = real_variables[1524];
    multiDisplaySensor4.multiDisplaySensor.portA.h_outflow = real_variables[1525];
    coolStack.subStack.cell.anode[1].Xi[4] = real_variables[1527];
    coolStack.subStack.cell.anode[1].dUZT[2] = real_variables[1528];
    coolStack.subStack.cell.port_cath[4].H_flow = real_variables[1529];
    coolStack.subStack.cathode_channel.channel.gas[1].X[5] = real_variables[1530];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_inflow.X[1] = real_variables[1531];
    coolStack.subStack.cathode_channel.channel.gas[4].ddx[1] = real_variables[1532];
    coolStack.subStack.cell.X_an[4,3] = real_variables[1535];
    coolStack.coolingPipe.h_liq[4] = real_variables[1536];
    display_cath_in.data.mdot = real_variables[1537];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA_out.T = real_variables[1538];
    coolStack.subStack.cathode_channel.channel.gas[2].state.X[3] = real_variables[1539];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA_out.X[1] = real_variables[1540];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.X[3] = real_variables[1541];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[2,1] = real_variables[1542];
    coolStack.subStack.anode_channel.channel.summary.d_in = real_variables[1543];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[1,2] = real_variables[1544];
    coolStack.subStack.cathode_channel.channel.gas[2].u_comp[3] = real_variables[1545];
    coolStack.subStack.cell.Voc_stack[1].y = real_variables[1546];
    coolStack.subStack.cell.port_cath[3].H_flow = real_variables[1547];
    coolStack.coolingPipe.htcoeff.Nu_1ph[3] = real_variables[1548];
    coolStack.subStack.cathode_channel.channel.gas[5].T_degC = real_variables[1549];
    coolStack.subStack.cell.y_cath[1,2] = real_variables[1551];
    coolStack.subStack.anode_channel.channel.htcoeff[2].Pr = real_variables[1552];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.p = real_variables[1553];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_inflow.X[1] = real_variables[1554];
    coolStack.coolingPipe.htcoeff.sat[1].lam_vap = real_variables[1555];
    coolStack.subStack.anode_channel.channel.reaction.a[3] = real_variables[1556];
    coolStack.subStack.anode_channel.channel.Q[5] = real_variables[1557];
    coolStack.subStack.anode_channel.channel.htcoeff[3].alphaA = real_variables[1558];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB.X[2] = real_variables[1559];
    coolStack.coolingPipe.summary.h_in = real_variables[1560];
    coolStack.feed_an.h_outflow = real_variables[1561];
    coolStack.subStack.cell.anode[2].dUZT[3] = real_variables[1562];
    coolStack.coolingPipe.x[1] = real_variables[1563];
    coolStack.subStack.anode_channel.channel.state[3].X[1] = real_variables[1564];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA_out.p = real_variables[1565];
    coolStack.subStack.cathode_channel.channel.gas[5].u_comp[1] = real_variables[1566];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[2,5] = real_variables[1567];
    coolStack.subStack.anode_channel.channel.state[4].X[3] = real_variables[1568];
    coolStack.coolingPipe.volume[3].d = real_variables[1569];
    coolStack.subStack.cell.cathode[4].state.X[5] = real_variables[1570];
    coolStack.coolingPipe.volume[2].p = real_variables[1571];
    coolStack.subStack.anode_channel.channel.T[4] = real_variables[1572];
    coolStack.coolingPipe.dp_internal[5] = real_variables[1573];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[5,3] = real_variables[1574];
    coolStack.subStack.cathode_channel.channel.gas[1].ddTp = real_variables[1575];
    coolStack.subStack.cathode_channel.channel.dp[3] = real_variables[1576];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.p = real_variables[1577];
    coolStack.subStack.cell.cathode[3].u_comp[1] = real_variables[1578];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[1,3] = real_variables[1580];
    coolStack.subStack.anode_channel.channel.gas[1].cp = real_variables[1581];
    display_an_out.data.X_flow[1] = real_variables[1582];
    coolStack.subStack.cell.anode[4].g_formation[3] = real_variables[1583];
    coolStack.subStack.cell.port_an[4].X[1] = real_variables[1584];
    coolStack.subStack.cell.cathode[1].Xi[2] = real_variables[1585];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[4,2] = real_variables[1586];
    coolStack.subStack.cell.anode[3].dUZT[4] = real_variables[1587];
    humidification_an.y_wet_in[2] = real_variables[1589];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[4,2] = real_variables[1590];
    gasSensor4.u.temp = real_variables[1591];
    coolStack.subStack.cell.cathode[2].d = real_variables[1592];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[3,2] = real_variables[1593];
    coolStack.subStack.cell.cathode[2].state.p = real_variables[1594];
    coolStack.subStack.anode_channel.port[5].m_flow = real_variables[1595];
    coolStack.subStack.cathode_channel.channel.friction[1].dp = real_variables[1596];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[4,3] = real_variables[1597];
    coolStack.subStack.cell.cathode[4].u_comp[2] = real_variables[1598];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[4,1] = real_variables[1599];
    coolStack.subStack.cathode_channel.channel.dp[2] = real_variables[1600];
    coolStack.subStack.cathode_channel.channel.U[3] = real_variables[1601];
    coolStack.subStack.cell.E_conc_cell[1] = real_variables[1602];
    coolStack.subStack.cell.anode[5].g_formation[2] = real_variables[1604];
    coolStack.subStack.cell.y_cath[4,5] = real_variables[1605];
    coolStack.subStack.anode_channel.channel.reaction.Zx[2,1] = real_variables[1606];
    display_an_in.data.temp = real_variables[1608];
    coolStack.subStack.anode_channel.channel.htcoeff[5].cp = real_variables[1609];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[2,5] = real_variables[1610];
    coolStack.subStack.anode_channel.channel.reaction.Zx[5,4] = real_variables[1612];
    coolStack.coolingPipe.friction.sat[5].eta_liq = real_variables[1613];
    coolStack.subStack.cell.waterDiffusion.D_diff[4] = real_variables[1614];
    coolStack.coolingPipe.htcoeff.sat[4].d_liq = real_variables[1615];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_inflow.p = real_variables[1616];
    coolStack.subStack.cathode_channel.channel.gas[3].u_comp[4] = real_variables[1617];
    coolStack.coolingPipe.volume[4].state.h = real_variables[1618];
    coolStack.coolingPipe.sat[5].eta_liq = real_variables[1619];
    coolStack.subStack.anode_channel.channel.htcoeff[3].eta = real_variables[1620];
    coolStack.subStack.cathode_channel.port[2].X[4] = real_variables[1621];
    coolStack.coolingPipe.m_flow[2] = real_variables[1622];
    sinkAnode.pressureBoundary.X_port[1,2] = real_variables[1623];
    display_phTmdot_cath_out.y.pressure = real_variables[1624];
    coolStack.subStack.anode_channel.channel.gas[3].state.X[3] = real_variables[1625];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_outflow.X[3] = real_variables[1626];
    coolStack.subStack.cathode_channel.channel.MX[4,2] = real_variables[1627];
    multiDisplaySensor4.multiDisplaySensor.portA.p = real_variables[1628];
    coolStack.subStack.anode_channel.channel.gas[4].h = real_variables[1629];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[1,2] = real_variables[1631];
    coolStack.subStack.cell.cathode[2].ddpT = real_variables[1632];
    sinkAnode.pressureBoundary.state.X[1] = real_variables[1633];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.X[5] = real_variables[1634];
    coolStack.subStack.cell.contaminantsLoss.y_an[1,2] = real_variables[1635];
    sourceW.massFlowBoundary.fluidPort.m_flow = real_variables[1636];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[1,5] = real_variables[1637];
    coolStack.subStack.cell.anode[3].ddx[1] = real_variables[1638];
    coolStack.coolingPipe.T_fluid[3] = real_variables[1640];
    display_phTmdot_an_in.T_degC = real_variables[1641];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.X[5] = real_variables[1642];
    flowCathode.massFlowBoundary.fluidPort.p = real_variables[1643];
    coolStack.subStack.anode_channel.port[4].X[2] = real_variables[1644];
    coolStack.subStack.anode_channel.channel.gas[5].T_degC = real_variables[1645];
    coolStack.subStack.cell.anode[4].s_component[1] = real_variables[1646];
    coolStack.subStack.cell.cathode[1].X[4] = real_variables[1647];
    coolStack.subStack.anode_channel.channel.state[5].X[1] = real_variables[1648];
    coolStack.subStack.cell.anode[2].g_formation[2] = real_variables[1649];
    coolStack.subStack.cell.anode[4].Xi[3] = real_variables[1650];
    coolStack.subStack.cathode_channel.channel.gas[1].s_component[5] = real_variables[1651];
    coolStack.subStack.anode_channel.channel.state[2].X[3] = real_variables[1652];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.T = real_variables[1653];
    coolStack.subStack.anode_channel.channel.Q_extra[5] = real_variables[1654];
    coolStack.subStack.cell.cathode[2].dUZT[1] = real_variables[1655];
    coolStack.subStack.cell.concentrationLoss.E_loss_stack[3] = real_variables[1656];
    coolStack.subStack.cathode_channel.channel.gas[5].Z[1] = real_variables[1657];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_inflow.p = real_variables[1658];
    coolStack.coolingPipe.satA.x = real_variables[1659];
    coolStack.subStack.cell.anode[3].Z[3] = real_variables[1660];
    coolStack.subStack.cathode_channel.channel.state[2].X[5] = real_variables[1661];
    coolStack.coolingPipe.Q_tot = real_variables[1662];
    coolStack.subStack.cell.cathode[3].state.p = real_variables[1664];
    display_phTmdot_an_out.y.mdot = real_variables[1665];
    coolStack.subStack.anode_channel.channel.friction[1].dp = real_variables[1666];
    coolStack.h_inflow_cooling = real_variables[1667];
    coolStack.subStack.cell.ohmicLoss.T_cell[4] = real_variables[1668];
    coolStack.subStack.cell.y_an[4,2] = real_variables[1669];
    coolStack.subStack.cathode_channel.channel.gas[3].s_component[5] = real_variables[1670];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[5,3] = real_variables[1671];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.X[2] = real_variables[1672];
    coolStack.subStack.cell.cathode[1].s_component[1] = real_variables[1673];
    coolStack.subStack.cell.anode[4].dUZT[1] = real_variables[1674];
    coolStack.subStack.cell.waterContent.p_an_partial[3,4] = real_variables[1675];
    display_T.showNumber = real_variables[1676];
    coolStack.coolingPipe.htcoeff.sat[4].eta_liq = real_variables[1677];
    coolStack.subStack.cathode_channel.channel.reaction.T[3] = real_variables[1678];
    coolStack.subStack.cell.cathode[2].Z[2] = real_variables[1679];
    coolStack.subStack.cathode_channel.channel.gas[1].u_comp[2] = real_variables[1680];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB_out.T = real_variables[1681];
    coolStack.subStack.anode_channel.channel.gas[2].dUZT[1] = real_variables[1683];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[4,3] = real_variables[1684];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[3,1] = real_variables[1687];
    coolStack.subStack.cathode_channel.channel.sh[1] = real_variables[1688];
    coolStack.subStack.anode_channel.channel.T[1] = real_variables[1689];
    coolStack.subStack.anode_channel.channel.state[3].X[3] = real_variables[1690];
    coolStack.subStack.cell.anode[2].h = real_variables[1691];
    coolStack.subStack.cathode_channel.channel.gas[2].state.p = real_variables[1692];
    coolStack.subStack.cell.waterDiffusion.lambda_cath[1] = real_variables[1693];
    flowCathode.fluidPort.h_outflow = real_variables[1694];
    coolStack.subStack.cathode_channel.port[3].p = real_variables[1695];
    coolStack.subStack.anode_channel.channel.U[1] = real_variables[1697];
    coolStack.subStack.anode_channel.channel.gas[3].h_component[1] = real_variables[1698];
    coolStack.subStack.cell.anode[2].X[3] = real_variables[1699];
    coolStack.subStack.anode_channel.port[5].mX_flow[2] = real_variables[1701];
    coolStack.subStack.cell.dTdt[5] = real_variables[1702];
    gasSensor4.u.X_flow[5] = real_variables[1704];
    coolStack.subStack.anode_channel.channel.gas[3].s_component[4] = real_variables[1705];
    display_cath_in.data.X_flow[2] = real_variables[1706];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[1,3] = real_variables[1707];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[4,3] = real_variables[1708];
    coolStack.subStack.cell.anode[4].dUZT[2] = real_variables[1709];
    coolStack.subStack.cell.cathode[4].state.X[1] = real_variables[1710];
    coolStack.coolingPipe.volume[3].dM_bulk = real_variables[1711];
    coolStack.subStack.cathode_channel.channel.state[6].T = real_variables[1713];
    coolStack.subStack.cell.cathode[4].g_formation[4] = real_variables[1714];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.X[5] = real_variables[1715];
    current_variation.y[1] = real_variables[1716];
    coolStack.coolingPipe.htcoeff.eta[1] = real_variables[1717];
    coolStack.subStack.anode_channel.channel.sh[4] = real_variables[1719];
    coolStack.subStack.anode_stoich = real_variables[1720];
    coolStack.subStack.cell.X_cath[1,1] = real_variables[1721];
    coolStack.subStack.cell.waterDiffusion.lambda_cath[3] = real_variables[1722];
    coolStack.subStack.cathode_channel.port[4].X[2] = real_variables[1724];
    coolStack.subStack.anode_channel.channel.gas[1].p = real_variables[1725];
    coolStack.coolingPipe.volume[5].dM_bulk = real_variables[1726];
    display_cath_out.data.X[1] = real_variables[1727];
    gasSensor1.portA.X_outflow[4] = real_variables[1728];
    coolStack.subStack.cell.electroOsmoticDrag.I_cell[5] = real_variables[1730];
    coolStack.subStack.anode_channel.channel.state[1].T = real_variables[1731];
    coolStack.coolingPipe.d[2] = real_variables[1732];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[3,2] = real_variables[1733];
    coolStack.subStack.cell.cathode[4].Xi[2] = real_variables[1734];
    ramp_m_flow_water.y = real_variables[1735];
    coolStack.coolingPipe.volume[4].Tt = real_variables[1738];
    coolStack.coolingPipe.htcoeff.k_1ph[2] = real_variables[1739];
    coolStack.subStack.cathode_channel.channel.MX[4,5] = real_variables[1740];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[2,2] = real_variables[1742];
    coolStack.subStack.cell.waterDiffusion.T_cath[2] = real_variables[1743];
    coolStack.coolingPipe.T_vap[2] = real_variables[1744];
    coolStack.subStack.anode_channel.channel.gas[1].Xi[1] = real_variables[1745];
    coolStack.subStack.anode_channel.summary.d_in = real_variables[1747];
    coolStack.subStack.anode_channel.channel.gas[2].u_comp[3] = real_variables[1748];
    coolStack.subStack.cell.checkEnergyBalance = real_variables[1749];
    coolStack.subStack.cathode_channel.channel.gas[2].h_component[4] = real_variables[1750];
    sinkP.pressureBoundary.fluidPort[1].h_outflow = real_variables[1751];
    coolStack.subStack.anode_channel.channel.M[1] = real_variables[1752];
    coolStack.coolingPipe.x[5] = real_variables[1753];
    display_cath_out.data.X_flow[2] = real_variables[1754];
    coolStack.subStack.cathode_channel.channel.gas[1].h_component[2] = real_variables[1755];
    coolStack.coolingPipe.pA = real_variables[1756];
    flowAnode.massFlowBoundary.p = real_variables[1757];
    coolStack.subStack.anode_channel.portA.X_outflow[3] = real_variables[1758];
    gasSensor4.u.X[2] = real_variables[1759];
    coolStack.subStack.cell.ohmicLoss.pin_p[4].i = real_variables[1760];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[5,1] = real_variables[1761];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA_out.X[2] = real_variables[1762];
    coolStack.subStack.cell.y_cath[2,4] = real_variables[1763];
    coolStack.coolingPipe.m_flow[3] = real_variables[1764];
    coolStack.drain_an.m_flow = real_variables[1765];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.X[4] = real_variables[1766];
    coolStack.subStack.cell.T_cath[5] = real_variables[1767];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[4,5] = real_variables[1769];
    coolStack.subStack.cathode_channel.channel.state[3].X[1] = real_variables[1770];
    coolStack.subStack.cell.cathode[2].dUZT[4] = real_variables[1771];
    coolStack.subStack.cathode_channel.channel.gas[5].p_bar = real_variables[1772];
    coolStack.coolingPipe.volume[3].T = real_variables[1773];
    coolStack.coolingPipe.volume[3].p = real_variables[1774];
    gasSensor1.portA.p = real_variables[1776];
    coolStack.subStack.cathode_channel.channel.alpha[4] = real_variables[1777];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[1,4] = real_variables[1780];
    coolStack.subStack.wall[3].Q_flow = real_variables[1781];
    coolStack.coolingPipe.h[3] = real_variables[1783];
    coolStack.subStack.anode_channel.port[3].X[1] = real_variables[1784];
    display_phTmdot_cath_in.y.temp = real_variables[1785];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].lambda = real_variables[1786];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA.X[1] = real_variables[1787];
    coolStack.coolingPipe.htcoeff.sat[3].lam_liq = real_variables[1788];
    coolStack.subStack.cathode_channel.port[3].m_flow = real_variables[1789];
    coolStack.subStack.cell.p_cath[2] = real_variables[1790];
    sinkAnode.pressureBoundary.state.X[3] = real_variables[1791];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA.T = real_variables[1792];
    coolStack.subStack.cell.anode[3].p = real_variables[1793];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[3,4] = real_variables[1794];
    coolStack.subStack.cell.cathode[1].Z[4] = real_variables[1795];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[1,5] = real_variables[1796];
    coolStack.subStack.cathode_channel.channel.gas[1].g_formation[4] = real_variables[1797];
    coolStack.subStack.cell.port_cath[3].X[4] = real_variables[1798];
    coolStack.subStack.cell.anode[4].dUZT[4] = real_variables[1799];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_outflow.T = real_variables[1800];
    coolStack.subStack.cell.wall_an[5].T = real_variables[1801];
    coolStack.coolingPipe.p[5] = real_variables[1802];
    coolStack.coolingPipe.htcoeff.sat[2].eta_vap = real_variables[1803];
    coolStack.subStack.cell.sourceV[5].v = real_variables[1806];
    display_cath_in.data.X[2] = real_variables[1807];
    display_phTmdot_an_out.h_kJ = real_variables[1808];
    coolStack.subStack.cathode_channel.channel.gas[1].X[2] = real_variables[1809];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_real[2] = real_variables[1810];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_inflow.T = real_variables[1811];
    coolStack.subStack.cell.waterDiffusion.c_cath_H2O[2] = real_variables[1814];
    coolStack.coolingPipe.summary.h_out = real_variables[1815];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[1,1] = real_variables[1816];
    coolStack.subStack.cell.contaminantsLoss.y_an[3,4] = real_variables[1818];
    coolStack.subStack.anode_channel.channel.state[6].p = real_variables[1819];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA_out.X[2] = real_variables[1820];
    coolStack.coolingPipe.sigma[3] = real_variables[1821];
    coolStack.subStack.anode_channel.channel.gas[5].g_formation[2] = real_variables[1823];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[2,3] = real_variables[1825];
    coolStack.subStack.cell.port_cath[1].mX_flow[3] = real_variables[1826];
    display_phTmdot_w_out.y.mdot = real_variables[1827];
    coolStack.subStack.cell.mX_flow_cath_transport[1,3] = real_variables[1828];
    coolStack.subStack.cell.cathode[2].Z[3] = real_variables[1829];
    coolStack.coolingPipe.state[3].p = real_variables[1830];
    multiDisplaySensor1.multiDisplaySensor.state.p = real_variables[1831];
    coolStack.subStack.cell.anode[5].Z[1] = real_variables[1832];
    coolStack.subStack.cathode_channel.channel.gas[1].u_comp[3] = real_variables[1833];
    coolStack.subStack.anode_channel.channel.htcoeff[4].eta = real_variables[1834];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[1,1] = real_variables[1836];
    coolStack.subStack.anode_channel.portB.h_outflow = real_variables[1837];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB_out.X[3] = real_variables[1838];
    coolStack.subStack.cell.electroOsmoticDrag.T_an[3] = real_variables[1839];
    coolStack.subStack.anode_channel.channel.gas[3].state.X[2] = real_variables[1840];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[3,1] = real_variables[1841];
    coolStack.coolingPipe.sat[4].d_liq = real_variables[1844];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.X[3] = real_variables[1845];
    coolStack.subStack.anode_channel.channel.friction[1].dA = real_variables[1846];
    coolStack.subStack.cell.port_cath[2].H_flow = real_variables[1847];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.X[1] = real_variables[1848];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[1,2] = real_variables[1849];
    coolStack.coolingPipe.sh[2] = real_variables[1850];
    coolStack.subStack.anode_channel.channel.gas[1].dUZT[2] = real_variables[1851];
    coolStack.subStack.cathode_channel.channel.gas[2].X[4] = real_variables[1852];
    coolStack.subStack.anode_channel.channel.htcoeff[3].Nu = real_variables[1853];
    coolStack.subStack.cell.cathode[4].Rg = real_variables[1855];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[3,3] = real_variables[1856];
    coolStack.coolingPipe.volume[1].pt = real_variables[1857];
    coolStack.subStack.summary.T_stack[1] = real_variables[1858];
    coolStack.subStack.cathode_channel.channel.gas[5].s_component[4] = real_variables[1859];
    coolStack.subStack.cell.cathode[3].h_component[5] = real_variables[1860];
    coolStack.subStack.cell.electroOsmoticDrag.I_cell[1] = real_variables[1861];
    display_phTmdot_an_in.y.X_flow[3] = real_variables[1862];
    coolStack.subStack.cell.cathode[4].h = real_variables[1863];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[3,2] = real_variables[1865];
    coolStack.subStack.cathode_channel.channel.MX[3,5] = real_variables[1866];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[1,3] = real_variables[1867];
    coolStack.subStack.cathode_channel.channel.alpha[2] = real_variables[1868];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[2,3] = real_variables[1869];
    coolStack.subStack.anode_channel.channel.M[4] = real_variables[1870];
    coolStack.coolingPipe.volume[3].ht = real_variables[1871];
    coolStack.subStack.cell.port_cath[5].m_flow = real_variables[1872];
    coolStack.subStack.cell.electroOsmoticDrag.m_flow[2] = real_variables[1873];
    coolStack.coolingPipe.p[1] = real_variables[1874];
    coolStack.subStack.cell.cathode[3].state.X[2] = real_variables[1875];
    multiDisplaySensor4.u.enthalpy = real_variables[1876];
    flowAnode.fluidPort.X_outflow[2] = real_variables[1877];
    coolStack.subStack.anode_channel.portB.m_flow = real_variables[1878];
    sinkAnode.pressureBoundary.h_set = real_variables[1879];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.X[2] = real_variables[1880];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[3,2] = real_variables[1881];
    coolStack.subStack.anode_channel.channel.htcoeff[1].Re = real_variables[1882];
    display_phTmdot_w_in.mdot = real_variables[1883];
    coolStack.coolingPipe.htcoeff.alpha[5] = real_variables[1884];
    coolStack.subStack.cell.ohmicLoss.ASR[2] = real_variables[1885];
    coolStack.subStack.cell.y_an[4,4] = real_variables[1886];
    sinkP.pressureBoundary.p_set = real_variables[1887];
    coolStack.subStack.cell.waterContent.p_an_partial[3,3] = real_variables[1888];
    coolStack.subStack.anode_channel.channel.htcoeff[4].alphaA = real_variables[1890];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_outflow.X[4] = real_variables[1891];
    coolStack.coolingPipe.htcoeff.Re[1] = real_variables[1892];
    display_an_out.data.X[1] = real_variables[1893];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.p = real_variables[1894];
    coolStack.subStack.cell.cathode[1].T = real_variables[1895];
    coolStack.coolingPipe.h[4] = real_variables[1896];
    coolStack.subStack.cathode_channel.channel.gas[5].d = real_variables[1897];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[5,2] = real_variables[1898];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[4,1] = real_variables[1899];
    coolStack.subStack.anode_channel.port[4].X[4] = real_variables[1900];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.p = real_variables[1901];
    coolStack.subStack.anode_channel.channel.gas[1].T_degC = real_variables[1902];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.X[4] = real_variables[1903];
    coolStack.subStack.cathode_channel.wall[4].T = real_variables[1905];
    coolStack.coolingPipe.volume[1].T_in = real_variables[1906];
    coolStack.subStack.anode_channel.channel.reaction.Zx[4,3] = real_variables[1907];
    coolStack.subStack.cathode_channel.channel.gas[4].g_formation[5] = real_variables[1908];
    coolStack.subStack.cathode_channel.channel.gas[4].p_bar = real_variables[1909];
    coolStack.subStack.anode_channel.port[4].p = real_variables[1910];
    gasSensor2.portA.X_outflow[2] = real_variables[1912];
    coolStack.subStack.cell.anode[2].Xi[2] = real_variables[1914];
    coolStack.summary.V_stack = real_variables[1915];
    display_an_out.data.X_flow[2] = real_variables[1916];
    sinkP.pressureBoundary.m_flow[1] = real_variables[1917];
    coolStack.coolingPipe.htcoeff.sat[3].x = real_variables[1918];
    coolStack.subStack.anode_channel.channel.reaction.y_out[2,3] = real_variables[1919];
    gasSensor3.u.X_flow[1] = real_variables[1920];
    sourceW.fluidPort.p = real_variables[1921];
    coolStack.subStack.cell.cathode[5].Z[2] = real_variables[1922];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.p = real_variables[1923];
    coolStack.subStack.cell.cathode[3].T_degC = real_variables[1924];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.X[5] = real_variables[1925];
    coolStack.coolingPipe.cv[1] = real_variables[1926];
    coolStack.subStack.cell.waterDiffusion.c_cath_H2O[5] = real_variables[1927];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[1,4] = real_variables[1928];
    coolStack.subStack.anode_channel.channel.gas[3].dUZT[1] = real_variables[1929];
    coolStack.subStack.cathode_channel.channel.reaction.Ztot[1] = real_variables[1930];
    display_phTmdot_cath_out.y.X_flow[2] = real_variables[1931];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_inflow.p = real_variables[1932];
    coolStack.subStack.cell.electroOsmoticDrag.T_cell[1] = real_variables[1933];
    coolStack.subStack.cell.ohmicLoss.pin_p[2].i = real_variables[1934];
    coolStack.subStack.cathode_channel.channel.gas[4].s_component[5] = real_variables[1935];
    gasSensor2.u.X[1] = real_variables[1936];
    display_cath_in.y[2] = real_variables[1937];
    coolStack.subStack.cell.anode[1].dUZT[1] = real_variables[1938];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.X[2] = real_variables[1940];
    coolStack.subStack.cell.mX_flow_an_transport[5,2] = real_variables[1941];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA_out.p = real_variables[1942];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.X[4] = real_variables[1943];
    coolStack.subStack.anode_channel.channel.q[1].T = real_variables[1944];
    coolStack.coolingPipe.dA = real_variables[1945];
    coolStack.subStack.cell.anode[4].X[2] = real_variables[1946];
    coolStack.subStack.X_feed_an[2] = real_variables[1947];
    coolStack.subStack.anode_channel.channel.gas[5].h = real_variables[1948];
    coolStack.subStack.anode_channel.channel.state[6].X[4] = real_variables[1949];
    display_phTmdot_an_in.y.X[1] = real_variables[1950];
    coolStack.pin_p.v = real_variables[1951];
    coolStack.coolingPipe.htcoeff.sat[1].eta_liq = real_variables[1952];
    coolStack.subStack.cell.cathode[1].state.p = real_variables[1953];
    coolStack.subStack.cathode_channel.channel.friction[3].m_flow = real_variables[1954];
    coolStack.subStack.cathode_channel.port[3].mX_flow[5] = real_variables[1955];
    coolStack.subStack.cell.anode[5].g_formation[3] = real_variables[1956];
    gasSensor4.portB.p = real_variables[1957];
    coolStack.subStack.checkEnergyBalance = real_variables[1958];
    coolStack.coolingPipe.dp[4] = real_variables[1959];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[4,1] = real_variables[1960];
    coolStack.subStack.anode_channel.port[1].X[1] = real_variables[1961];
    coolStack.subStack.anode_channel.channel.state[3].T = real_variables[1962];
    coolStack.coolingPipe.htcoeff.sat[4].x = real_variables[1963];
    coolStack.subStack.cathode_channel.channel.state[4].p = real_variables[1964];
    coolStack.subStack.anode_channel.channel.gas[4].ddx[4] = real_variables[1965];
    coolStack.subStack.anode_channel.channel.portA[1].p = real_variables[1966];
    coolStack.subStack.cell.p_an[4] = real_variables[1967];
    coolStack.subStack.anode_channel.channel.gas[3].Rg = real_variables[1968];
    coolStack.summary.dp_anode = real_variables[1969];
    coolStack.subStack.anode_channel.channel.gas[4].state.X[2] = real_variables[1970];
    multiDisplaySensor1.multiDisplaySensor.portB.m_flow = real_variables[1971];
    coolStack.subStack.cell.cathode[4].u_comp[5] = real_variables[1972];
    coolStack.subStack.cell.port_cath[3].mX_flow[3] = real_variables[1973];
    coolStack.subStack.cell.p_cath_partial[3,2] = real_variables[1974];
    coolStack.subStack.cell.X_cath[4,2] = real_variables[1975];
    coolStack.subStack.cell.mX_flow_an_transport[4,2] = real_variables[1976];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[3,1] = real_variables[1977];
    coolStack.subStack.cell.cathode[2].Xi[4] = real_variables[1978];
    coolStack.coolingPipe.sigma[2] = real_variables[1979];
    coolStack.subStack.anode_channel.channel.reaction.MM[2] = real_variables[1980];
    coolStack.subStack.cathode_channel.channel.friction[1].m_flow = real_variables[1982];
    coolStack.coolingPipe.T[1] = real_variables[1983];
    coolStack.subStack.cell.anode[2].MM = real_variables[1985];
    coolStack.subStack.cell.waterContent.lambda_an[5] = real_variables[1986];
    coolStack.subStack.cell.waterContent.a_cath_H2O[5] = real_variables[1987];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.X[2] = real_variables[1988];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[4,1] = real_variables[1989];
    coolStack.subStack.anode_channel.channel.MX[5,1] = real_variables[1991];
    gasSensor3.u.X[1] = real_variables[1992];
    coolStack.coolingPipe.dUdt = real_variables[1993];
    coolStack.subStack.cell.cathode[2].X[1] = real_variables[1994];
    sinkAnode.pressureBoundary.X_port[1,4] = real_variables[1995];
    coolStack.subStack.cell.pin_p.v = real_variables[1996];
    coolStack.subStack.cathode_channel.channel.Q_extra[1] = real_variables[1997];
    coolStack.subStack.cathode_channel.channel.gas[3].X[5] = real_variables[1998];
    coolStack.subStack.cell.cathode[1].p = real_variables[1999];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.X[5] = real_variables[2000];
    coolStack.subStack.cathode_channel.channel.gas[1].p_bar = real_variables[2001];
    display_phTmdot_an_out.y.X_flow[2] = real_variables[2003];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[1,4] = real_variables[2004];
    gasSensor4.portA.X_outflow[4] = real_variables[2006];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[4,3] = real_variables[2007];
    coolStack.subStack.anode_channel.channel.state[4].X[2] = real_variables[2008];
    coolStack.subStack.cell.anode[3].state.p = real_variables[2009];
    coolStack.subStack.anode_channel.channel.state[7].X[3] = real_variables[2010];
    coolStack.subStack.cell.port_an[3].X[3] = real_variables[2011];
    coolStack.subStack.cell.cathode[4].dUZT[3] = real_variables[2012];
    coolStack.subStack.cell.activationLoss.E_loss_cell[1] = real_variables[2013];
    coolStack.subStack.cathode_channel.channel.reaction.MM[3] = real_variables[2014];
    display_cath_out.data.X_flow[4] = real_variables[2015];
    coolStack.coolingPipe.stateA_out.h = real_variables[2016];
    coolStack.subStack.anode_channel.channel.gas[4].g_formation[4] = real_variables[2017];
    coolStack.drain_cath.X_outflow[4] = real_variables[2018];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.T = real_variables[2019];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[2,1] = real_variables[2021];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.X[3] = real_variables[2022];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].m_flow = real_variables[2023];
    coolStack.subStack.cell.h_conv_an[4] = real_variables[2024];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA_out.X[2] = real_variables[2025];
    sinkAnode.fluidPort.p = real_variables[2027];
    coolStack.subStack.anode_channel.channel.gas[4].ddpT = real_variables[2028];
    coolStack.subStack.cathode_channel.channel.state[7].X[5] = real_variables[2029];
    coolStack.subStack.cell.concentrationLoss.pin_p[1].i = real_variables[2030];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[1,3] = real_variables[2031];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_inflow.X[4] = real_variables[2032];
    coolStack.subStack.cell.cathode[3].state.X[1] = real_variables[2033];
    coolStack.coolingPipe.htcoeff.Re_liq[1] = real_variables[2034];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[1,2] = real_variables[2035];
    coolStack.subStack.cathode_channel.port[1].mX_flow[3] = real_variables[2036];
    display_an_out.data.enthalpy = real_variables[2037];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA.X[2] = real_variables[2038];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[5,3] = real_variables[2039];
    coolStack.subStack.cell.activationLoss.T_cell[4] = real_variables[2040];
    coolStack.subStack.cell.cathode[1].Xi[1] = real_variables[2041];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.X[5] = real_variables[2042];
    coolStack.subStack.anode_channel.channel.gas[1].Xi[4] = real_variables[2043];
    coolStack.subStack.cell.port_an[4].X[3] = real_variables[2044];
    coolStack.subStack.anode_channel.channel.gas[5].u_comp[1] = real_variables[2045];
    display_cath_in.data.enthalpy = real_variables[2046];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].Re = real_variables[2047];
    sourceW.fluidPort.m_flow = real_variables[2048];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[2,1] = real_variables[2049];
    coolStack.coolingPipe.htcoeff.cp[2] = real_variables[2050];
    coolStack.subStack.cell.port_an[2].X[1] = real_variables[2051];
    sinkAnode.pressureBoundary.X_port[1,3] = real_variables[2052];
    coolStack.subStack.cell.waterDiffusion.m_flow[5] = real_variables[2053];
    coolStack.subStack.cathode_channel.channel.state[7].T = real_variables[2054];
    coolStack.subStack.cell.p_an_partial[3,3] = real_variables[2055];
    coolStack.coolingPipe.lam[5] = real_variables[2056];
    coolStack.coolingPipe.d[3] = real_variables[2057];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.X[2] = real_variables[2058];
    coolStack.subStack.cell.cathode[5].cp = real_variables[2059];
    coolStack.subStack.anode_channel.channel.htcoeff[2].alphaA = real_variables[2060];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].alphaA = real_variables[2061];
    coolStack.subStack.anode_channel.channel.reaction.X_in[2,3] = real_variables[2062];
    coolStack.subStack.cell.cathode[2].s_component[2] = real_variables[2063];
    coolStack.subStack.cell.waterDiffusion.T_an[3] = real_variables[2064];
    coolStack.subStack.cell.cathode[4].dUZT[5] = real_variables[2065];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[4,3] = real_variables[2066];
    coolStack.subStack.cell.cathode[4].cp = real_variables[2067];
    coolStack.subStack.anode_channel.channel.gas[5].u_comp[3] = real_variables[2068];
    coolStack.subStack.cathode_channel.port[4].h = real_variables[2069];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA.X[1] = real_variables[2070];
    coolStack.subStack.cathode_channel.port[2].h = real_variables[2071];
    coolStack.subStack.anode_channel.channel.htcoeff[2].m_flow = real_variables[2072];
    coolStack.subStack.cell.anode[2].u_comp[3] = real_variables[2073];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[5,3] = real_variables[2074];
    coolStack.subStack.cathode_channel.channel.gas[4].s_component[1] = real_variables[2075];
    display_cath_in.X_O2 = real_variables[2076];
    coolStack.subStack.cathode_channel.channel.MX[1,4] = real_variables[2077];
    gasSensor2.state.X[2] = real_variables[2078];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[5,5] = real_variables[2079];
    coolStack.coolingPipe.htcoeff.alpha[1] = real_variables[2080];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.X[3] = real_variables[2081];
    gasSensor2.state.T = real_variables[2082];
    error.u1 = real_variables[2083];
    coolStack.subStack.cell.waterDiffusion.lambda[2] = real_variables[2084];
    coolStack.subStack.cell.gasDiffusion.f_w[5] = real_variables[2085];
    coolStack.subStack.cathode_channel.channel.gas[3].h_component[5] = real_variables[2086];
    coolStack.subStack.cell.waterContent.p_cath_partial[1,1] = real_variables[2087];
    coolStack.subStack.cell.p_cath[3] = real_variables[2088];
    coolStack.subStack.cathode_channel.channel.gas[3].dUZT[1] = real_variables[2089];
    coolStack.subStack.cell.anode[3].s_component[2] = real_variables[2090];
    coolStack.subStack.summary.T_stack[3] = real_variables[2091];
    coolStack.subStack.cell.cathode[2].u_comp[4] = real_variables[2092];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.p = real_variables[2093];
    coolStack.coolingPipe.twoPhaseFraction[5] = real_variables[2094];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.X[3] = real_variables[2095];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.X[4] = real_variables[2096];
    coolStack.subStack.cell.port_cath[4].X[2] = real_variables[2097];
    coolStack.subStack.cell.concentrationLoss.pin_n[5].i = real_variables[2098];
    coolStack.subStack.cell.port_an[3].X[1] = real_variables[2099];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_real[5] = real_variables[2100];
    flowCathode.X_in[2] = real_variables[2101];
    coolStack.subStack.anode_channel.channel.gas[5].X[4] = real_variables[2102];
    coolStack.coolingPipe.m_flow[4] = real_variables[2103];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[1,1] = real_variables[2104];
    coolStack.subStack.cell.waterContent.T_an[4] = real_variables[2105];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.T = real_variables[2106];
    coolStack.subStack.cathode_channel.channel.gas[5].state.X[1] = real_variables[2107];
    coolStack.subStack.cathode_channel.channel.q[2].T = real_variables[2108];
    coolStack.feed_cooling.m_flow = real_variables[2109];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[5,4] = real_variables[2110];
    coolStack.subStack.cathode_channel.channel.portB[1].X_outflow[1] = real_variables[2112];
    coolStack.coolingPipe.q_fluid[3].T = real_variables[2113];
    humidification_cath.x_wet_in[1] = real_variables[2114];
    coolStack.subStack.cell.cathode[3].h_component[3] = real_variables[2115];
    coolStack.subStack.anode_channel.channel.q_fluid[1].T = real_variables[2116];
    coolStack.subStack.cell.waterDiffusion.T_cell[4] = real_variables[2117];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[3,4] = real_variables[2118];
    coolStack.subStack.anode_channel.channel.gas[5].T = real_variables[2119];
    coolStack.coolingPipe.htcoeff.Re_liq[3] = real_variables[2120];
    coolStack.subStack.cell.p_an_partial[5,3] = real_variables[2122];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[3,3] = real_variables[2124];
    flowAnode.fluidPort.h_outflow = real_variables[2125];
    coolStack.subStack.cell.mX_flow_an_reac[3,1] = real_variables[2126];
    coolStack.subStack.anode_channel.channel.reaction.Ztot[3] = real_variables[2127];
    coolStack.subStack.cathode_channel.channel.q_fluid[5].T = real_variables[2128];
    coolStack.subStack.cell.V_cell = real_variables[2129];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.X[2] = real_variables[2130];
    coolStack.subStack.cathode_channel.channel.rMX[4,3] = real_variables[2131];
    sinkCathode.fluidPort.X_outflow[3] = real_variables[2132];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[1,4] = real_variables[2133];
    coolStack.coolingPipe.p_red[4] = real_variables[2134];
    coolStack.subStack.cell.cathode[1].h = real_variables[2135];
    coolStack.subStack.cathode_channel.channel.gas[4].Xi[4] = real_variables[2136];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA_out.X[2] = real_variables[2138];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB.X[3] = real_variables[2140];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[1,2] = real_variables[2141];
    coolStack.subStack.cathode_channel.channel.gas[2].h = real_variables[2142];
    coolStack.coolingPipe.volume[5].pt = real_variables[2143];
    display_phTmdot_w_out.y.temp = real_variables[2146];
    coolStack.subStack.anode_channel.channel.htcoeff[2].Re = real_variables[2147];
    coolStack.subStack.cell.port_cath[1].m_flow = real_variables[2148];
    coolStack.subStack.cathode_channel.channel.friction[3].dA = real_variables[2149];
    coolStack.subStack.anode_channel.channel.gas[5].state.X[1] = real_variables[2150];
    coolStack.subStack.cell.y_an[5,4] = real_variables[2152];
    coolStack.subStack.feed_cathode.m_flow = real_variables[2153];
    coolStack.coolingPipe.p_satA = real_variables[2154];
    coolStack.coolingPipe.q[2].Q_flow = real_variables[2155];
    coolStack.subStack.cell.contaminantsLoss.pin_n[2].i = real_variables[2156];
    coolStack.subStack.anode_channel.channel.dp[4] = real_variables[2157];
    coolStack.subStack.cell.port_an[5].h = real_variables[2158];
    coolStack.subStack.cathode_channel.channel.gas[1].ddx[2] = real_variables[2159];
    coolStack.subStack.anode_channel.channel.gas[4].u = real_variables[2160];
    coolStack.subStack.cathode_channel.channel.reaction.MM[5] = real_variables[2161];
    coolStack.coolingPipe.htcoeff.T_wall[1] = real_variables[2162];
    multiDisplaySensor1.portB.h_outflow = real_variables[2163];
    sinkAnode.pressureBoundary.fluidPort[1].h_outflow = real_variables[2164];
    voltageSensor.v = real_variables[2165];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[5,1] = real_variables[2166];
    coolStack.subStack.cell.electroOsmoticDrag.T_cell[5] = real_variables[2167];
    display_phTmdot_cath_out.p_bar = real_variables[2169];
    flowCathode.fluidPort.m_flow = real_variables[2170];
    coolStack.subStack.cathode_channel.channel.gas[4].Rg = real_variables[2171];
    coolStack.subStack.cell.waterContent.p_an_partial[5,1] = real_variables[2172];
    coolStack.subStack.anode_channel.channel.gas[2].X[4] = real_variables[2173];
    coolStack.subStack.anode_channel.channel.gas[1].dUZT[1] = real_variables[2174];
    coolStack.coolingPipe.stateB_out.p = real_variables[2175];
    coolStack.subStack.cell.anode[4].u_comp[2] = real_variables[2176];
    coolStack.subStack.anode_channel.channel.reaction.y_out[1,4] = real_variables[2177];
    coolStack.subStack.cell.anode[1].Z[2] = real_variables[2178];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB_out.p = real_variables[2179];
    coolStack.subStack.cathode_channel.channel.gas[3].h = real_variables[2180];
    coolStack.subStack.cell.port_cath[2].p = real_variables[2181];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_inflow.X[3] = real_variables[2182];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.X[1] = real_variables[2183];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.X[4] = real_variables[2184];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[3,4] = real_variables[2185];
    coolStack.subStack.anode_channel.channel.gas[1].Xi[2] = real_variables[2187];
    coolStack.coolingPipe.htcoeff.T[4] = real_variables[2188];
    coolStack.subStack.cell.cathode[3].ddx[5] = real_variables[2189];
    coolStack.subStack.cell.anode[4].h_component[2] = real_variables[2191];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_inflow.X[4] = real_variables[2192];
    sinkP.pressureBoundary.state.h = real_variables[2193];
    coolStack.subStack.anode_channel.channel.gas[1].s_component[4] = real_variables[2194];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[1,4] = real_variables[2195];
    coolStack.subStack.cathode_channel.port[3].X[4] = real_variables[2196];
    coolStack.subStack.cell.h_an[2] = real_variables[2197];
    coolStack.subStack.cell.cathode[4].s_component[2] = real_variables[2198];
    coolStack.subStack.cathode_channel.channel.gas[3].state.X[1] = real_variables[2199];
    coolStack.subStack.cell.cathode[1].duTp = real_variables[2200];
    coolStack.subStack.cathode_channel.channel.gas[2].duTp = real_variables[2201];
    coolStack.subStack.cell.X_an[5,4] = real_variables[2202];
    coolStack.subStack.cell.p_cath_partial[4,5] = real_variables[2203];
    coolStack.subStack.cathode_channel.channel.gas[5].h = real_variables[2204];
    coolStack.coolingPipe.Mtot = real_variables[2205];
    coolStack.subStack.cell.p_an_partial[1,1] = real_variables[2207];
    coolStack.coolingPipe.T_wall[5] = real_variables[2209];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[4,2] = real_variables[2210];
    coolStack.subStack.anode_channel.channel.reaction.X_in[4,1] = real_variables[2211];
    coolStack.subStack.cathode_channel.channel.gas[5].state.p = real_variables[2212];
    coolStack.pin_p.i = real_variables[2213];
    coolStack.subStack.cell.X_cath[1,2] = real_variables[2214];
    coolStack.coolingPipe.friction.d[4] = real_variables[2215];
    coolStack.subStack.cell.Q_wall_cell[3] = real_variables[2216];
    coolStack.subStack.anode_channel.port[5].h = real_variables[2217];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[4,5] = real_variables[2218];
    coolStack.subStack.cell.anode[3].duTp = real_variables[2219];
    coolStack.subStack.drain_anode.m_flow = real_variables[2220];
    coolStack.subStack.anode_channel.channel.reaction.Zx[3,1] = real_variables[2221];
    coolStack.subStack.cell.Q_wall_cath_cell[2] = real_variables[2222];
    coolStack.subStack.cathode_channel.channel.rMX[1,3] = real_variables[2224];
    coolStack.subStack.cathode_channel.channel.gas[2].g_formation[3] = real_variables[2226];
    coolStack.coolingPipe.cp[3] = real_variables[2227];
    coolStack.subStack.cell.cathode[1].ddx[4] = real_variables[2228];
    multiDisplaySensor1.multiDisplaySensor.portB.h_outflow = real_variables[2229];
    coolStack.subStack.cell.gasDiffusion.lambda[4] = real_variables[2230];
    coolStack.subStack.cathode_channel.channel.p[4] = real_variables[2231];
    flowAnode.massFlowBoundary.state.X[1] = real_variables[2232];
    coolStack.coolingPipe.summary.T_out = real_variables[2233];
    coolStack.subStack.cell.gasDiffusion.T_cell[4] = real_variables[2234];
    coolStack.subStack.anode_channel.channel.gas[3].ddx[4] = real_variables[2235];
    coolStack.subStack.cell.y_cath[1,1] = real_variables[2236];
    coolStack.subStack.cathode_channel.port[2].X[1] = real_variables[2237];
    coolStack.subStack.cathode_channel.channel.gas[3].p = real_variables[2238];
    coolStack.subStack.cell.cathode[2].T_degC = real_variables[2239];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[3,2] = real_variables[2240];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_outflow.X[1] = real_variables[2241];
    humidification_cath.y_wet_in[4] = real_variables[2242];
    coolStack.subStack.cell.anode[5].Xi[1] = real_variables[2243];
    coolStack.coolingPipe.state[2].p = real_variables[2244];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[1,3] = real_variables[2245];
    flowAnode.massFlowBoundary.X_in[2] = real_variables[2246];
    coolStack.subStack.cathode_channel.channel.summary.T_out = real_variables[2247];
    coolStack.coolingPipe.M[1] = real_variables[2248];
    coolStack.subStack.cathode_channel.channel.friction[4].dA = real_variables[2250];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_outflow.T = real_variables[2251];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_inflow.T = real_variables[2252];
    coolStack.subStack.anode_channel.channel.T[3] = real_variables[2253];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.T = real_variables[2254];
    flowCathode.fluidPort.X_outflow[5] = real_variables[2255];
    coolStack.X_feed_cath[1] = real_variables[2256];
    coolStack.subStack.cell.waterContent.lambda_cath[5] = real_variables[2257];
    coolStack.subStack.anode_channel.channel.U[4] = real_variables[2258];
    coolStack.subStack.cathode_channel.channel.m_flow_mean = real_variables[2259];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.X[1] = real_variables[2260];
    coolStack.subStack.anode_channel.port[3].h = real_variables[2262];
    coolStack.subStack.cell.anode[3].g_formation[1] = real_variables[2264];
    coolStack.subStack.cell.sourceV[3].n.v = real_variables[2265];
    coolStack.subStack.cathode_channel.portB.h_outflow = real_variables[2266];
    coolStack.subStack.anode_channel.channel.rMX[4,2] = real_variables[2267];
    coolStack.subStack.cell.X_an[4,1] = real_variables[2268];
    coolStack.subStack.anode_channel.channel.MX[2,2] = real_variables[2269];
    gasSensor3.portA.X_outflow[2] = real_variables[2270];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB.X[4] = real_variables[2271];
    coolStack.subStack.anode_channel.channel.htcoeff[1].Nu = real_variables[2272];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.X[5] = real_variables[2273];
    coolStack.subStack.cell.cathode[2].Z[1] = real_variables[2274];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[1,3] = real_variables[2275];
    coolStack.subStack.cathode_channel.channel.alpha[5] = real_variables[2276];
    coolStack.coolingPipe.portA[1].m_flow = real_variables[2277];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.X[1] = real_variables[2280];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[2,2] = real_variables[2281];
    coolStack.subStack.cathode_channel.channel.state[4].X[3] = real_variables[2282];
    coolStack.subStack.cathode_channel.channel.gas[1].h_component[5] = real_variables[2283];
    coolStack.coolingPipe.p_sat[5] = real_variables[2284];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB_out.p = real_variables[2285];
    coolStack.subStack.anode_channel.channel.state[2].T = real_variables[2286];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.X[2] = real_variables[2287];
    coolStack.subStack.anode_channel.channel.gas[3].Z[1] = real_variables[2288];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[1,4] = real_variables[2289];
    coolStack.subStack.wall[1].T = real_variables[2290];
    coolStack.coolingPipe.alpha[2] = real_variables[2291];
    coolStack.coolingPipe.htcoeff.Q_s[4] = real_variables[2292];
    gasSensor4.state.X[1] = real_variables[2293];
    display_cath_in.data.X[5] = real_variables[2294];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_inflow.X[3] = real_variables[2295];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[5,2] = real_variables[2297];
    coolStack.subStack.cathode_channel.channel.gas[5].g_formation[3] = real_variables[2298];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[3,4] = real_variables[2300];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA.X[2] = real_variables[2301];
    coolStack.subStack.cell.anode[1].s_component[1] = real_variables[2302];
    coolStack.subStack.cathode_stoich = real_variables[2303];
    coolStack.subStack.anode_channel.channel.reaction.Zx[1,1] = real_variables[2304];
    coolStack.drain_cath.m_flow = real_variables[2305];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.X[3] = real_variables[2306];
    coolStack.subStack.cathode_channel.channel.Q[3] = real_variables[2307];
    coolStack.subStack.cell.cathode[5].u = real_variables[2308];
    coolStack.subStack.anode_channel.channel.htcoeff[5].m_flow = real_variables[2309];
    coolStack.subStack.cell.anode[1].d = real_variables[2310];
    multiDisplaySensor4.portB.p = real_variables[2312];
    coolStack.subStack.cell.cathode[2].g_formation[5] = real_variables[2313];
    coolStack.subStack.anode_channel.channel.gas[5].g_formation[1] = real_variables[2314];
    humidification_cath.x_wet_in[4] = real_variables[2315];
    coolStack.coolingPipe.htcoeff.T[2] = real_variables[2316];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_outflow.X[4] = real_variables[2317];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.X[2] = real_variables[2318];
    coolStack.subStack.cathode_channel.channel.gas[5].Z[4] = real_variables[2319];
    coolStack.subStack.cell.cathode[4].Z[4] = real_variables[2320];
    coolStack.subStack.anode_channel.channel.state[2].p = real_variables[2321];
    coolStack.subStack.cell.concentrationLoss.pin_p[5].v = real_variables[2322];
    coolStack.subStack.anode_channel.channel.htcoeff[4].Re = real_variables[2324];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[5,3] = real_variables[2325];
    coolStack.subStack.cell.gasDiffusion.T_cath[1] = real_variables[2326];
    coolStack.subStack.cell.port_cath[4].mX_flow[3] = real_variables[2327];
    coolStack.subStack.cathode_channel.channel.U[2] = real_variables[2328];
    coolStack.subStack.cell.port_an[4].p = real_variables[2329];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.X[1] = real_variables[2330];
    coolStack.coolingPipe.htcoeff.Pr[2] = real_variables[2331];
    coolStack.subStack.anode_channel.channel.gas[2].Z[2] = real_variables[2332];
    coolStack.subStack.anode_channel.channel.MX[1,1] = real_variables[2333];
    coolStack.subStack.cell.p_an[5] = real_variables[2334];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].alphaA = real_variables[2335];
    humidification_cath.p_in = real_variables[2337];
    coolStack.subStack.anode_channel.channel.T[2] = real_variables[2338];
    flowCathode.X_in[5] = real_variables[2340];
    coolStack.coolingPipe.state[1].p = real_variables[2341];
    coolStack.subStack.anode_channel.channel.state[1].X[4] = real_variables[2342];
    coolStack.subStack.cell.anode[5].state.T = real_variables[2343];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.X[2] = real_variables[2344];
    coolStack.subStack.anode_channel.channel.gas[2].duTp = real_variables[2346];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[3,1] = real_variables[2347];
    coolStack.subStack.cell.cathode[5].X[2] = real_variables[2348];
    coolStack.coolingPipe.volume[4].dM_bulk = real_variables[2349];
    coolStack.subStack.cell.X_an[4,2] = real_variables[2350];
    coolStack.subStack.cell.anode[3].T = real_variables[2351];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[2,4] = real_variables[2352];
    coolStack.pin_n.i = real_variables[2353];
    coolStack.X_feed_cath[2] = real_variables[2354];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[4,4] = real_variables[2355];
    coolStack.subStack.cell.anode[2].dUZT[1] = real_variables[2356];
    coolStack.subStack.cell.cathode[4].p = real_variables[2357];
    humidification_cath.x_wet_in[5] = real_variables[2358];
    multiDisplaySensor4.multiDisplaySensor.u.X[1] = real_variables[2359];
    coolStack.coolingPipe.htcoeff.k_1ph[4] = real_variables[2360];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.p = real_variables[2361];
    coolStack.subStack.cell.port_cath[5].h = real_variables[2362];
    display_cath_out.y[3] = real_variables[2363];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[5,4] = real_variables[2365];
    humidification_cath.y_wet_in[5] = real_variables[2366];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[1,1] = real_variables[2367];
    coolStack.subStack.cell.waterDiffusion.T_cath[3] = real_variables[2368];
    coolStack.subStack.anode_channel.channel.gas[4].dUZT[3] = real_variables[2371];
    display_an_in.data.X_flow[4] = real_variables[2372];
    display_phTmdot_cath_in.h_kJ = real_variables[2374];
    coolStack.subStack.anode_channel.channel.gas[3].s_component[1] = real_variables[2375];
    coolStack.subStack.anode_channel.channel.gas[4].T_degC = real_variables[2376];
    display_phTmdot_w_out.T_degC = real_variables[2377];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[4,4] = real_variables[2378];
    coolStack.coolingPipe.drhodx[5] = real_variables[2379];
    coolStack.subStack.cell.waterDiffusion.T_an[2] = real_variables[2380];
    display_phTmdot_an_out.y.X_flow[3] = real_variables[2381];
    coolStack.subStack.cell.ohmicLoss.T_cell[3] = real_variables[2382];
    coolStack.coolingPipe.sat[4].eta_liq = real_variables[2384];
    coolStack.subStack.cell.waterContent.a_an_H2O[5] = real_variables[2385];
    coolStack.subStack.cathode_channel.channel.gas[1].dUZT[2] = real_variables[2386];
    coolStack.subStack.cell.anode[3].Xi[1] = real_variables[2388];
    coolStack.subStack.cell.anode[3].state.X[2] = real_variables[2389];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[4,4] = real_variables[2390];
    coolStack.subStack.cell.waterDiffusion.m_flow[2] = real_variables[2391];
    coolStack.subStack.cell.y_cath[3,2] = real_variables[2392];
    coolStack.subStack.anode_channel.channel.gas[4].dUZT[1] = real_variables[2393];
    flowCathode.massFlowBoundary.fluidPort.X_outflow[5] = real_variables[2394];
    coolStack.subStack.cell.contaminantsLoss.pin_n[4].i = real_variables[2395];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_inflow.X[1] = real_variables[2396];
    display_phTmdot_w_in.p_bar = real_variables[2397];
    coolStack.subStack.cell.activationLoss.j_ionic[2] = real_variables[2398];
    coolStack.subStack.anode_channel.channel.state[1].p = real_variables[2399];
    coolStack.subStack.cell.waterDiffusion.D_diff[2] = real_variables[2400];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[1,4] = real_variables[2401];
    coolStack.subStack.cathode_channel.channel.friction[5].m_flow = real_variables[2403];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.X[5] = real_variables[2404];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.T = real_variables[2405];
    coolStack.subStack.cell.waterContent.f_w[3] = real_variables[2406];
    coolStack.subStack.cell.anode[1].Xi[3] = real_variables[2407];
    coolStack.subStack.cell.ohmicLoss.T_cell[2] = real_variables[2408];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[5,2] = real_variables[2409];
    coolStack.subStack.cell.anode[5].g_formation[4] = real_variables[2410];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_outflow.p = real_variables[2411];
    coolStack.feed_cath.X_outflow[5] = real_variables[2413];
    coolStack.subStack.cathode_channel.channel.sh[2] = real_variables[2414];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB_out.X[4] = real_variables[2415];
    coolStack.subStack.anode_channel.channel.q_fluid[2].Q_flow = real_variables[2416];
    coolStack.subStack.cell.waterDiffusion.T_cell[3] = real_variables[2417];
    coolStack.subStack.anode_channel.channel.gas[2].ddpT = real_variables[2418];
    coolStack.subStack.cathode_channel.channel.gas[5].s_component[1] = real_variables[2419];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.p = real_variables[2420];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB_out.X[2] = real_variables[2421];
    coolStack.subStack.anode_channel.channel.q[2].T = real_variables[2422];
    coolStack.subStack.cell.T_an[5] = real_variables[2423];
    coolStack.subStack.cell.contaminantsLoss.pin_n[5].i = real_variables[2424];
    coolStack.subStack.anode_channel.channel.M[3] = real_variables[2425];
    flowAnode.massFlowBoundary.fluidPort.X_outflow[3] = real_variables[2426];
    coolStack.coolingPipe.volume[2].h = real_variables[2427];
    coolStack.subStack.cathode_channel.channel.q[3].T = real_variables[2428];
    coolStack.subStack.anode_channel.channel.state[4].X[1] = real_variables[2430];
    coolStack.subStack.cathode_channel.channel.state[3].X[4] = real_variables[2431];
    coolStack.subStack.anode_channel.port[3].X[2] = real_variables[2433];
    coolStack.subStack.cell.T_cell[4] = real_variables[2434];
    coolStack.subStack.anode_channel.channel.gas[4].MM = real_variables[2435];
    coolStack.subStack.cell.anode[2].ddx[1] = real_variables[2436];
    display_phTmdot_an_in.y.mdot = real_variables[2437];
    coolStack.subStack.cell.cathode[2].Z[5] = real_variables[2438];
    coolStack.subStack.cell.p_an_partial[4,1] = real_variables[2440];
    coolStack.subStack.cell.concentrationLoss.pin_n[3].i = real_variables[2441];
    sinkCathode.fluidPort.X_outflow[1] = real_variables[2443];
    coolStack.coolingPipe.volume[1].M = real_variables[2444];
    coolStack.coolingPipe.Q_wall[4] = real_variables[2445];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.X[1] = real_variables[2446];
    coolStack.subStack.cell.anode[1].p_bar = real_variables[2447];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA_out.T = real_variables[2449];
    coolStack.subStack.cell.anode[3].s_component[1] = real_variables[2450];
    coolStack.coolingPipe.T_wall[1] = real_variables[2451];
    coolStack.subStack.anode_channel.port[1].mX_flow[1] = real_variables[2452];
    coolStack.subStack.cell.contaminantsLoss.T_cell[3] = real_variables[2453];
    coolStack.subStack.cell.activationLoss.pin_p[3].i = real_variables[2454];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[1,3] = real_variables[2455];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[4,3] = real_variables[2456];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[4,4] = real_variables[2457];
    coolStack.subStack.cell.cathode[1].h_component[1] = real_variables[2458];
    coolStack.subStack.anode_channel.channel.Q_fluid[5] = real_variables[2459];
    coolStack.coolingPipe.h_vapA = real_variables[2460];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.X[5] = real_variables[2461];
    coolStack.coolingPipe.twoPhaseFraction[4] = real_variables[2463];
    coolStack.subStack.anode_channel.channel.reaction.X_in[2,1] = real_variables[2464];
    coolStack.subStack.cell.sourceV[3].n.i = real_variables[2465];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[5,1] = real_variables[2466];
    coolStack.subStack.cell.anode[5].p_bar = real_variables[2467];
    gasSensor3.state.T = real_variables[2468];
    coolStack.subStack.cell.wall[2].T = real_variables[2470];
    coolStack.coolingPipe.friction.sat[1].d_vap = real_variables[2471];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.p = real_variables[2472];
    sinkAnode.pressureBoundary.X_port[1,1] = real_variables[2473];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.X[3] = real_variables[2474];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[2,4] = real_variables[2476];
    coolStack.subStack.cell.ohmicLoss.ASR[4] = real_variables[2477];
    coolStack.subStack.cathode_channel.channel.gas[1].ddx[5] = real_variables[2478];
    coolStack.coolingPipe.satA.d_vap = real_variables[2479];
    coolStack.coolingPipe.volume[5].dMX[1] = real_variables[2480];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[1,1] = real_variables[2481];
    coolStack.subStack.cell.concentrationLoss.E_loss_cell[3] = real_variables[2482];
    sinkCathode.X_in[5] = real_variables[2483];
    coolStack.subStack.cell.cathode[4].Z[2] = real_variables[2484];
    coolStack.subStack.anode_channel.channel.gas[4].state.T = real_variables[2485];
    coolStack.subStack.cell.concentrationLoss.powerLoss_stack = real_variables[2486];
    flowCathode.massFlowBoundary.state.X[3] = real_variables[2487];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[3,3] = real_variables[2488];
    coolStack.coolingPipe.quality[4] = real_variables[2489];
    coolStack.subStack.cell.waterContent.p_cath_partial[2,1] = real_variables[2490];
    coolStack.subStack.checkMassBalance = real_variables[2491];
    coolStack.subStack.cell.wall_cath[4].Q_flow = real_variables[2492];
    sinkAnode.X_in[2] = real_variables[2493];
    coolStack.subStack.cathode_channel.channel.gas[5].X[5] = real_variables[2494];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.X[5] = real_variables[2495];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.X[4] = real_variables[2496];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[4,2] = real_variables[2497];
    sinkCathode.fluidPort.X_outflow[2] = real_variables[2498];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_outflow.p = real_variables[2500];
    ground.p.i = real_variables[2501];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[5,3] = real_variables[2502];
    coolStack.coolingPipe.cv[2] = real_variables[2503];
    coolStack.subStack.cell.port_an[1].m_flow = real_variables[2504];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[3,4] = real_variables[2505];
    gain.y = real_variables[2506];
    gasSensor1.u.X_flow[3] = real_variables[2507];
    coolStack.subStack.summary.Q_stack = real_variables[2509];
    coolStack.subStack.cell.X_cath[3,3] = real_variables[2511];
    coolStack.subStack.cell.concentrationLoss.E_loss_stack[1] = real_variables[2512];
    coolStack.subStack.cathode_channel.channel.pA = real_variables[2513];
    flowAnode.massFlowBoundary.state.p = real_variables[2514];
    coolStack.coolingPipe.portB[1].p = real_variables[2515];
    coolStack.subStack.cell.cathode[5].u_comp[4] = real_variables[2516];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_rescaled[2] = real_variables[2517];
    coolStack.subStack.cell.h_cath[1] = real_variables[2518];
    coolStack.subStack.cathode_channel.channel.gas[4].ddx[5] = real_variables[2519];
    sourceW.massFlowBoundary.d = real_variables[2520];
    coolStack.subStack.cell.waterDiffusion.lambda_an[3] = real_variables[2521];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_outflow.X[1] = real_variables[2522];
    coolStack.subStack.cell.activationLoss.E_loss_stack[1] = real_variables[2523];
    coolStack.summary.T_stack[4] = real_variables[2524];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].eta = real_variables[2525];
    coolStack.subStack.cathode_channel.channel.portB[1].X_outflow[4] = real_variables[2527];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.X[3] = real_variables[2528];
    coolStack.subStack.cell.anode[2].T = real_variables[2529];
    coolStack.subStack.cell.ohmicLoss.sigma[2] = real_variables[2530];
    coolStack.subStack.cell.waterDiffusion.T_cath[5] = real_variables[2531];
    display_phTmdot_an_in.y.X_flow[1] = real_variables[2532];
    gasSensor3.state.X[4] = real_variables[2533];
    coolStack.subStack.anode_channel.channel.reaction.MM[3] = real_variables[2534];
    coolStack.subStack.cell.cathode[1].state.X[3] = real_variables[2535];
    display_cath_out.y[5] = real_variables[2537];
    coolStack.subStack.cell.P_cell[2] = real_variables[2538];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.p = real_variables[2539];
    coolStack.subStack.cell.anode[2].u = real_variables[2540];
    coolStack.drain_an.X_outflow[1] = real_variables[2542];
    flowCathode.massFlowBoundary.fluidPort.X_outflow[1] = real_variables[2543];
    coolStack.subStack.cell.cathode[2].h = real_variables[2544];
    coolStack.coolingPipe.h[1] = real_variables[2545];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[3,5] = real_variables[2546];
    coolStack.subStack.cathode_channel.channel.M[5] = real_variables[2547];
    coolStack.subStack.cell.T_cell_avg = real_variables[2548];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_rescaled[1] = real_variables[2549];
    coolStack.subStack.cell.sourceV[1].p.v = real_variables[2550];
    sinkCathode.pressureBoundary.fluidPort[1].h_outflow = real_variables[2551];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_inflow.X[4] = real_variables[2552];
    coolStack.subStack.cell.Q_wall_stack = real_variables[2553];
    coolStack.subStack.cathode_channel.channel.gas[3].h_component[4] = real_variables[2554];
    coolStack.coolingPipe.friction.sat[3].d_liq = real_variables[2555];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[5,4] = real_variables[2556];
    coolStack.subStack.cell.anode[4].X[4] = real_variables[2557];
    coolStack.coolingPipe.Fr[3] = real_variables[2558];
    coolStack.coolingPipe.volume[4].U = real_variables[2559];
    gasSensor3.portA.h_outflow = real_variables[2560];
    coolStack.subStack.cathode_channel.channel.gas[4].Z[1] = real_variables[2561];
    coolStack.subStack.cell.X_cath[5,2] = real_variables[2562];
    coolStack.coolingPipe.htcoeff.Nu_1ph[2] = real_variables[2563];
    coolStack.subStack.cell.wall[1].T = real_variables[2564];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA.T = real_variables[2565];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_outflow.X[3] = real_variables[2566];
    coolStack.subStack.anode_channel.channel.friction[3].dA = real_variables[2567];
    coolStack.subStack.anode_channel.channel.gas[1].d = real_variables[2568];
    coolStack.subStack.anode_channel.channel.state[5].X[4] = real_variables[2569];
    coolStack.coolingPipe.volume[3].ddhp = real_variables[2570];
    coolStack.coolingPipe.friction.sat[2].d_liq = real_variables[2571];
    coolStack.subStack.cell.anode[5].X[3] = real_variables[2572];
    sinkCathode.pressureBoundary.fluidPort[1].X_outflow[3] = real_variables[2573];
    coolStack.subStack.cathode_channel.channel.Q_fluid[1] = real_variables[2574];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB_out.X[3] = real_variables[2575];
    coolStack.subStack.cathode_channel.channel.gas[2].u = real_variables[2576];
    coolStack.coolingPipe.p_redA = real_variables[2577];
    coolStack.subStack.cathode_channel.channel.gas[4].Z[4] = real_variables[2578];
    coolStack.subStack.cell.anode[1].h = real_variables[2580];
    coolStack.coolingPipe.friction.sat[4].eta_liq = real_variables[2581];
    coolStack.subStack.cathode_channel.channel.p[1] = real_variables[2582];
    coolStack.subStack.anode_channel.channel.gas[4].ddx[1] = real_variables[2583];
    coolStack.subStack.cathode_channel.channel.state[3].X[5] = real_variables[2585];
    coolStack.subStack.cathode_channel.channel.gas[5].h_component[1] = real_variables[2586];
    coolStack.subStack.cathode_channel.port[1].m_flow = real_variables[2587];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.X[1] = real_variables[2589];
    display_phTmdot_an_out.T_degC = real_variables[2590];
    coolStack.coolingPipe.volume[5].ddhp = real_variables[2591];
    coolStack.subStack.anode_channel.channel.gas[5].Rg = real_variables[2592];
    coolStack.subStack.cell.anode[3].ddx[2] = real_variables[2593];
    coolStack.subStack.cell.port_an[3].X[4] = real_variables[2594];
    coolStack.subStack.cell.cathode[3].s_component[1] = real_variables[2596];
    coolStack.coolingPipe.htcoeff.alpha[2] = real_variables[2597];
    display_an_in.data.X_flow[1] = real_variables[2598];
    coolStack.subStack.cell.activationLoss.j_ionic[5] = real_variables[2600];
    coolStack.subStack.cell.anode[5].u_comp[2] = real_variables[2601];
    coolStack.coolingPipe.friction.eta[5] = real_variables[2602];
    coolStack.subStack.anode_channel.port[4].h = real_variables[2603];
    coolStack.subStack.anode_channel.checkMassBalance = real_variables[2604];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.p = real_variables[2606];
    display_phTmdot_an_in.y.X[3] = real_variables[2608];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[5,4] = real_variables[2609];
    coolStack.coolingPipe.h[2] = real_variables[2610];
    coolStack.subStack.cell.waterDiffusion.T_cath[1] = real_variables[2611];
    coolStack.subStack.cathode_channel.channel.T[5] = real_variables[2612];
    coolStack.subStack.cell.anode[4].h_component[4] = real_variables[2613];
    coolStack.subStack.anode_channel.channel.htcoeff[2].Nu = real_variables[2614];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[1,5] = real_variables[2615];
    coolStack.subStack.cell.cathode[4].h_component[1] = real_variables[2616];
    coolStack.subStack.cathode_channel.channel.gas[1].Xi[3] = real_variables[2617];
    coolStack.coolingPipe.Q[3] = real_variables[2618];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[3,4] = real_variables[2619];
    coolStack.coolingPipe.eta[4] = real_variables[2620];
    coolStack.subStack.cell.X_cath[4,3] = real_variables[2621];
    coolStack.subStack.cathode_channel.channel.portB[1].X_outflow[3] = real_variables[2622];
    coolStack.subStack.cell.cathode[3].Z[5] = real_variables[2623];
    coolStack.subStack.anode_channel.channel.portA[1].h_outflow = real_variables[2624];
    gasSensor4.u.X_flow[1] = real_variables[2625];
    coolStack.subStack.feed_cathode.h_outflow = real_variables[2626];
    coolStack.coolingPipe.T_vap[5] = real_variables[2627];
    coolStack.subStack.anode_channel.channel.gas[5].h_component[2] = real_variables[2628];
    coolStack.coolingPipe.friction.d[5] = real_variables[2631];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[3,2] = real_variables[2632];
    coolStack.coolingPipe.cp[4] = real_variables[2633];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.T = real_variables[2634];
    coolStack.subStack.cell.port_cath[4].h = real_variables[2635];
    coolStack.subStack.cathode_channel.channel.reaction.p[1] = real_variables[2636];
    coolStack.subStack.anode_channel.channel.reaction.X_out[1,2] = real_variables[2637];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.X[2] = real_variables[2638];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[4,4] = real_variables[2639];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB.X[4] = real_variables[2640];
    coolStack.subStack.cell.p_an_partial[4,3] = real_variables[2642];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[5,4] = real_variables[2643];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[3,2] = real_variables[2644];
    display_phTmdot_an_in.y.X_flow[4] = real_variables[2645];
    coolStack.subStack.cell.port_cath[5].p = real_variables[2646];
    coolStack.subStack.cathode_channel.channel.gas[2].state.X[2] = real_variables[2647];
    coolStack.subStack.cell.cathode[5].s_component[5] = real_variables[2649];
    coolStack.subStack.cathode_channel.channel.gas[3].state.T = real_variables[2650];
    coolStack.subStack.cell.X_cath[4,5] = real_variables[2651];
    coolStack.subStack.cell.cathode[2].ddx[1] = real_variables[2652];
    coolStack.coolingPipe.d[5] = real_variables[2653];
    humidification_cath.V_flow_dry_in = real_variables[2654];
    coolStack.subStack.anode_channel.channel.p[4] = real_variables[2655];
    coolStack.coolingPipe.friction.twoPhaseFraction[2] = real_variables[2656];
    coolStack.subStack.anode_channel.channel.gas[1].u = real_variables[2657];
    coolStack.coolingPipe.volume[1].d = real_variables[2658];
    coolStack.subStack.anode_channel.port[1].X[2] = real_variables[2659];
    coolStack.subStack.anode_channel.channel.gas[2].g_formation[1] = real_variables[2660];
    coolStack.subStack.cathode_channel.channel.gas[1].dUZT[5] = real_variables[2661];
    coolStack.subStack.anode_channel.channel.htcoeff[2].eta = real_variables[2662];
    flowCathode.massFlowBoundary.fluidPort.m_flow = real_variables[2663];
    coolStack.subStack.cell.ohmicLoss.ASR[3] = real_variables[2665];
    gasSensor1.state.T = real_variables[2666];
    gasSensor3.portB.X_outflow[2] = real_variables[2667];
    coolStack.subStack.anode_channel.channel.reaction.a[1] = real_variables[2668];
    display_phTmdot_an_in.y.pressure = real_variables[2669];
    coolStack.subStack.cell.cathode[5].d = real_variables[2670];
    display_phTmdot_cath_in.y.mdot = real_variables[2671];
    coolStack.subStack.anode_channel.channel.reaction.Zx[4,1] = real_variables[2672];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[4,4] = real_variables[2674];
    coolStack.subStack.cell.cathode[5].g_formation[3] = real_variables[2675];
    coolStack.subStack.cell.anode[3].u_comp[4] = real_variables[2676];
    sinkCathode.pressureBoundary.X_port[1,5] = real_variables[2677];
    coolStack.subStack.cell.port_cath[2].X[5] = real_variables[2678];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.T = real_variables[2679];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_outflow.X[1] = real_variables[2680];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[4,3] = real_variables[2681];
    flowCathode.massFlowBoundary.X_in[3] = real_variables[2682];
    coolStack.subStack.cell.concentrationLoss.pin_n[2].v = real_variables[2683];
    coolStack.coolingPipe.volume[1].U = real_variables[2684];
    coolStack.summary.T_stack[5] = real_variables[2686];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_outflow.p = real_variables[2688];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[1,3] = real_variables[2689];
    display_cath_in.X_Ar = real_variables[2690];
    coolStack.subStack.cell.ohmicLoss.pin_n[3].i = real_variables[2691];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.X[2] = real_variables[2692];
    sinkCathode.fluidPort.X_outflow[4] = real_variables[2693];
    coolStack.subStack.cathode_channel.channel.rMX[2,5] = real_variables[2694];
    coolStack.subStack.anode_channel.wall[2].Q_flow = real_variables[2696];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[5,2] = real_variables[2697];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.T = real_variables[2698];
    coolStack.coolingPipe.friction.sat[1].d_liq = real_variables[2699];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[1,5] = real_variables[2701];
    coolStack.subStack.anode_channel.channel.gas[4].X[4] = real_variables[2702];
    coolStack.subStack.cathode_channel.channel.reaction.dmdt = real_variables[2705];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[1,2] = real_variables[2706];
    coolStack.subStack.cell.cathode[4].p_bar = real_variables[2707];
    coolStack.subStack.anode_channel.channel.gas[2].u_comp[4] = real_variables[2708];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[1,3] = real_variables[2709];
    sinkAnode.pressureBoundary.h_port[1] = real_variables[2710];
    coolStack.subStack.cell.cathode[3].duTp = real_variables[2711];
    coolStack.subStack.cathode_channel.channel.gas[4].state.X[1] = real_variables[2712];
    coolStack.subStack.cathode_channel.port[1].X[4] = real_variables[2715];
    coolStack.subStack.anode_channel.channel.state[6].X[2] = real_variables[2716];
    coolStack.subStack.cell.anode[5].Z[2] = real_variables[2717];
    coolStack.coolingPipe.volume[1].dMX[1] = real_variables[2719];
    coolStack.subStack.anode_channel.port[2].h = real_variables[2720];
    coolStack.subStack.cell.waterContent.f_w[4] = real_variables[2721];
    coolStack.subStack.cell.dTdt[2] = real_variables[2722];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[2,3] = real_variables[2723];
    coolStack.subStack.cathode_channel.channel.q_fluid[1].T = real_variables[2725];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA.X[3] = real_variables[2726];
    coolStack.subStack.cell.E_act_cell[5] = real_variables[2727];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.p = real_variables[2728];
    multiDisplaySensor1.multiDisplaySensor.u.X[1] = real_variables[2729];
    coolStack.subStack.cathode_channel.channel.rMX[2,3] = real_variables[2730];
    sinkAnode.pressureBoundary.X_in[4] = real_variables[2731];
    coolStack.subStack.anode_channel.channel.reaction.y_out[4,2] = real_variables[2732];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[1,3] = real_variables[2734];
    coolStack.coolingPipe.T_vap[1] = real_variables[2735];
    coolStack.subStack.cell.port_an[5].X[2] = real_variables[2737];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_real[1] = real_variables[2738];
    coolStack.subStack.cell.anode[3].g_formation[3] = real_variables[2739];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_real[4] = real_variables[2741];
    coolStack.subStack.cathode_channel.channel.friction[5].dB = real_variables[2742];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[4,3] = real_variables[2745];
    coolStack.subStack.cell.anode[1].MM = real_variables[2746];
    coolStack.coolingPipe.htcoeff.sat[1].cp_liq = real_variables[2747];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_outflow.T = real_variables[2748];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_inflow.X[4] = real_variables[2749];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_rescaled[3] = real_variables[2750];
    coolStack.subStack.cell.cathode[5].ddx[5] = real_variables[2751];
    coolStack.subStack.cell.anode[2].Z[1] = real_variables[2752];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.T = real_variables[2753];
    coolStack.subStack.cathode_channel.channel.gas[5].dUZT[3] = real_variables[2754];
    coolStack.subStack.cell.p_an[2] = real_variables[2756];
    coolStack.subStack.cell.E_ohm_cell[2] = real_variables[2757];
    gasSensor1.u.X_flow[4] = real_variables[2758];
    coolStack.coolingPipe.quality[3] = real_variables[2759];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[1,1] = real_variables[2760];
    coolStack.subStack.cell.activationLoss.E_loss_stack[5] = real_variables[2762];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_outflow.X[2] = real_variables[2763];
    coolStack.subStack.summary.anode_stoich = real_variables[2764];
    coolStack.coolingPipe.friction.twoPhaseFraction[3] = real_variables[2765];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA.X[3] = real_variables[2766];
    coolStack.subStack.cell.p_cath[5] = real_variables[2769];
    coolStack.coolingPipe.Re_liq[5] = real_variables[2770];
    coolStack.subStack.cell.port_an[1].h = real_variables[2771];
    coolStack.coolingPipe.friction.dp[4] = real_variables[2772];
    coolStack.coolingPipe.satA.eta_liq = real_variables[2773];
    coolStack.subStack.cathode_channel.channel.rMX[3,3] = real_variables[2774];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[3,3] = real_variables[2775];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA.X[1] = real_variables[2776];
    coolStack.subStack.cell.y_an[2,1] = real_variables[2777];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[5,2] = real_variables[2778];
    display_phTmdot_an_out.mdot = real_variables[2779];
    flowAnode.massFlowBoundary.fluidPort.m_flow = real_variables[2780];
    coolStack.coolingPipe.T_liq[2] = real_variables[2781];
    coolStack.coolingPipe.sat[2].eta_liq = real_variables[2782];
    coolStack.subStack.cell.waterContent.p_an_partial[1,3] = real_variables[2783];
    coolStack.subStack.cell.pin_p.i = real_variables[2785];
    coolStack.coolingPipe.volume[3].U = real_variables[2786];
    coolStack.subStack.cell.anode[2].state.X[4] = real_variables[2787];
    coolStack.subStack.cathode_channel.channel.gas[4].Z[2] = real_variables[2788];
    coolStack.subStack.cathode_channel.channel.gas[3].dUZT[3] = real_variables[2790];
    coolStack.subStack.cathode_channel.channel.gas[2].Z[2] = real_variables[2791];
    coolStack.subStack.cathode_channel.channel.gas[1].Xi[5] = real_variables[2792];
    coolStack.subStack.cathode_channel.channel.gas[1].h_component[3] = real_variables[2794];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[3,1] = real_variables[2796];
    gasSensor4.portB.h_outflow = real_variables[2798];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.T = real_variables[2799];
    coolStack.coolingPipe.v[6] = real_variables[2800];
    coolStack.subStack.cell.h_cath[3] = real_variables[2801];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[5,4] = real_variables[2802];
    coolStack.subStack.anode_channel.channel.MX[1,2] = real_variables[2804];
    coolStack.subStack.cathode_channel.channel.state[1].p = real_variables[2805];
    coolStack.coolingPipe.volume[2].state.p = real_variables[2806];
    gasSensor2.portA.X_outflow[4] = real_variables[2807];
    coolStack.subStack.cell.anode[3].Xi[4] = real_variables[2809];
    coolStack.subStack.cell.waterContent.a_an_H2O[1] = real_variables[2810];
    coolStack.subStack.cell.anode[3].Z[4] = real_variables[2811];
    coolStack.subStack.cell.waterContent.p_cath_partial[4,4] = real_variables[2812];
    coolStack.subStack.anode_channel.channel.reaction.p[4] = real_variables[2814];
    coolStack.subStack.cell.cathode[4].ddx[5] = real_variables[2815];
    coolStack.subStack.anode_channel.channel.reaction.X_out[5,1] = real_variables[2816];
    coolStack.subStack.cell.anode[2].ddTp = real_variables[2817];
    gasSensor1.portA.X_outflow[5] = real_variables[2818];
    coolStack.subStack.cell.anode[2].s_component[4] = real_variables[2819];
    coolStack.subStack.cell.waterDiffusion.lambda_an[2] = real_variables[2821];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.p = real_variables[2822];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_rescaled[1] = real_variables[2823];
    coolStack.subStack.cathode_channel.portB.X_outflow[4] = real_variables[2824];
    coolStack.subStack.anode_channel.channel.friction[3].m_flow = real_variables[2825];
    coolStack.subStack.cathode_channel.channel.gas[2].T_degC = real_variables[2826];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].Nu = real_variables[2828];
    sinkAnode.pressureBoundary.fluidPort[1].X_outflow[3] = real_variables[2829];
    coolStack.subStack.cathode_channel.channel.alpha[1] = real_variables[2830];
    coolStack.subStack.cell.electroOsmoticDrag.m_flow[3] = real_variables[2831];
    coolStack.coolingPipe.Fr[5] = real_variables[2832];
    coolStack.subStack.anode_channel.channel.reaction.Ztot[4] = real_variables[2833];
    coolStack.subStack.cathode_channel.port[2].X[3] = real_variables[2834];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_inflow.X[2] = real_variables[2835];
    coolStack.subStack.anode_channel.channel.p[1] = real_variables[2836];
    display_phTmdot_an_in.h_kJ = real_variables[2837];
    coolStack.subStack.anode_channel.channel.gas[5].Z[3] = real_variables[2839];
    coolStack.coolingPipe.friction.eta[1] = real_variables[2840];
    coolStack.subStack.cell.waterContent.p_cath_partial[3,3] = real_variables[2841];
    coolStack.subStack.cathode_channel.channel.gas[5].state.X[2] = real_variables[2842];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.X[3] = real_variables[2843];
    coolStack.subStack.cell.cathode[1].h_component[5] = real_variables[2844];
    coolStack.subStack.cell.h_an[3] = real_variables[2845];
    coolStack.subStack.cell.gasDiffusion.f_w[1] = real_variables[2846];
    coolStack.subStack.cathode_channel.channel.gas[2].h_component[1] = real_variables[2848];
    coolStack.subStack.cell.port_cath[1].X[4] = real_variables[2849];
    sourceW.massFlowBoundary.fluidPort.p = real_variables[2850];
    coolStack.subStack.cell.X_cath[2,4] = real_variables[2851];
    coolStack.coolingPipe.htcoeff.T[5] = real_variables[2852];
    coolStack.subStack.cell.h_conv_cath[5] = real_variables[2853];
    coolStack.subStack.anode_channel.channel.rMX[3,1] = real_variables[2854];
    coolStack.subStack.cathode_channel.channel.gas[2].ddx[4] = real_variables[2855];
    coolStack.subStack.cell.anode[1].state.p = real_variables[2857];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[5,4] = real_variables[2858];
    coolStack.coolingPipe.volume[5].U = real_variables[2859];
    coolStack.subStack.anode_channel.channel.gas[3].Xi[3] = real_variables[2860];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[4,2] = real_variables[2861];
    coolStack.subStack.anode_channel.channel.gas[2].state.X[2] = real_variables[2862];
    coolStack.coolingPipe.p_redB = real_variables[2863];
    coolStack.subStack.cathode_channel.channel.MX[2,2] = real_variables[2864];
    coolStack.subStack.cathode_channel.channel.gas[3].g_formation[1] = real_variables[2865];
    gasSensor3.portB.X_outflow[4] = real_variables[2866];
    coolStack.subStack.cell.anode[1].X[1] = real_variables[2867];
    coolStack.subStack.cell.X_cath[4,1] = real_variables[2868];
    coolStack.subStack.cell.waterDiffusion.lambda[5] = real_variables[2869];
    coolStack.subStack.anode_channel.channel.gas[5].s_component[4] = real_variables[2870];
    coolStack.coolingPipe.dp[5] = real_variables[2871];
    coolStack.subStack.cell.wall_cath[1].Q_flow = real_variables[2872];
    coolStack.subStack.cell.cathode[2].s_component[4] = real_variables[2873];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB_out.X[1] = real_variables[2874];
    coolStack.subStack.cell.cathode[1].h_component[4] = real_variables[2875];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.T = real_variables[2876];
    coolStack.subStack.cell.cathode[4].s_component[3] = real_variables[2880];
    coolStack.coolingPipe.friction.m_flow[3] = real_variables[2881];
    coolStack.subStack.cathode_channel.channel.gas[2].cp = real_variables[2882];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA_out.X[3] = real_variables[2883];
    coolStack.subStack.cell.waterDiffusion.lambda[1] = real_variables[2884];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[1,3] = real_variables[2885];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[5,1] = real_variables[2886];
    gasSensor2.u.X[3] = real_variables[2887];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[4,1] = real_variables[2888];
    coolStack.subStack.cathode_channel.channel.gas[3].Z[3] = real_variables[2889];
    coolStack.coolingPipe.friction.sat[4].d_vap = real_variables[2891];
    coolStack.coolingPipe.T_liqB = real_variables[2892];
    coolStack.subStack.cell.gasDiffusion.T_cath[2] = real_variables[2893];
    coolStack.subStack.cell.X_cath[4,4] = real_variables[2894];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.X[2] = real_variables[2895];
    coolStack.coolingPipe.sat[2].d_liq = real_variables[2896];
    coolStack.subStack.cell.ohmicLoss.lambda_mean[4] = real_variables[2897];
    display_cath_out.X_H2O = real_variables[2898];
    sinkCathode.p_in = real_variables[2899];
    coolStack.subStack.cathode_channel.port[5].m_flow = real_variables[2900];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[3,5] = real_variables[2901];
    coolStack.subStack.cell.cathode[1].ddx[5] = real_variables[2902];
    coolStack.subStack.cell.port_an[1].X[4] = real_variables[2903];
    humidification_cath.m_flow_wet_in = real_variables[2904];
    coolStack.subStack.cell.waterContent.a_cell_H2O[2] = real_variables[2905];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.X[3] = real_variables[2906];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[1,3] = real_variables[2907];
    coolStack.subStack.cathode_channel.channel.gas[1].X[4] = real_variables[2908];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[3,3] = real_variables[2909];
    coolStack.subStack.anode_channel.channel.htcoeff[1].eta = real_variables[2911];
    coolStack.subStack.anode_channel.channel.friction[2].dB = real_variables[2912];
    coolStack.subStack.summary.dp_cathode = real_variables[2913];
    multiDisplaySensor4.multiDisplaySensor.u.mdot = real_variables[2914];
    coolStack.coolingPipe.volume[3].h = real_variables[2916];
    coolStack.subStack.cell.cathode[3].Xi[2] = real_variables[2918];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA.X[4] = real_variables[2919];
    coolStack.coolingPipe.sh[1] = real_variables[2920];
    flowCathode.massFlowBoundary.state.X[1] = real_variables[2921];
    coolStack.subStack.cell.j_ionic[2] = real_variables[2922];
    gasSensor2.portA.p = real_variables[2923];
    coolStack.subStack.cell.ohmicLoss.pin_p[1].i = real_variables[2925];
    coolStack.subStack.anode_channel.channel.gas[5].X[2] = real_variables[2926];
    coolStack.subStack.cell.contaminantsLoss.y_an[1,1] = real_variables[2927];
    sinkAnode.pressureBoundary.state.X[2] = real_variables[2928];
    multiDisplaySensor1.portB.m_flow = real_variables[2930];
    sinkCathode.pressureBoundary.fluidPort[1].p = real_variables[2931];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB_out.X[3] = real_variables[2932];
    coolStack.subStack.anode_channel.channel.reaction.X_in[4,2] = real_variables[2933];
    coolStack.coolingPipe.htcoeff.T_wall[2] = real_variables[2934];
    coolStack.subStack.cathode_channel.channel.gas[5].Z[2] = real_variables[2936];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA_out.X[4] = real_variables[2937];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_outflow.X[3] = real_variables[2938];
    coolStack.subStack.cathode_channel.channel.reaction.T[1] = real_variables[2940];
    coolStack.subStack.cathode_channel.channel.MX[2,5] = real_variables[2941];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB_out.T = real_variables[2942];
    coolStack.subStack.cell.cathode[5].state.X[2] = real_variables[2943];
    coolStack.coolingPipe.alpha[3] = real_variables[2944];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[4,3] = real_variables[2945];
    coolStack.coolingPipe.lam[1] = real_variables[2946];
    multiDisplaySensor1.multiDisplaySensor.u.enthalpy = real_variables[2947];
    coolStack.subStack.cell.port_cath[5].X[4] = real_variables[2948];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[3,3] = real_variables[2950];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.X[5] = real_variables[2951];
    coolStack.subStack.anode_channel.channel.gas[2].d = real_variables[2952];
    coolStack.subStack.cathode_channel.channel.summary.d_in = real_variables[2953];
    coolStack.subStack.anode_channel.channel.gas[3].u_comp[3] = real_variables[2954];
    display_cath_in.data.X_flow[1] = real_variables[2955];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[1,3] = real_variables[2956];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[1,3] = real_variables[2957];
    coolStack.coolingPipe.friction.sat[4].d_liq = real_variables[2958];
    coolStack.subStack.anode_channel.channel.htcoeff[5].alphaA = real_variables[2959];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[3,3] = real_variables[2960];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.X[3] = real_variables[2961];
    coolStack.subStack.cell.port_cath[5].H_flow = real_variables[2962];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB_out.X[1] = real_variables[2963];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.X[1] = real_variables[2964];
    coolStack.subStack.cell.mX_flow_an_transport[1,2] = real_variables[2965];
    coolStack.subStack.cell.cathode[1].u_comp[4] = real_variables[2966];
    coolStack.subStack.drain_cathode.X_outflow[1] = real_variables[2967];
    gasSensor4.portA.X_outflow[3] = real_variables[2968];
    coolStack.coolingPipe.friction.sat[6].d_liq = real_variables[2969];
    coolStack.coolingPipe.friction.sigma[6] = real_variables[2971];
    display_phTmdot_cath_in.p_bar = real_variables[2972];
    coolStack.subStack.cathode_channel.channel.gas[4].ddpT = real_variables[2974];
    coolStack.coolingPipe.volume[1].h = real_variables[2975];
    coolStack.subStack.cathode_channel.channel.gas[1].T_degC = real_variables[2976];
    coolStack.subStack.cathode_channel.channel.gas[5].duTp = real_variables[2977];
    coolStack.subStack.anode_channel.channel.reaction.Zx[2,4] = real_variables[2978];
    coolStack.subStack.cell.anode[4].state.X[3] = real_variables[2979];
    coolStack.subStack.anode_channel.channel.sh[5] = real_variables[2980];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[4,1] = real_variables[2981];
    coolStack.subStack.cell.waterDiffusion.lambda[4] = real_variables[2983];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[2,3] = real_variables[2984];
    coolStack.subStack.wall[2].T = real_variables[2985];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.X[5] = real_variables[2987];
    coolStack.subStack.cell.mX_flow_cath_transport[3,3] = real_variables[2988];
    sinkP.pressureBoundary.fluidPort[1].m_flow = real_variables[2989];
    coolStack.coolingPipe.volume[4].ddhp = real_variables[2990];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[2,1] = real_variables[2991];
    coolStack.subStack.cathode_channel.channel.gas[2].state.X[1] = real_variables[2992];
    coolStack.subStack.cell.h_conv_cath[4] = real_variables[2995];
    coolStack.subStack.cathode_channel.channel.Q[5] = real_variables[2996];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.X[4] = real_variables[2998];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[4,1] = real_variables[2999];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[2,2] = real_variables[3000];
    coolStack.subStack.cell.gasDiffusion.f_w[4] = real_variables[3001];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[2,1] = real_variables[3002];
    humidification_cath.y_wet_in[3] = real_variables[3004];
    coolStack.coolingPipe.alpha[1] = real_variables[3006];
    coolStack.subStack.anode_channel.channel.gas[5].g_formation[3] = real_variables[3007];
    coolStack.subStack.cathode_channel.port[5].H_flow = real_variables[3008];
    coolStack.coolingPipe.volume[1].dE = real_variables[3009];
    coolStack.subStack.cell.ohmicLoss.pin_p[3].i = real_variables[3010];
    display_phTmdot_w_out.y.enthalpy = real_variables[3011];
    coolStack.subStack.cathode_channel.channel.state[2].p = real_variables[3012];
    display_phTmdot_an_out.y.X_flow[4] = real_variables[3013];
    display_cath_in.data.X_flow[5] = real_variables[3014];
    gasSensor4.state.X[4] = real_variables[3015];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA.T = real_variables[3016];
    coolStack.subStack.cell.cathode[3].Xi[5] = real_variables[3017];
    coolStack.subStack.cell.concentrationLoss.pin_p[3].v = real_variables[3018];
    coolStack.subStack.cathode_channel.port[4].X[5] = real_variables[3020];
    coolStack.subStack.cathode_channel.port[5].X[1] = real_variables[3021];
    coolStack.subStack.cell.cathode[5].h_component[5] = real_variables[3022];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[3,1] = real_variables[3023];
    coolStack.subStack.cell.waterContent.T_cath[2] = real_variables[3024];
    sinkAnode.pressureBoundary.fluidPort[1].X_outflow[1] = real_variables[3025];
    multiDisplaySensor4.portB.h_outflow = real_variables[3026];
    coolStack.feed_an.p = real_variables[3028];
    coolStack.subStack.cell.cathode[2].Xi[3] = real_variables[3031];
    coolStack.subStack.cell.ohmicLoss.ASR[1] = real_variables[3032];
    coolStack.subStack.cathode_channel.channel.gas[3].d = real_variables[3033];
    coolStack.subStack.cell.waterDiffusion.T_cell[1] = real_variables[3035];
    coolStack.coolingPipe.T_vapA = real_variables[3036];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.p = real_variables[3037];
    multiDisplaySensor4.portB.m_flow = real_variables[3038];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[2,5] = real_variables[3040];
    coolStack.subStack.anode_channel.channel.gas[5].ddTp = real_variables[3042];
    coolStack.subStack.cathode_channel.channel.gas[2].p_bar = real_variables[3044];
    coolStack.subStack.cell.anode[2].s_component[1] = real_variables[3045];
    gasSensor4.u.X[5] = real_variables[3046];
    coolStack.subStack.cell.activationLoss.pin_n[1].v = real_variables[3047];
    coolStack.subStack.cell.electroOsmoticDrag.m_flow[1] = real_variables[3048];
    coolStack.subStack.cell.waterContent.f_w[2] = real_variables[3049];
    coolStack.coolingPipe.htcoeff.Re_liq[5] = real_variables[3050];
    sinkAnode.p_in = real_variables[3051];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[3,3] = real_variables[3052];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_inflow.X[4] = real_variables[3053];
    coolStack.subStack.cell.cathode[3].g_formation[4] = real_variables[3054];
    coolStack.subStack.cell.port_an[2].mX_flow[1] = real_variables[3055];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_outflow.X[3] = real_variables[3056];
    coolStack.subStack.anode_channel.wall[4].Q_flow = real_variables[3057];
    coolStack.subStack.dUdt = real_variables[3058];
    coolStack.subStack.cell.concentrationLoss.pin_p[2].i = real_variables[3059];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[3,5] = real_variables[3060];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_outflow.X[1] = real_variables[3061];
    coolStack.subStack.anode_channel.channel.gas[3].p = real_variables[3062];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.X[1] = real_variables[3063];
    coolStack.subStack.anode_channel.channel.gas[4].cp = real_variables[3065];
    coolStack.subStack.cathode_channel.port[5].h = real_variables[3066];
    coolStack.subStack.cathode_channel.channel.state[3].p = real_variables[3067];
    coolStack.subStack.cell.electroOsmoticDrag.I_cell[3] = real_variables[3068];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA_out.X[4] = real_variables[3069];
    coolStack.subStack.cell.gasDiffusion.f_w[2] = real_variables[3070];
    coolStack.subStack.cell.cathode[5].Z[5] = real_variables[3071];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[1,3] = real_variables[3072];
    multiDisplaySensor1.u.mdot = real_variables[3073];
    coolStack.subStack.cathode_channel.channel.MX[5,2] = real_variables[3074];
    coolStack.subStack.cell.anode[3].p_bar = real_variables[3075];
    coolStack.coolingPipe.htcoeff.sat[5].cp_vap = real_variables[3077];
    coolStack.coolingPipe.htcoeff.sat[5].d_vap = real_variables[3078];
    coolStack.coolingPipe.dp_internal[3] = real_variables[3079];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.X[3] = real_variables[3080];
    coolStack.subStack.cell.cathode[4].h_component[2] = real_variables[3081];
    sinkP.fluidPort.p = real_variables[3082];
    coolStack.subStack.cell.waterDiffusion.lambda_an[4] = real_variables[3083];
    coolStack.subStack.cathode_channel.channel.gas[5].u_comp[5] = real_variables[3085];
    coolStack.subStack.anode_channel.channel.gas[3].MM = real_variables[3086];
    coolStack.subStack.wall[4].T = real_variables[3087];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[2,1] = real_variables[3088];
    coolStack.subStack.anode_channel.port[5].X[1] = real_variables[3089];
    coolStack.subStack.cell.anode[4].state.X[1] = real_variables[3090];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.X[2] = real_variables[3091];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[5,3] = real_variables[3092];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[3,5] = real_variables[3093];
    coolStack.subStack.cell.gasDiffusion.T_cath[3] = real_variables[3094];
    coolStack.subStack.cell.cathode[3].X[4] = real_variables[3095];
    coolStack.coolingPipe.p_red[1] = real_variables[3096];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[5,2] = real_variables[3097];
    coolStack.subStack.cathode_channel.channel.rMX[5,5] = real_variables[3098];
    coolStack.subStack.cell.mX_flow_cath_reac[2,5] = real_variables[3099];
    coolStack.subStack.cathode_channel.channel.Q_fluid[4] = real_variables[3101];
    coolStack.subStack.cathode_channel.channel.rMX[1,5] = real_variables[3103];
    sinkAnode.pressureBoundary.p_set = real_variables[3104];
    coolStack.coolingPipe.Re_liq[4] = real_variables[3105];
    coolStack.subStack.cathode_channel.channel.gas[5].ddTp = real_variables[3107];
    coolStack.subStack.anode_channel.channel.gas[1].state.T = real_variables[3108];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[2,4] = real_variables[3109];
    flowAnode.massFlowBoundary.state.X[3] = real_variables[3111];
    coolStack.subStack.anode_channel.channel.gas[5].state.X[4] = real_variables[3112];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.p = real_variables[3113];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.X[5] = real_variables[3114];
    coolStack.coolingPipe.q[5].Q_flow = real_variables[3115];
    coolStack.feed_an.m_flow = real_variables[3116];
    coolStack.coolingPipe.state[2].h = real_variables[3117];
    coolStack.subStack.cell.waterDiffusion.c_an_H2O[4] = real_variables[3118];
    coolStack.subStack.anode_channel.channel.friction[4].dp = real_variables[3119];
    coolStack.subStack.cathode_channel.channel.gas[2].s_component[1] = real_variables[3120];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.X[2] = real_variables[3121];
    coolStack.subStack.cell.activationLoss.E_loss_cell[5] = real_variables[3122];
    gasSensor4.u.pressure = real_variables[3123];
    coolStack.subStack.cell.cathode[1].u_comp[5] = real_variables[3124];
    coolStack.subStack.cell.wall_an[1].Q_flow = real_variables[3125];
    coolStack.dmdt = real_variables[3126];
    coolStack.subStack.cell.anode[2].h_component[2] = real_variables[3127];
    coolStack.subStack.cell.anode[3].cp = real_variables[3128];
    display_an_in.data.X[3] = real_variables[3129];
    coolStack.subStack.anode_channel.channel.gas[2].h_component[4] = real_variables[3130];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[3,1] = real_variables[3131];
    flowCathode.massFlowBoundary.d = real_variables[3132];
    coolStack.coolingPipe.volume[4].u = real_variables[3133];
    coolStack.coolingPipe.v[3] = real_variables[3134];
    coolStack.subStack.cell.cathode[4].s_component[5] = real_variables[3135];
    coolStack.subStack.anode_channel.channel.gas[2].ddx[3] = real_variables[3136];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.X[4] = real_variables[3137];
    coolStack.subStack.cathode_channel.channel.gas[1].duTp = real_variables[3138];
    coolStack.subStack.cell.cathode[1].state.X[5] = real_variables[3139];
    coolStack.subStack.cell.anode[1].ddx[1] = real_variables[3140];
    coolStack.subStack.cathode_channel.channel.gas[4].state.X[3] = real_variables[3141];
    coolStack.subStack.cathode_channel.channel.gas[1].dUZT[3] = real_variables[3142];
    coolStack.subStack.cell.cathode[5].h_component[1] = real_variables[3143];
    gasSensor1.portA.X_outflow[3] = real_variables[3144];
    coolStack.subStack.cell.anode[5].state.X[2] = real_variables[3145];
    coolStack.coolingPipe.volume[3].dE = real_variables[3146];
    coolStack.subStack.anode_channel.port[2].mX_flow[2] = real_variables[3147];
    coolStack.subStack.cell.sourceV[2].v = real_variables[3148];
    coolStack.subStack.cathode_channel.channel.gas[5].dUZT[1] = real_variables[3150];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.X[4] = real_variables[3151];
    coolStack.subStack.cathode_channel.channel.gas[5].X[4] = real_variables[3152];
    coolStack.subStack.cell.Q_wall_cath_cell[5] = real_variables[3153];
    coolStack.subStack.anode_channel.port[5].mX_flow[1] = real_variables[3154];
    coolStack.subStack.cell.E_ohm_cell[5] = real_variables[3155];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_outflow.X[1] = real_variables[3158];
    coolStack.subStack.cell.cathode[4].d = real_variables[3159];
    coolStack.subStack.anode_channel.channel.gas[1].ddTp = real_variables[3160];
    coolStack.subStack.anode_channel.channel.gas[4].s_component[4] = real_variables[3161];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[1,1] = real_variables[3162];
    coolStack.subStack.anode_channel.channel.gas[2].g_formation[4] = real_variables[3163];
    coolStack.subStack.cathode_channel.channel.gas[1].h_component[4] = real_variables[3164];
    coolStack.coolingPipe.htcoeff.lam[3] = real_variables[3165];
    coolStack.coolingPipe.sh[3] = real_variables[3166];
    coolStack.subStack.cell.concentrationLoss.pin_p[4].i = real_variables[3167];
    coolStack.coolingPipe.eta[2] = real_variables[3168];
    coolStack.coolingPipe.htcoeff.sat[3].d_liq = real_variables[3169];
    coolStack.subStack.cathode_channel.channel.reaction.MM[1] = real_variables[3170];
    coolStack.subStack.cell.activationLoss.pin_n[1].i = real_variables[3171];
    coolStack.subStack.cell.anode[3].ddx[4] = real_variables[3172];
    coolStack.subStack.anode_channel.channel.reaction.X_out[1,4] = real_variables[3174];
    coolStack.subStack.anode_channel.channel.reaction.X_out[1,3] = real_variables[3175];
    coolStack.subStack.anode_channel.channel.pA = real_variables[3177];
    coolStack.coolingPipe.h_liq[3] = real_variables[3180];
    coolStack.subStack.cell.waterDiffusion.c_an_H2O[1] = real_variables[3181];
    coolStack.subStack.cell.port_an[4].mX_flow[2] = real_variables[3182];
    display_an_in.X_H2O = real_variables[3183];
    coolStack.subStack.cathode_channel.channel.gas[3].Xi[2] = real_variables[3184];
    coolStack.subStack.anode_channel.channel.gas[4].X[2] = real_variables[3185];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[5,2] = real_variables[3186];
    coolStack.subStack.cell.cathode[5].Z[1] = real_variables[3187];
    coolStack.subStack.cell.port_an[5].p = real_variables[3188];
    coolStack.subStack.cell.anode[5].h_component[2] = real_variables[3189];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[2,3] = real_variables[3190];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[3,3] = real_variables[3191];
    flowAnode.massFlowBoundary.fluidPort.h_outflow = real_variables[3192];
    coolStack.feed_cath.X_outflow[4] = real_variables[3193];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[1,1] = real_variables[3195];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB.T = real_variables[3196];
    coolStack.subStack.cathode_channel.channel.state[7].X[1] = real_variables[3197];
    coolStack.subStack.anode_channel.channel.gas[3].dUZT[4] = real_variables[3198];
    coolStack.coolingPipe.p[3] = real_variables[3199];
    coolStack.subStack.cell.concentrationLoss.pin_p[4].v = real_variables[3200];
    coolStack.coolingPipe.q[1].Q_flow = real_variables[3201];
    coolStack.subStack.cell.waterDiffusion.D_diff[1] = real_variables[3202];
    coolStack.coolingPipe.htcoeff.sat[1].cp_vap = real_variables[3203];
    coolStack.coolingPipe.volume[5].M = real_variables[3204];
    coolStack.subStack.cathode_channel.channel.gas[1].s_component[4] = real_variables[3206];
    coolStack.subStack.cell.waterContent.p_cath_partial[2,5] = real_variables[3207];
    coolStack.subStack.cathode_channel.channel.T[4] = real_variables[3208];
    coolStack.subStack.cell.anode[4].X[1] = real_variables[3209];
    display_phTmdot_cath_in.y.X_flow[3] = real_variables[3210];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.X[5] = real_variables[3211];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB.X[2] = real_variables[3214];
    display_an_in.data.X[1] = real_variables[3215];
    coolStack.subStack.cathode_channel.channel.gas[4].state.p = real_variables[3216];
    coolStack.subStack.cathode_channel.channel.state[1].X[1] = real_variables[3217];
    coolStack.coolingPipe.lam[3] = real_variables[3218];
    coolStack.subStack.anode_channel.channel.gas[4].d = real_variables[3219];
    coolStack.subStack.anode_channel.channel.state[6].X[3] = real_variables[3220];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[5,3] = real_variables[3222];
    coolStack.subStack.cathode_channel.portA.X_outflow[5] = real_variables[3223];
    sourceW.massFlowBoundary.h_set = real_variables[3224];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[5,2] = real_variables[3226];
    coolStack.coolingPipe.volume[1].ht = real_variables[3227];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[5,4] = real_variables[3229];
    coolStack.subStack.cell.anode[5].state.X[1] = real_variables[3230];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_outflow.X[3] = real_variables[3232];
    coolStack.coolingPipe.friction.m_flow[2] = real_variables[3233];
    coolStack.subStack.cell.ohmicLoss.E_loss_stack[5] = real_variables[3234];
    coolStack.coolingPipe.TA_out = real_variables[3235];
    coolStack.coolingPipe.sat[5].lam_vap = real_variables[3236];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[2,5] = real_variables[3237];
    coolStack.subStack.cell.anode[1].Z[1] = real_variables[3239];
    coolStack.subStack.cell.cathode[2].Rg = real_variables[3240];
    display_phTmdot_an_out.p_bar = real_variables[3241];
    coolStack.subStack.cell.anode[4].Xi[1] = real_variables[3242];
    coolStack.subStack.cell.waterDiffusion.lambda_an[1] = real_variables[3243];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[1,4] = real_variables[3244];
    coolStack.subStack.anode_channel.channel.gas[1].g_formation[4] = real_variables[3245];
    coolStack.subStack.anode_channel.portA.X_outflow[1] = real_variables[3246];
    coolStack.subStack.cell.waterContent.a_cell_H2O[5] = real_variables[3248];
    coolStack.coolingPipe.hB = real_variables[3249];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[5,4] = real_variables[3250];
    coolStack.subStack.cathode_channel.portB.m_flow = real_variables[3251];
    coolStack.subStack.cathode_channel.channel.gas[2].u_comp[4] = real_variables[3252];
    coolStack.coolingPipe.htcoeff.sat[3].eta_liq = real_variables[3253];
    coolStack.subStack.cathode_channel.channel.friction[2].dp = real_variables[3255];
    coolStack.subStack.anode_channel.channel.M[5] = real_variables[3258];
    coolStack.subStack.cathode_channel.channel.gas[4].h_component[4] = real_variables[3259];
    coolStack.subStack.cell.cathode[1].state.T = real_variables[3260];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB.X[4] = real_variables[3261];
    coolStack.subStack.cell.h_conv_cath[2] = real_variables[3262];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].lambda = real_variables[3263];
    coolStack.subStack.cell.anode[5].u_comp[1] = real_variables[3264];
    coolStack.subStack.cell.contaminantsLoss.y_an[4,2] = real_variables[3265];
    coolStack.subStack.anode_channel.channel.gas[3].p_bar = real_variables[3266];
    coolStack.subStack.cell.cathode[5].p_bar = real_variables[3267];
    coolStack.coolingPipe.p_sat[4] = real_variables[3268];
    coolStack.subStack.anode_channel.channel.MX[5,4] = real_variables[3269];
    coolStack.subStack.anode_channel.channel.gas[4].Xi[1] = real_variables[3270];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[4,4] = real_variables[3271];
    coolStack.subStack.cathode_channel.channel.reaction.a[4] = real_variables[3272];
    coolStack.coolingPipe.q[4].Q_flow = real_variables[3275];
    coolStack.coolingPipe.htcoeff.twoPhaseFraction[4] = real_variables[3276];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.X[5] = real_variables[3277];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_rescaled[5] = real_variables[3278];
    coolStack.subStack.cathode_channel.channel.gas[4].ddx[3] = real_variables[3281];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB.p = real_variables[3282];
    coolStack.subStack.cell.h_cath[5] = real_variables[3283];
    coolStack.coolingPipe.p_red[3] = real_variables[3284];
    coolStack.subStack.cell.concentrationLoss.E_loss_stack[2] = real_variables[3285];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.T = real_variables[3287];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.T = real_variables[3288];
    coolStack.subStack.cathode_channel.channel.gas[3].ddpT = real_variables[3289];
    coolStack.subStack.anode_channel.channel.Q_fluid[3] = real_variables[3290];
    coolStack.subStack.anode_channel.channel.state[2].X[2] = real_variables[3291];
    coolStack.subStack.cell.y_an[1,1] = real_variables[3292];
    sinkP.fluidPort.h_outflow = real_variables[3293];
    coolStack.subStack.cathode_channel.channel.gas[3].state.X[3] = real_variables[3295];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_inflow.X[3] = real_variables[3296];
    coolStack.subStack.cathode_channel.channel.gas[1].Rg = real_variables[3297];
    coolStack.subStack.cathode_channel.channel.gas[5].ddx[3] = real_variables[3298];
    coolStack.subStack.cathode_channel.channel.gas[1].s_component[2] = real_variables[3300];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB_out.X[3] = real_variables[3301];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB.p = real_variables[3302];
    coolStack.subStack.cathode_channel.port[1].X[5] = real_variables[3303];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.X[1] = real_variables[3304];
    coolStack.subStack.cathode_channel.channel.friction[4].m_flow = real_variables[3305];
    coolStack.drain_cooling.h_outflow = real_variables[3306];
    coolStack.subStack.cell.contaminantsLoss.pin_p[3].i = real_variables[3307];
    coolStack.coolingPipe.volume[1].state.h = real_variables[3308];
    coolStack.subStack.cell.anode[3].X[3] = real_variables[3309];
    coolStack.subStack.cell.cathode[1].Xi[4] = real_variables[3310];
    coolStack.coolingPipe.portB[1].h_outflow = real_variables[3311];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.X[3] = real_variables[3312];
    coolStack.subStack.cell.p_an_partial[2,2] = real_variables[3313];
    flowCathode.massFlowBoundary.state.X[4] = real_variables[3314];
    coolStack.subStack.cell.anode[5].s_component[4] = real_variables[3315];
    coolStack.subStack.cell.anode[5].Z[3] = real_variables[3316];
    display_cath_out.data.enthalpy = real_variables[3317];
    multiDisplaySensor1.multiDisplaySensor.portB.p = real_variables[3319];
    coolStack.subStack.cell.anode[3].u_comp[2] = real_variables[3320];
    coolStack.subStack.cell.cathode[4].state.X[4] = real_variables[3321];
    coolStack.subStack.anode_channel.channel.MX[1,3] = real_variables[3322];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.X[3] = real_variables[3323];
    display_an_in.y[3] = real_variables[3324];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_inflow.p = real_variables[3325];
    coolStack.subStack.cathode_channel.channel.gas[5].s_component[5] = real_variables[3326];
    coolStack.subStack.cell.y_an[4,1] = real_variables[3327];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.X[3] = real_variables[3329];
    coolStack.coolingPipe.friction.m_flow[1] = real_variables[3330];
    coolStack.subStack.cell.sourceV[2].p.v = real_variables[3331];
    multiDisplaySensor1.u.X_flow[1] = real_variables[3332];
    coolStack.subStack.cell.electroOsmoticDrag.T_cath[4] = real_variables[3333];
    multiDisplaySensor1.u.enthalpy = real_variables[3334];
    coolStack.subStack.cell.concentrationLoss.E_loss_stack[5] = real_variables[3335];
    coolStack.subStack.anode_channel.channel.reaction.X_out[3,1] = real_variables[3336];
    coolStack.subStack.cell.p_an_partial[4,4] = real_variables[3337];
    coolStack.coolingPipe.x[3] = real_variables[3338];
    coolStack.coolingPipe.htcoeff.alpha[3] = real_variables[3339];
    coolStack.subStack.cathode_channel.channel.gas[1].Z[5] = real_variables[3340];
    coolStack.coolingPipe.eta[1] = real_variables[3341];
    coolStack.subStack.cathode_channel.channel.gas[3].Z[1] = real_variables[3343];
    sinkCathode.X_in[2] = real_variables[3344];
    coolStack.subStack.cell.waterContent.p_cath_partial[2,4] = real_variables[3345];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[5,1] = real_variables[3346];
    coolStack.subStack.cell.waterDiffusion.c_cath_H2O[3] = real_variables[3348];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[2,1] = real_variables[3349];
    coolStack.subStack.anode_channel.channel.gas[2].Xi[2] = real_variables[3350];
    coolStack.subStack.cell.anode[4].X[3] = real_variables[3351];
    sourceW.massFlowBoundary.m_flow_in = real_variables[3352];
    coolStack.coolingPipe.friction.d[3] = real_variables[3353];
    display_V.showNumber = real_variables[3354];
    coolStack.subStack.dmdt = real_variables[3355];
    coolStack.coolingPipe.friction.sat[5].lam_vap = real_variables[3356];
    coolStack.subStack.anode_channel.channel.alpha[3] = real_variables[3357];
    coolStack.subStack.anode_channel.channel.reaction.a[5] = real_variables[3358];
    coolStack.subStack.anode_channel.port[5].X[3] = real_variables[3359];
    coolStack.subStack.cathode_channel.port[2].mX_flow[5] = real_variables[3360];
    coolStack.subStack.anode_channel.channel.Q_fluid[4] = real_variables[3361];
    gasSensor2.u.temp = real_variables[3362];
    coolStack.subStack.cell.cathode[2].ddx[3] = real_variables[3363];
    coolStack.subStack.cell.activationLoss.T_cell[1] = real_variables[3364];
    gasSensor3.state.X[2] = real_variables[3365];
    coolStack.subStack.cell.cathode[3].ddx[1] = real_variables[3366];
    coolStack.subStack.cell.cathode[2].dUZT[3] = real_variables[3367];
    coolStack.subStack.cell.cathode[2].g_formation[2] = real_variables[3368];
    coolStack.subStack.cell.electroOsmoticDrag.n_eod[5] = real_variables[3369];
    coolStack.subStack.cell.anode[4].ddx[3] = real_variables[3370];
    coolStack.subStack.anode_channel.port[2].X[3] = real_variables[3371];
    coolStack.subStack.cell.T_an[3] = real_variables[3372];
    coolStack.subStack.anode_channel.port[2].X[4] = real_variables[3373];
    coolStack.subStack.cell.cathode[5].X[3] = real_variables[3374];
    coolStack.subStack.cell.contaminantsLoss.y_an[5,4] = real_variables[3375];
    coolStack.subStack.cell.anode[1].Z[4] = real_variables[3377];
    coolStack.subStack.anode_channel.channel.gas[5].Xi[1] = real_variables[3378];
    coolStack.subStack.cathode_channel.channel.gas[2].ddx[3] = real_variables[3379];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.X[5] = real_variables[3380];
    coolStack.coolingPipe.htcoeff.p[4] = real_variables[3382];
    coolStack.subStack.anode_channel.channel.reaction.y_out[5,3] = real_variables[3383];
    coolStack.subStack.cathode_channel.channel.reaction.p[3] = real_variables[3384];
    coolStack.subStack.cell.sourceV[1].n.v = real_variables[3385];
    coolStack.subStack.anode_channel.channel.state[7].T = real_variables[3386];
    coolStack.subStack.anode_channel.channel.reaction.T[2] = real_variables[3387];
    coolStack.subStack.cathode_channel.channel.gas[1].ddx[1] = real_variables[3388];
    coolStack.subStack.anode_channel.port[1].p = real_variables[3389];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[5,1] = real_variables[3390];
    coolStack.subStack.cathode_channel.channel.state[1].X[4] = real_variables[3391];
    coolStack.subStack.anode_channel.channel.htcoeff[3].Re = real_variables[3392];
    coolStack.subStack.cell.X_cath[5,4] = real_variables[3393];
    coolStack.subStack.cell.cathode[5].g_formation[2] = real_variables[3394];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[2,5] = real_variables[3395];
    coolStack.subStack.cell.sourceV[3].p.v = real_variables[3396];
    coolStack.subStack.cathode_channel.channel.friction[3].dB = real_variables[3397];
    coolStack.subStack.cell.ohmicLoss.pin_n[5].i = real_variables[3398];
    coolStack.subStack.cathode_channel.channel.M[1] = real_variables[3399];
    coolStack.subStack.cell.waterContent.a_cell_H2O[3] = real_variables[3400];
    coolStack.subStack.cathode_channel.channel.q_fluid[2].Q_flow = real_variables[3401];
    coolStack.subStack.anode_channel.channel.Q[4] = real_variables[3402];
    display_an_out.y[4] = real_variables[3403];
    coolStack.coolingPipe.dp_internal[6] = real_variables[3404];
    coolStack.coolingPipe.friction.sat[4].lam_liq = real_variables[3406];
    coolStack.subStack.cell.port_an[2].X[4] = real_variables[3407];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.X[5] = real_variables[3408];
    coolStack.subStack.cell.concentrationLoss.j_ionic[4] = real_variables[3409];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_inflow.p = real_variables[3410];
    coolStack.coolingPipe.lam[4] = real_variables[3411];
    coolStack.subStack.cell.cathode[2].g_formation[3] = real_variables[3412];
    coolStack.subStack.cell.h_conv_an[1] = real_variables[3413];
    coolStack.subStack.anode_channel.summary.M = real_variables[3415];
    coolStack.subStack.cell.activationLoss.j_ionic[3] = real_variables[3416];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_inflow.X[1] = real_variables[3417];
    coolStack.subStack.anode_channel.channel.portB[1].m_flow = real_variables[3418];
    coolStack.subStack.cathode_channel.channel.Q_extra[2] = real_variables[3419];
    coolStack.subStack.cell.p_cath_partial[2,5] = real_variables[3420];
    coolStack.subStack.cell.p_cath_partial[3,5] = real_variables[3421];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.X[4] = real_variables[3423];
    coolStack.coolingPipe.sat[2].cp_vap = real_variables[3424];
    coolStack.subStack.cell.anode[5].X[4] = real_variables[3425];
    coolStack.subStack.anode_channel.channel.gas[1].state.X[4] = real_variables[3426];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[5,4] = real_variables[3427];
    coolStack.subStack.cell.anode[4].h = real_variables[3428];
    coolStack.subStack.cell.cathode[2].p = real_variables[3431];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[2,4] = real_variables[3432];
    coolStack.subStack.cell.anode[4].dUZT[3] = real_variables[3433];
    coolStack.coolingPipe.friction.sat[6].eta_liq = real_variables[3435];
    coolStack.subStack.cell.X_cath[5,5] = real_variables[3436];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.T = real_variables[3437];
    coolStack.subStack.cell.anode[1].h_component[1] = real_variables[3438];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_inflow.X[3] = real_variables[3439];
    coolStack.subStack.anode_channel.channel.friction[4].dB = real_variables[3440];
    coolStack.coolingPipe.portA[1].p = real_variables[3441];
    coolStack.coolingPipe.mflow_A_in = real_variables[3442];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_inflow.X[4] = real_variables[3443];
    coolStack.subStack.cell.electroOsmoticDrag.lambda[2] = real_variables[3444];
    coolStack.subStack.cell.p_cath_partial[1,2] = real_variables[3446];
    coolStack.coolingPipe.d[1] = real_variables[3447];
    coolStack.subStack.cell.cathode[1].u_comp[1] = real_variables[3448];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA.X[4] = real_variables[3449];
    sinkAnode.pressureBoundary.fluidPort[1].m_flow = real_variables[3450];
    coolStack.subStack.anode_channel.channel.Q_extra[2] = real_variables[3451];
    gasSensor1.portA.X_outflow[1] = real_variables[3452];
    coolStack.subStack.anode_channel.channel.gas[1].duTp = real_variables[3453];
    display_phTmdot_cath_out.y.X[2] = real_variables[3454];
    coolStack.coolingPipe.htcoeff.Pr[4] = real_variables[3455];
    coolStack.subStack.cell.electroOsmoticDrag.T_cell[2] = real_variables[3456];
    coolStack.subStack.wall[1].Q_flow = real_variables[3457];
    coolStack.subStack.cell.cathode[5].u_comp[5] = real_variables[3458];
    coolStack.subStack.cell.sourceV[5].n.v = real_variables[3459];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.X[3] = real_variables[3460];
    coolStack.subStack.cathode_channel.channel.gas[2].ddx[2] = real_variables[3461];
    coolStack.subStack.cathode_channel.channel.gas[4].MM = real_variables[3462];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[1,4] = real_variables[3463];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_outflow.X[2] = real_variables[3464];
    display_phTmdot_cath_in.y.X[2] = real_variables[3465];
    coolStack.subStack.cell.p_cath_partial[2,2] = real_variables[3466];
    coolStack.coolingPipe.htcoeff.sat[5].lam_vap = real_variables[3467];
    coolStack.subStack.cell.anode[2].state.T = real_variables[3468];
    display_cath_out.data.X_flow[1] = real_variables[3469];
    coolStack.coolingPipe.satB.eta_liq = real_variables[3470];
    coolStack.subStack.cathode_channel.channel.gas[3].Xi[4] = real_variables[3471];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB.p = real_variables[3472];
    coolStack.coolingPipe.htcoeff.m_flow[1] = real_variables[3473];
    coolStack.coolingPipe.quality[2] = real_variables[3474];
    coolStack.subStack.cathode_channel.port[3].h = real_variables[3475];
    coolStack.subStack.cell.p_cath_partial[5,2] = real_variables[3476];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[4,5] = real_variables[3477];
    coolStack.subStack.cell.X_cath[5,3] = real_variables[3478];
    coolStack.coolingPipe.friction.sat[6].lam_liq = real_variables[3479];
    coolStack.subStack.anode_channel.channel.gas[5].Xi[4] = real_variables[3480];
    gasSensor4.u.mdot = real_variables[3481];
    coolStack.subStack.cathode_channel.channel.gas[3].s_component[4] = real_variables[3482];
    coolStack.subStack.anode_channel.channel.Q_fluid[2] = real_variables[3483];
    coolStack.subStack.anode_channel.channel.reaction.y_out[2,2] = real_variables[3484];
    coolStack.subStack.cathode_channel.channel.gas[3].dUZT[2] = real_variables[3486];
    coolStack.subStack.anode_channel.channel.gas[4].state.X[1] = real_variables[3487];
    coolStack.subStack.cathode_channel.channel.gas[4].g_formation[4] = real_variables[3488];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[4,1] = real_variables[3490];
    sinkCathode.pressureBoundary.state.p = real_variables[3491];
    coolStack.subStack.cell.p_cath_partial[1,4] = real_variables[3493];
    coolStack.coolingPipe.htcoeff.Re[4] = real_variables[3494];
    multiDisplaySensor4.u.pressure = real_variables[3495];
    coolStack.subStack.cathode_channel.channel.dp[4] = real_variables[3497];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[2,1] = real_variables[3498];
    coolStack.subStack.cathode_channel.port[4].H_flow = real_variables[3499];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].Pr = real_variables[3500];
    coolStack.subStack.cell.X_an[2,4] = real_variables[3501];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[1,4] = real_variables[3502];
    coolStack.subStack.cell.activationLoss.j_ionic[1] = real_variables[3505];
    coolStack.subStack.cathode_channel.channel.reaction.T[2] = real_variables[3506];
    coolStack.subStack.cell.X_cath[3,4] = real_variables[3507];
    coolStack.subStack.cell.wall[4].Q_flow = real_variables[3509];
    coolStack.coolingPipe.dmdt = real_variables[3510];
    coolStack.subStack.cell.cathode[4].dUZT[1] = real_variables[3511];
    coolStack.coolingPipe.Q[2] = real_variables[3512];
    coolStack.subStack.anode_channel.channel.htcoeff[4].Nu = real_variables[3513];
    gasSensor4.u.X[1] = real_variables[3514];
    coolStack.drain_cath.X_outflow[3] = real_variables[3515];
    coolStack.coolingPipe.friction.dp[1] = real_variables[3516];
    coolStack.coolingPipe.state[6].h = real_variables[3517];
    coolStack.subStack.cathode_channel.channel.gas[5].dUZT[5] = real_variables[3518];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_outflow.X[4] = real_variables[3519];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[3,1] = real_variables[3520];
    coolStack.subStack.cell.anode[4].u_comp[4] = real_variables[3522];
    coolStack.subStack.cathode_channel.channel.gas[1].Xi[2] = real_variables[3523];
    coolStack.subStack.cell.cathode[2].X[4] = real_variables[3524];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[5,3] = real_variables[3525];
    coolStack.feed_an.X_outflow[2] = real_variables[3526];
    coolStack.subStack.cathode_channel.checkMassBalance = real_variables[3527];
    coolStack.coolingPipe.h[5] = real_variables[3528];
    coolStack.subStack.cathode_channel.channel.gas[2].s_component[2] = real_variables[3529];
    coolStack.subStack.cell.cathode[2].s_component[1] = real_variables[3530];
    coolStack.X_feed_cath[5] = real_variables[3531];
    coolStack.subStack.anode_channel.channel.gas[5].ddx[2] = real_variables[3532];
    coolStack.subStack.cathode_channel.port[2].p = real_variables[3533];
    coolStack.subStack.cathode_channel.channel.gas[1].h = real_variables[3535];
    coolStack.subStack.anode_channel.channel.gas[2].s_component[2] = real_variables[3537];
    coolStack.subStack.cell.port_an[3].H_flow = real_variables[3538];
    display_phTmdot_cath_in.y.X_flow[4] = real_variables[3539];
    coolStack.subStack.cell.waterContent.lambda[4] = real_variables[3540];
    coolStack.feed_cath.h_outflow = real_variables[3541];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[4,2] = real_variables[3542];
    display_phTmdot_an_in.y.temp = real_variables[3543];
    coolStack.subStack.cathode_channel.channel.MX[4,1] = real_variables[3544];
    coolStack.subStack.cathode_channel.channel.MX[5,5] = real_variables[3545];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.X[5] = real_variables[3546];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[3,5] = real_variables[3549];
    coolStack.subStack.anode_channel.channel.gas[1].Rg = real_variables[3550];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_rescaled[5] = real_variables[3553];
    coolStack.subStack.cell.cathode[1].state.X[1] = real_variables[3554];
    coolStack.coolingPipe.volume[2].dM_bulk = real_variables[3556];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_rescaled[4] = real_variables[3557];
    coolStack.subStack.anode_channel.channel.gas[2].h_component[2] = real_variables[3558];
    coolStack.subStack.cell.j_ionic[5] = real_variables[3559];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB.X[4] = real_variables[3560];
    coolStack.subStack.anode_channel.channel.gas[4].p = real_variables[3561];
    coolStack.subStack.h_inflow_an = real_variables[3562];
    coolStack.subStack.anode_channel.channel.reaction.X_out[1,1] = real_variables[3563];
    coolStack.subStack.cell.anode[3].s_component[3] = real_variables[3566];
    coolStack.subStack.cell.ohmicLoss.pin_n[2].i = real_variables[3567];
    coolStack.coolingPipe.volume[5].h = real_variables[3568];
    coolStack.subStack.cathode_channel.port[3].X[2] = real_variables[3569];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.X[3] = real_variables[3570];
    coolStack.coolingPipe.drhodx[4] = real_variables[3571];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.p = real_variables[3572];
    coolStack.subStack.cathode_channel.channel.gas[2].ddx[1] = real_variables[3574];
    coolStack.checkMassBalance = real_variables[3576];
    humidification_an.V_flow_dry_in = real_variables[3577];
    gasSensor2.u.enthalpy = real_variables[3578];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[4,3] = real_variables[3579];
    coolStack.subStack.cathode_channel.portA.X_outflow[2] = real_variables[3580];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_inflow.T = real_variables[3581];
    coolStack.subStack.cathode_channel.port[4].X[1] = real_variables[3582];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[2,2] = real_variables[3583];
    coolStack.subStack.cell.waterContent.p_cath_partial[5,2] = real_variables[3584];
    coolStack.subStack.anode_channel.port[3].mX_flow[2] = real_variables[3585];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[2,4] = real_variables[3586];
    coolStack.subStack.cell.T_an[1] = real_variables[3587];
    coolStack.subStack.cathode_channel.channel.gas[3].ddx[4] = real_variables[3588];
    coolStack.coolingPipe.htcoeff.eta[4] = real_variables[3589];
    coolStack.coolingPipe.sat[1].x = real_variables[3590];
    coolStack.coolingPipe.volume[4].pt = real_variables[3591];
    coolStack.subStack.anode_channel.port[4].H_flow = real_variables[3592];
    coolStack.subStack.cell.waterContent.a_cell_H2O[1] = real_variables[3593];
    coolStack.subStack.drain_anode.p = real_variables[3594];
    coolStack.subStack.cell.cathode[2].T = real_variables[3595];
    coolStack.subStack.anode_channel.channel.reaction.Zx[5,2] = real_variables[3596];
    coolStack.subStack.anode_channel.channel.friction[4].m_flow = real_variables[3597];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.T = real_variables[3598];
    display_an_in.y[4] = real_variables[3600];
    coolStack.subStack.cell.p_cath_partial[5,5] = real_variables[3601];
    coolStack.subStack.cell.ohmicLoss.sigma[3] = real_variables[3602];
    gasSensor2.state.X[4] = real_variables[3603];
    coolStack.subStack.cathode_channel.channel.gas[4].X[3] = real_variables[3604];
    coolStack.subStack.anode_channel.channel.reaction.MM[4] = real_variables[3605];
    coolStack.subStack.anode_channel.channel.gas[5].duTp = real_variables[3606];
    coolStack.subStack.anode_channel.portB.X_outflow[1] = real_variables[3607];
    coolStack.subStack.X_feed_cath[2] = real_variables[3608];
    coolStack.subStack.anode_channel.channel.gas[1].u_comp[2] = real_variables[3609];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[3,1] = real_variables[3611];
    coolStack.subStack.cell.h_conv_cath[3] = real_variables[3612];
    coolStack.subStack.cell.port_cath[4].X[5] = real_variables[3613];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[3,5] = real_variables[3614];
    coolStack.subStack.anode_channel.channel.sh[1] = real_variables[3615];
    multiDisplaySensor4.multiDisplaySensor.u.pressure = real_variables[3616];
    coolStack.subStack.cell.cathode[3].u = real_variables[3617];
    coolStack.subStack.cell.wall[3].T = real_variables[3618];
    coolStack.subStack.anode_channel.channel.alpha[1] = real_variables[3619];
    coolStack.subStack.cell.waterContent.T_an[5] = real_variables[3620];
    coolStack.subStack.cell.ohmicLoss.sigma[1] = real_variables[3621];
    coolStack.subStack.X_feed_cath[4] = real_variables[3622];
    coolStack.subStack.cathode_channel.portB.X_outflow[2] = real_variables[3623];
    display_phTmdot_w_in.T_degC = real_variables[3624];
    coolStack.coolingPipe.satB.d_liq = real_variables[3625];
    coolStack.coolingPipe.m_flow_mean = real_variables[3626];
    coolStack.subStack.cathode_channel.channel.state[1].X[5] = real_variables[3627];
    gasSensor3.portA.p = real_variables[3628];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[5,5] = real_variables[3629];
    coolStack.coolingPipe.sat[5].eta_vap = real_variables[3630];
    coolStack.subStack.anode_channel.channel.htcoeff[5].Re = real_variables[3631];
    coolStack.subStack.anode_channel.channel.gas[5].cp = real_variables[3632];
    coolStack.subStack.cell.p_cath_partial[3,1] = real_variables[3633];
    coolStack.subStack.cell.anode[4].p = real_variables[3634];
    coolStack.coolingPipe.Re_liq[2] = real_variables[3635];
    flowCathode.X_in[1] = real_variables[3636];
    flowAnode.massFlowBoundary.X_in[4] = real_variables[3637];
    coolStack.coolingPipe.htcoeff.lam[5] = real_variables[3638];
    coolStack.subStack.cathode_channel.channel.summary.h_out = real_variables[3639];
    coolStack.subStack.anode_channel.channel.htcoeff[4].m_flow = real_variables[3640];
    coolStack.subStack.anode_channel.channel.gas[2].state.T = real_variables[3641];
    coolStack.subStack.anode_channel.channel.summary.M = real_variables[3642];
    coolStack.subStack.cell.wall[2].Q_flow = real_variables[3643];
    coolStack.subStack.feed_anode.X_outflow[4] = real_variables[3644];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[2,2] = real_variables[3645];
    coolStack.subStack.cell.Voc_stack[3].y = real_variables[3646];
    coolStack.subStack.anode_channel.channel.reaction.X_in[5,3] = real_variables[3647];
    coolStack.subStack.cell.waterContent.p_an_partial[1,2] = real_variables[3648];
    coolStack.subStack.cathode_channel.channel.gas[4].h = real_variables[3649];
    coolStack.subStack.anode_channel.port[5].X[4] = real_variables[3651];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[3,1] = real_variables[3652];
    gasSensor2.portB.p = real_variables[3653];
    coolStack.subStack.cathode_channel.channel.state[5].X[2] = real_variables[3654];
    coolStack.subStack.cell.cathode[1].ddpT = real_variables[3655];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA.X[3] = real_variables[3656];
    coolStack.subStack.cell.h_cath[2] = real_variables[3657];
    coolStack.subStack.cell.port_cath[4].X[1] = real_variables[3658];
    coolStack.subStack.anode_channel.channel.htcoeff[4].cp = real_variables[3659];
    coolStack.subStack.anode_channel.channel.gas[5].s_component[2] = real_variables[3661];
    coolStack.subStack.anode_channel.channel.gas[4].h_component[1] = real_variables[3663];
    sinkAnode.X_in[3] = real_variables[3664];
    coolStack.subStack.cell.Q_cell[3] = real_variables[3665];
    coolStack.coolingPipe.htcoeff.k_1ph[5] = real_variables[3667];
    coolStack.drain_cath.p = real_variables[3668];
    coolStack.subStack.cell.ohmicLoss.pin_n[1].v = real_variables[3669];
    coolStack.subStack.cell.anode[2].ddpT = real_variables[3670];
    coolStack.coolingPipe.friction.sat[3].d_vap = real_variables[3671];
    humidification_an.m_flow_dry_in = real_variables[3672];
    coolStack.subStack.cell.cathode[3].X[5] = real_variables[3673];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA_out.X[4] = real_variables[3675];
    coolStack.coolingPipe.etaA = real_variables[3676];
    coolStack.coolingPipe.q_fluid[5].T = real_variables[3677];
    coolStack.subStack.anode_channel.channel.gas[4].p_bar = real_variables[3679];
    coolStack.subStack.cell.activationLoss.pin_p[4].i = real_variables[3680];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[1,2] = real_variables[3681];
    coolStack.subStack.anode_channel.channel.gas[2].ddx[1] = real_variables[3682];
    coolStack.subStack.cathode_channel.channel.portA[1].X_outflow[5] = real_variables[3683];
    coolStack.coolingPipe.volume[1].ddhp = real_variables[3684];
    coolStack.subStack.cell.mX_flow_cath_reac[1,3] = real_variables[3685];
    coolStack.subStack.cell.cathode[3].X[1] = real_variables[3686];
    coolStack.subStack.cathode_channel.channel.gas[2].Xi[3] = real_variables[3688];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[5,1] = real_variables[3689];
    coolStack.subStack.cell.port_cath[1].X[2] = real_variables[3690];
    coolStack.subStack.cathode_channel.channel.gas[1].state.T = real_variables[3691];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[3,4] = real_variables[3692];
    coolStack.subStack.anode_channel.channel.Q_extra[4] = real_variables[3693];
    coolStack.subStack.X_feed_cath[3] = real_variables[3694];
    coolStack.subStack.cathode_channel.channel.gas[3].u = real_variables[3695];
    coolStack.subStack.cathode_channel.channel.summary.h_in = real_variables[3696];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[4,3] = real_variables[3697];
    coolStack.subStack.cathode_channel.port[2].X[2] = real_variables[3700];
    coolStack.summary.V_cell = real_variables[3701];
    coolStack.subStack.cathode_channel.channel.Q_extra[5] = real_variables[3702];
    coolStack.subStack.anode_channel.channel.gas[3].ddx[3] = real_variables[3703];
    coolStack.subStack.cathode_channel.channel.gas[1].dUZT[1] = real_variables[3704];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[3,1] = real_variables[3705];
    coolStack.coolingPipe.sat[2].eta_vap = real_variables[3706];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.X[4] = real_variables[3708];
    coolStack.subStack.cell.cathode[4].g_formation[5] = real_variables[3709];
    coolStack.coolingPipe.htcoeff.sat[3].cp_liq = real_variables[3710];
    coolStack.subStack.anode_channel.channel.state[6].X[1] = real_variables[3711];
    coolStack.coolingPipe.friction.sat[1].eta_vap = real_variables[3712];
    coolStack.subStack.cathode_channel.channel.gas[3].g_formation[5] = real_variables[3713];
    voltageSensor.p.v = real_variables[3714];
    coolStack.subStack.cathode_channel.channel.gas[1].Z[2] = real_variables[3715];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.X[1] = real_variables[3716];
    coolStack.coolingPipe.volume[5].p = real_variables[3717];
    coolStack.drain_cath.h_outflow = real_variables[3718];
    coolStack.coolingPipe.T_vapB = real_variables[3719];
    display_phTmdot_cath_in.y.X[4] = real_variables[3720];
    coolStack.subStack.anode_channel.channel.q[4].T = real_variables[3721];
    coolStack.subStack.cathode_channel.channel.gas[2].Z[3] = real_variables[3722];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.T = real_variables[3723];
    coolStack.subStack.anode_channel.channel.state[4].p = real_variables[3724];
    coolStack.subStack.cell.cathode[5].Xi[2] = real_variables[3725];
    sinkCathode.X_in[3] = real_variables[3726];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[4,3] = real_variables[3727];
    coolStack.subStack.anode_channel.channel.MX[3,1] = real_variables[3728];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[3,4] = real_variables[3732];
    coolStack.coolingPipe.p_sat[2] = real_variables[3733];
    coolStack.coolingPipe.state[7].h = real_variables[3734];
    coolStack.coolingPipe.friction.sat[6].lam_vap = real_variables[3735];
    coolStack.subStack.anode_channel.channel.gas[2].Z[1] = real_variables[3736];
    coolStack.subStack.anode_channel.channel.reaction.Zx[3,3] = real_variables[3737];
    coolStack.subStack.cell.waterContent.T_an[1] = real_variables[3738];
    coolStack.subStack.cathode_channel.channel.T[3] = real_variables[3739];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[5,4] = real_variables[3740];
    coolStack.subStack.anode_channel.channel.gas[5].Xi[3] = real_variables[3741];
    coolStack.subStack.cell.E_conc_cell[2] = real_variables[3742];
    coolStack.coolingPipe.v[5] = real_variables[3743];
    coolStack.subStack.cell.ohmicLoss.E_loss_stack[4] = real_variables[3744];
    coolStack.subStack.cell.contaminantsLoss.y_an[3,1] = real_variables[3745];
    coolStack.subStack.cell.anode[4].Xi[4] = real_variables[3746];
    coolStack.subStack.cell.concentrationLoss.pin_n[4].v = real_variables[3747];
    coolStack.coolingPipe.state[1].h = real_variables[3748];
    coolStack.subStack.cell.cathode[2].X[5] = real_variables[3749];
    coolStack.coolingPipe.volume[2].ht = real_variables[3750];
    coolStack.subStack.cell.V_stack = real_variables[3751];
    coolStack.subStack.cell.anode[2].X[4] = real_variables[3752];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].alphaA = real_variables[3753];
    coolStack.subStack.cathode_channel.h_inflow = real_variables[3754];
    coolStack.subStack.cell.sourceV[2].n.i = real_variables[3756];
    coolStack.subStack.cell.anode[4].Z[4] = real_variables[3757];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.X[4] = real_variables[3759];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_outflow.X[4] = real_variables[3760];
    coolStack.coolingPipe.p_red[2] = real_variables[3761];
    coolStack.subStack.cell.contaminantsLoss.y_an[2,2] = real_variables[3763];
    coolStack.coolingPipe.htcoeff.sat[5].eta_vap = real_variables[3764];
    coolStack.coolingPipe.state[5].h = real_variables[3765];
    coolStack.coolingPipe.volume[5].Tt = real_variables[3767];
    coolStack.subStack.anode_channel.channel.gas[5].dUZT[3] = real_variables[3768];
    coolStack.subStack.cell.port_cath[2].X[2] = real_variables[3769];
    coolStack.subStack.cell.waterContent.T_cell[3] = real_variables[3770];
    coolStack.subStack.cell.E_ohm_cell[3] = real_variables[3771];
    coolStack.subStack.cell.p_cath_partial[4,4] = real_variables[3772];
    coolStack.subStack.anode_channel.channel.T[5] = real_variables[3774];
    coolStack.subStack.cathode_channel.channel.gas[1].g_formation[1] = real_variables[3776];
    coolStack.coolingPipe.quality[1] = real_variables[3779];
    coolStack.subStack.cell.p_an_partial[5,1] = real_variables[3780];
    coolStack.subStack.cell.anode[1].g_formation[1] = real_variables[3783];
    coolStack.subStack.anode_channel.channel.reaction.p[1] = real_variables[3784];
    coolStack.subStack.cathode_channel.channel.reaction.T[5] = real_variables[3785];
    coolStack.subStack.cathode_channel.channel.gas[5].Xi[3] = real_variables[3786];
    coolStack.subStack.cell.port_cath[3].h = real_variables[3787];
    coolStack.subStack.cell.electroOsmoticDrag.T_cath[1] = real_variables[3788];
    coolStack.subStack.P_stack = real_variables[3789];
    coolStack.subStack.cathode_channel.port[5].X[4] = real_variables[3790];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.X[2] = real_variables[3791];
    coolStack.checkEnergyBalance = real_variables[3793];
    coolStack.subStack.cell.cathode[5].state.X[3] = real_variables[3794];
    coolStack.subStack.cell.electroOsmoticDrag.T_cath[5] = real_variables[3795];
    coolStack.subStack.cathode_channel.portA.h_outflow = real_variables[3797];
    coolStack.subStack.anode_channel.channel.state[7].X[2] = real_variables[3800];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_outflow.X[2] = real_variables[3801];
    coolStack.subStack.cell.waterContent.p_an_partial[2,4] = real_variables[3802];
    coolStack.subStack.anode_channel.wall[1].Q_flow = real_variables[3803];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[5,3] = real_variables[3805];
    coolStack.subStack.anode_channel.channel.gas[2].MM = real_variables[3806];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[2,1] = real_variables[3807];
    coolStack.subStack.cathode_channel.port[2].m_flow = real_variables[3808];
    multiDisplaySensor1.portA.p = real_variables[3809];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[2,1] = real_variables[3810];
    coolStack.subStack.cell.port_an[2].X[2] = real_variables[3811];
    coolStack.subStack.anode_channel.channel.gas[5].h_component[1] = real_variables[3812];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[1,4] = real_variables[3813];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[4,2] = real_variables[3815];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[3,1] = real_variables[3816];
    coolStack.subStack.cell.h_conv_an[2] = real_variables[3818];
    sourceW.massFlowBoundary.state.h = real_variables[3821];
    coolStack.subStack.anode_channel.channel.reaction.y_out[1,2] = real_variables[3822];
    coolStack.subStack.cathode_channel.channel.state[5].X[3] = real_variables[3823];
    humidification_cath.RH = real_variables[3824];
    coolStack.subStack.cathode_channel.channel.gas[2].X[1] = real_variables[3825];
    coolStack.subStack.cathode_channel.channel.reaction.p[5] = real_variables[3826];
    gasSensor4.portA.m_flow = real_variables[3828];
    coolStack.coolingPipe.summary.m_flow = real_variables[3829];
    coolStack.subStack.anode_channel.channel.gas[3].Xi[2] = real_variables[3830];
    coolStack.subStack.summary.j_external = real_variables[3831];
    coolStack.subStack.cell.port_an[1].mX_flow[1] = real_variables[3832];
    coolStack.subStack.cell.cathode[5].ddx[3] = real_variables[3833];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].Pr = real_variables[3834];
    coolStack.subStack.anode_channel.channel.gas[2].X[1] = real_variables[3836];
    coolStack.subStack.cell.anode[1].g_formation[2] = real_variables[3837];
    coolStack.subStack.cathode_channel.channel.state[1].T = real_variables[3838];
    coolStack.subStack.cathode_channel.port[4].X[4] = real_variables[3839];
    coolStack.coolingPipe.volume[2].pt = real_variables[3840];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[2,1] = real_variables[3841];
    coolStack.subStack.cell.port_cath[5].mX_flow[5] = real_variables[3842];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[2,1] = real_variables[3843];
    coolStack.subStack.cathode_channel.wall[5].Q_flow = real_variables[3844];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.p = real_variables[3845];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[2,1] = real_variables[3846];
    coolStack.subStack.cell.cathode[5].Z[3] = real_variables[3847];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[3,2] = real_variables[3848];
    coolStack.subStack.cell.waterContent.p_an_partial[4,4] = real_variables[3849];
    coolStack.subStack.anode_channel.channel.portB[1].p = real_variables[3850];
    coolStack.subStack.cell.anode[4].Rg = real_variables[3851];
    coolStack.subStack.cell.y_an[2,2] = real_variables[3853];
    p_cath_out.u1 = real_variables[3854];
    coolStack.subStack.anode_channel.channel.summary.T_out = real_variables[3856];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].lambda = real_variables[3857];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.X[2] = real_variables[3858];
    coolStack.subStack.cathode_channel.channel.gas[3].state.X[2] = real_variables[3861];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[5,5] = real_variables[3862];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.T = real_variables[3863];
    gasSensor1.portB.X_outflow[4] = real_variables[3864];
    coolStack.coolingPipe.h_liq[1] = real_variables[3865];
    coolStack.subStack.anode_channel.channel.state[7].X[1] = real_variables[3866];
    coolStack.subStack.cathode_channel.channel.gas[1].Z[4] = real_variables[3867];
    coolStack.subStack.anode_channel.channel.reaction.X_out[2,4] = real_variables[3868];
    coolStack.subStack.anode_channel.channel.MX[4,2] = real_variables[3869];
    coolStack.subStack.anode_channel.channel.gas[2].Z[3] = real_variables[3870];
    coolStack.subStack.cell.anode[4].Z[1] = real_variables[3871];
    coolStack.subStack.cell.y_cath[2,2] = real_variables[3873];
    coolStack.coolingPipe.Q_wall[2] = real_variables[3874];
    coolStack.coolingPipe.volume[5].d = real_variables[3875];
    coolStack.subStack.anode_channel.channel.gas[2].X[2] = real_variables[3876];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA_out.T = real_variables[3877];
    coolStack.subStack.cathode_channel.channel.gas[2].Xi[5] = real_variables[3878];
    display_phTmdot_cath_out.y.X[1] = real_variables[3879];
    coolStack.subStack.cell.concentrationLoss.pin_n[1].v = real_variables[3880];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[2,2] = real_variables[3881];
    coolStack.subStack.cell.anode[4].T_degC = real_variables[3882];
    gasSensor1.portB.X_outflow[2] = real_variables[3883];
    humidification_cath.x_wet_in[2] = real_variables[3885];
    coolStack.subStack.cathode_channel.channel.portA[1].X_outflow[1] = real_variables[3886];
    coolStack.coolingPipe.sat[2].d_vap = real_variables[3887];
    coolStack.subStack.anode_channel.channel.gas[5].MM = real_variables[3888];
    coolStack.subStack.cathode_channel.channel.portA[1].X_outflow[3] = real_variables[3889];
    coolStack.subStack.cell.activationLoss.pin_p[5].i = real_variables[3890];
    coolStack.subStack.X_feed_cath[5] = real_variables[3891];
    multiDisplaySensor4.portA.m_flow = real_variables[3892];
    coolStack.subStack.cell.anode[4].Z[2] = real_variables[3893];
    coolStack.subStack.cathode_channel.channel.gas[1].ddx[4] = real_variables[3894];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB.p = real_variables[3895];
    coolStack.subStack.anode_channel.channel.rMX[5,2] = real_variables[3896];
    coolStack.subStack.cell.cathode[3].ddx[3] = real_variables[3897];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[4,2] = real_variables[3898];
    coolStack.subStack.cell.cathode[3].g_formation[2] = real_variables[3899];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[1,2] = real_variables[3900];
    coolStack.subStack.cathode_channel.channel.reaction.check_X_out_real[4] = real_variables[3903];
    coolStack.subStack.anode_channel.channel.reaction.X_out[5,2] = real_variables[3904];
    display_phTmdot_cath_in.y.pressure = real_variables[3906];
    coolStack.coolingPipe.cv[4] = real_variables[3907];
    flowCathode.fluidPort.X_outflow[2] = real_variables[3908];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.X[4] = real_variables[3909];
    sinkCathode.X_in[4] = real_variables[3910];
    coolStack.coolingPipe.friction.sat[3].cp_vap = real_variables[3911];
    coolStack.subStack.cathode_channel.channel.state[2].X[1] = real_variables[3912];
    coolStack.subStack.cell.cathode[4].s_component[4] = real_variables[3913];
    coolStack.subStack.cell.anode[5].T_degC = real_variables[3914];
    coolStack.subStack.cell.X_cath[3,5] = real_variables[3915];
    coolStack.subStack.cathode_channel.channel.gas[5].T = real_variables[3916];
    coolStack.coolingPipe.sat[1].lam_vap = real_variables[3917];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateA.p = real_variables[3921];
    coolStack.subStack.cell.p_cath[4] = real_variables[3922];
    coolStack.coolingPipe.friction.sigma[5] = real_variables[3923];
    coolStack.coolingPipe.p_satB = real_variables[3925];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[2,4] = real_variables[3927];
    coolStack.subStack.cell.anode[3].s_component[4] = real_variables[3928];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[1,1] = real_variables[3929];
    coolStack.coolingPipe.volume[3].pt = real_variables[3930];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[4,1] = real_variables[3931];
    coolStack.subStack.cell.anode[5].Xi[3] = real_variables[3932];
    coolStack.coolingPipe.htcoeff.sat[3].lam_vap = real_variables[3933];
    coolStack.coolingPipe.volume[4].ddph = real_variables[3934];
    multiDisplaySensor4.portA.h_outflow = real_variables[3935];
    coolStack.subStack.anode_channel.channel.gas[4].duTp = real_variables[3936];
    gasSensor2.portA.X_outflow[1] = real_variables[3937];
    coolStack.subStack.cell.anode[5].g_formation[1] = real_variables[3938];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.p = real_variables[3939];
    coolStack.subStack.cell.ohmicLoss.pin_n[2].v = real_variables[3940];
    coolStack.coolingPipe.volume[2].u = real_variables[3941];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[3,1] = real_variables[3942];
    coolStack.subStack.cell.port_cath[3].X[2] = real_variables[3943];
    coolStack.coolingPipe.friction.sat[3].x = real_variables[3944];
    display_an_out.X_O2 = real_variables[3947];
    gasSensor3.u.enthalpy = real_variables[3948];
    coolStack.subStack.cathode_channel.channel.gas[3].ddx[5] = real_variables[3949];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[4,2] = real_variables[3950];
    coolStack.subStack.anode_channel.channel.gas[4].X[1] = real_variables[3951];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[2,3] = real_variables[3952];
    coolStack.subStack.anode_channel.channel.reaction.y_out[1,3] = real_variables[3953];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.T = real_variables[3954];
    coolStack.subStack.cathode_channel.channel.gas[2].Xi[2] = real_variables[3955];
    coolStack.subStack.cell.activationLoss.T_cell[2] = real_variables[3956];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_outflow.T = real_variables[3957];
    display_cath_out.data.X[4] = real_variables[3958];
    coolStack.subStack.anode_channel.port[1].X[3] = real_variables[3959];
    coolStack.subStack.cell.activationLoss.pin_n[2].v = real_variables[3960];
    V_cell_exp.y[1] = real_variables[3961];
    coolStack.subStack.cell.X_cath[2,3] = real_variables[3962];
    display_phTmdot_w_out.h_kJ = real_variables[3964];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB_out.X[1] = real_variables[3965];
    coolStack.subStack.cell.concentrationLoss.E_loss_stack[4] = real_variables[3967];
    display_phTmdot_cath_out.mdot = real_variables[3968];
    coolStack.subStack.anode_channel.channel.gas[2].state.p = real_variables[3969];
    coolStack.subStack.cell.cathode[2].state.T = real_variables[3972];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.X[1] = real_variables[3973];
    coolStack.coolingPipe.friction.sat[4].cp_vap = real_variables[3974];
    coolStack.subStack.cell.waterContent.p_an_partial[3,1] = real_variables[3975];
    coolStack.subStack.anode_channel.port[1].H_flow = real_variables[3976];
    coolStack.subStack.cell.anode[1].ddx[4] = real_variables[3977];
    display_phTmdot_cath_in.y.X_flow[2] = real_variables[3978];
    coolStack.subStack.cell.T_cell[2] = real_variables[3979];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[2,2] = real_variables[3980];
    coolStack.coolingPipe.htcoeff.eta[2] = real_variables[3981];
    coolStack.subStack.cathode_channel.channel.gas[4].p = real_variables[3982];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[2,2] = real_variables[3983];
    coolStack.subStack.anode_channel.channel.rMX[2,1] = real_variables[3984];
    coolStack.subStack.cell.concentrationLoss.j_ionic[3] = real_variables[3985];
    coolStack.subStack.cell.electroOsmoticDrag.lambda[4] = real_variables[3986];
    coolStack.subStack.cell.anode[2].h_component[1] = real_variables[3987];
    display_cath_out.X_O2 = real_variables[3989];
    coolStack.coolingPipe.htcoeff.Nu_1ph[5] = real_variables[3990];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[1,5] = real_variables[3992];
    coolStack.subStack.cathode_channel.channel.gas[3].ddx[3] = real_variables[3993];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[3,1] = real_variables[3994];
    coolStack.coolingPipe.T_liq[4] = real_variables[3995];
    coolStack.drain_cooling.m_flow = real_variables[3996];
    coolStack.coolingPipe.sat[3].eta_vap = real_variables[3997];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.X[3] = real_variables[3998];
    coolStack.subStack.anode_channel.channel.q_fluid[5].T = real_variables[3999];
    humidification_an.y_wet_in[4] = real_variables[4000];
    coolStack.subStack.anode_channel.channel.gas[1].u_comp[3] = real_variables[4001];
    coolStack.subStack.anode_channel.channel.reaction.y_out[4,1] = real_variables[4002];
    coolStack.subStack.cell.cathode[4].ddx[1] = real_variables[4004];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[3,5] = real_variables[4005];
    coolStack.subStack.cell.anode[4].s_component[3] = real_variables[4006];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[3,3] = real_variables[4007];
    coolStack.subStack.cell.anode[3].ddx[3] = real_variables[4008];
    coolStack.subStack.cell.cathode[3].h_component[4] = real_variables[4009];
    coolStack.subStack.anode_channel.channel.gas[4].Z[2] = real_variables[4010];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_outflow.X[4] = real_variables[4011];
    coolStack.subStack.cell.gasDiffusion.T_cell[3] = real_variables[4012];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[4,4] = real_variables[4013];
    display_cath_in.y[1] = real_variables[4014];
    coolStack.subStack.cell.waterContent.p_cath_partial[1,2] = real_variables[4015];
    coolStack.subStack.cell.anode[5].Z[4] = real_variables[4017];
    multiDisplaySensor4.multiDisplaySensor.u.temp = real_variables[4018];
    coolStack.subStack.anode_channel.channel.Q_tot = real_variables[4019];
    coolStack.subStack.cell.anode[2].Xi[4] = real_variables[4020];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[3,4] = real_variables[4021];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.X[5] = real_variables[4022];
    coolStack.subStack.anode_channel.channel.gas[1].Z[4] = real_variables[4023];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[2,2] = real_variables[4024];
    coolStack.subStack.cathode_channel.port[1].X[2] = real_variables[4025];
    coolStack.coolingPipe.htcoeff.T_wall[4] = real_variables[4026];
    coolStack.subStack.cell.cathode[4].g_formation[2] = real_variables[4027];
    coolStack.subStack.cell.waterContent.p_cath_partial[2,2] = real_variables[4028];
    coolStack.subStack.cell.anode[1].state.X[1] = real_variables[4029];
    coolStack.subStack.cell.p_an_partial[5,4] = real_variables[4030];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[1,4] = real_variables[4031];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[4,2] = real_variables[4032];
    coolStack.subStack.cell.waterDiffusion.c_cath_H2O[1] = real_variables[4033];
    coolStack.subStack.cell.checkMassBalance = real_variables[4034];
    coolStack.subStack.anode_channel.channel.gas[4].Z[4] = real_variables[4035];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB_out.X[3] = real_variables[4036];
    coolStack.subStack.cell.activationLoss.j_ionic[4] = real_variables[4037];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.X[1] = real_variables[4038];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.X[5] = real_variables[4039];
    coolStack.subStack.cell.E0_cell[2] = real_variables[4040];
    coolStack.subStack.cell.anode[5].s_component[3] = real_variables[4041];
    coolStack.subStack.cathode_channel.channel.state[4].T = real_variables[4043];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.X[5] = real_variables[4044];
    coolStack.subStack.cell.concentrationLoss.pin_p[5].i = real_variables[4045];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.p = real_variables[4046];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[5,2] = real_variables[4047];
    coolStack.subStack.cell.cathode[3].ddx[4] = real_variables[4048];
    coolStack.subStack.cell.j_ionic[3] = real_variables[4049];
    coolStack.coolingPipe.friction.sat[5].eta_vap = real_variables[4050];
    sinkCathode.pressureBoundary.fluidPort[1].X_outflow[2] = real_variables[4051];
    coolStack.subStack.cell.waterContent.lambda[5] = real_variables[4052];
    coolStack.subStack.cell.waterContent.p_an_partial[5,2] = real_variables[4053];
    coolStack.subStack.cell.port_an[3].X[2] = real_variables[4054];
    coolStack.coolingPipe.friction.m_flow[4] = real_variables[4056];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].lambda = real_variables[4057];
    coolStack.subStack.cell.T_an[2] = real_variables[4059];
    coolStack.subStack.anode_channel.channel.state[4].X[4] = real_variables[4060];
    coolStack.coolingPipe.sat[4].x = real_variables[4061];
    coolStack.dUdt = real_variables[4062];
    coolStack.subStack.anode_channel.channel.htcoeff[3].m_flow = real_variables[4063];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.X[4] = real_variables[4064];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.X[4] = real_variables[4065];
    sinkCathode.pressureBoundary.h_set = real_variables[4066];
    coolStack.subStack.anode_channel.channel.gas[1].ddx[1] = real_variables[4067];
    coolStack.subStack.anode_channel.channel.gas[1].dUZT[4] = real_variables[4069];
    coolStack.subStack.anode_channel.channel.gas[3].ddx[2] = real_variables[4070];
    coolStack.coolingPipe.volume[5].ddph = real_variables[4071];
    coolStack.coolingPipe.volume[2].U = real_variables[4072];
    coolStack.subStack.cell.contaminantsLoss.y_an[2,4] = real_variables[4073];
    coolStack.subStack.cathode_channel.channel.gas[4].h_component[1] = real_variables[4074];
    coolStack.coolingPipe.friction.sat[3].cp_liq = real_variables[4075];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].m_flow = real_variables[4076];
    coolStack.subStack.cell.cathode[1].Z[1] = real_variables[4077];
    coolStack.coolingPipe.volume[2].dMX[1] = real_variables[4078];
    coolStack.coolingPipe.htcoeff.T_wall[5] = real_variables[4079];
    coolStack.subStack.cell.waterContent.lambda_cath[1] = real_variables[4081];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_outflow.p = real_variables[4083];
    coolStack.subStack.cell.cathode[3].s_component[2] = real_variables[4084];
    coolStack.subStack.cathode_channel.channel.gas[5].ddx[1] = real_variables[4085];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB_out.X[4] = real_variables[4087];
    coolStack.subStack.anode_channel.portB.X_outflow[2] = real_variables[4088];
    coolStack.subStack.cathode_channel.channel.state[6].X[5] = real_variables[4089];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[2,2] = real_variables[4090];
    coolStack.subStack.anode_channel.channel.gas[3].X[3] = real_variables[4091];
    coolStack.coolingPipe.htcoeff.Re_liq[2] = real_variables[4092];
    display_phTmdot_an_out.y.X[3] = real_variables[4093];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[5,2] = real_variables[4094];
    coolStack.subStack.anode_channel.h_inflow = real_variables[4095];
    display_an_in.data.X[4] = real_variables[4096];
    sinkP.fluidPort.m_flow = real_variables[4097];
    multiDisplaySensor1.multiDisplaySensor.u.X_flow[1] = real_variables[4098];
    coolStack.subStack.cathode_channel.channel.gas[1].X[1] = real_variables[4099];
    coolStack.subStack.cathode_channel.channel.rMX[4,5] = real_variables[4100];
    coolStack.subStack.cathode_channel.channel.gas[1].p = real_variables[4101];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[5,1] = real_variables[4102];
    coolStack.subStack.cell.waterContent.p_an_partial[2,2] = real_variables[4103];
    coolStack.subStack.cell.y_an[1,3] = real_variables[4104];
    coolStack.subStack.cell.cathode[2].g_formation[4] = real_variables[4105];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB.T = real_variables[4106];
    coolStack.subStack.cathode_channel.channel.gas[4].dUZT[1] = real_variables[4107];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_inflow.X[2] = real_variables[4108];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA_out.X[2] = real_variables[4109];
    coolStack.subStack.cell.cathode[3].X[3] = real_variables[4110];
    display_an_in.data.X_flow[2] = real_variables[4111];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.X[3] = real_variables[4112];
    flowAnode.X_in[1] = real_variables[4113];
    coolStack.subStack.cell.cathode[5].X[4] = real_variables[4114];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[2,1] = real_variables[4115];
    coolStack.subStack.anode_channel.channel.state[7].p = real_variables[4116];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[5,2] = real_variables[4117];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_inflow.X[1] = real_variables[4118];
    coolStack.coolingPipe.htcoeff.sat[1].x = real_variables[4120];
    gasSensor2.portB.h_outflow = real_variables[4121];
    coolStack.coolingPipe.portA[1].h_outflow = real_variables[4122];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.X[5] = real_variables[4123];
    coolStack.subStack.cathode_channel.channel.MX[5,3] = real_variables[4124];
    gasSensor2.state.p = real_variables[4125];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.X[5] = real_variables[4126];
    display_phTmdot_w_out.y.X_flow[1] = real_variables[4128];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.X[5] = real_variables[4129];
    coolStack.subStack.cell.anode[5].u = real_variables[4130];
    coolStack.subStack.cell.cathode[4].g_formation[3] = real_variables[4131];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[2,5] = real_variables[4132];
    coolStack.subStack.anode_channel.channel.gas[2].state.X[3] = real_variables[4133];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[4,2] = real_variables[4134];
    coolStack.coolingPipe.eta[3] = real_variables[4135];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[1,5] = real_variables[4136];
    coolStack.subStack.anode_channel.channel.gas[3].state.X[1] = real_variables[4137];
    coolStack.subStack.cathode_channel.channel.rMX[3,5] = real_variables[4139];
    coolStack.subStack.cell.p_cath_partial[2,4] = real_variables[4140];
    coolStack.coolingPipe.h_vap[5] = real_variables[4141];
    coolStack.coolingPipe.alpha[5] = real_variables[4142];
    coolStack.coolingPipe.sigma[4] = real_variables[4143];
    coolStack.subStack.cell.p_cath_partial[5,1] = real_variables[4144];
    coolStack.subStack.cell.sourceV[1].v = real_variables[4145];
    coolStack.subStack.cell.port_cath[4].X[3] = real_variables[4149];
    coolStack.subStack.anode_channel.channel.alpha[4] = real_variables[4150];
    coolStack.subStack.cathode_channel.channel.gas[3].T = real_variables[4151];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[3,2] = real_variables[4152];
    p_an_out.u2 = real_variables[4153];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.X[1] = real_variables[4154];
    coolStack.subStack.cell.port_an[5].H_flow = real_variables[4155];
    p_an_out.y = real_variables[4156];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.X[5] = real_variables[4157];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[2,4] = real_variables[4158];
    coolStack.subStack.anode_channel.channel.gas[4].u_comp[1] = real_variables[4159];
    coolStack.subStack.cathode_channel.channel.q[1].T = real_variables[4160];
    coolStack.subStack.cell.port_an[4].h = real_variables[4161];
    coolStack.coolingPipe.volume[3].state.p = real_variables[4162];
    coolStack.subStack.anode_channel.channel.gas[2].cp = real_variables[4163];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_outflow.p = real_variables[4164];
    coolStack.subStack.anode_channel.channel.gas[1].MM = real_variables[4165];
    coolStack.subStack.cell.anode[2].ddx[3] = real_variables[4166];
    coolStack.subStack.cell.port_cath[3].X[5] = real_variables[4167];
    multiDisplaySensor1.multiDisplaySensor.u.mdot = real_variables[4168];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[3,3] = real_variables[4169];
    coolStack.coolingPipe.volume[2].dE = real_variables[4170];
    coolStack.subStack.cathode_channel.channel.gas[5].Xi[2] = real_variables[4171];
    coolStack.subStack.anode_channel.channel.dp[2] = real_variables[4172];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_outflow.X[4] = real_variables[4173];
    flowCathode.fluidPort.X_outflow[4] = real_variables[4174];
    coolStack.subStack.cathode_channel.channel.gas[2].ddx[5] = real_variables[4175];
    coolStack.subStack.cell.cathode[3].u_comp[2] = real_variables[4176];
    coolStack.subStack.cell.cathode[1].s_component[2] = real_variables[4177];
    multiDisplaySensor4.u.mdot = real_variables[4178];
    coolStack.subStack.anode_channel.channel.reaction.X_in[3,3] = real_variables[4179];
    coolStack.subStack.anode_channel.channel.MX[3,4] = real_variables[4180];
    coolStack.feed_cath.X_outflow[1] = real_variables[4181];
    coolStack.coolingPipe.friction.sat[6].cp_liq = real_variables[4182];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[2,3] = real_variables[4183];
    coolStack.coolingPipe.h_vap[1] = real_variables[4184];
    coolStack.subStack.cell.cathode[5].duTp = real_variables[4185];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[1,1] = real_variables[4186];
    coolStack.subStack.cell.anode[4].Xi[2] = real_variables[4187];
    coolStack.subStack.cathode_channel.channel.q[5].T = real_variables[4188];
    coolStack.subStack.cell.sourceV[5].p.i = real_variables[4189];
    coolStack.subStack.cathode_channel.summary.M = real_variables[4190];
    coolStack.coolingPipe.sigmaB = real_variables[4191];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA.X[4] = real_variables[4192];
    coolStack.subStack.cathode_channel.channel.gas[3].cp = real_variables[4194];
    coolStack.subStack.cell.gasDiffusion.lambda[2] = real_variables[4195];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[1,1] = real_variables[4196];
    coolStack.subStack.cell.port_an[5].X[4] = real_variables[4197];
    coolStack.subStack.drain_cathode.X_outflow[4] = real_variables[4198];
    multiDisplaySensor4.u.X_flow[1] = real_variables[4199];
    coolStack.subStack.cell.X_an[3,3] = real_variables[4200];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_outflow.X[3] = real_variables[4201];
    coolStack.subStack.cell.port_cath[3].mX_flow[5] = real_variables[4202];
    coolStack.subStack.anode_channel.channel.gas[5].g_formation[4] = real_variables[4203];
    coolStack.subStack.cell.contaminantsLoss.T_cell[2] = real_variables[4204];
    coolStack.coolingPipe.h_liq[6] = real_variables[4205];
    coolStack.subStack.cell.cathode[4].u_comp[4] = real_variables[4207];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[5,1] = real_variables[4208];
    coolStack.subStack.anode_channel.channel.gas[3].Z[2] = real_variables[4209];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.T = real_variables[4210];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.X[5] = real_variables[4211];
    coolStack.subStack.cell.mX_flow_an_reac[4,1] = real_variables[4212];
    coolStack.subStack.cell.T_cath[1] = real_variables[4213];
    coolStack.subStack.cell.anode[2].state.p = real_variables[4215];
    coolStack.subStack.cell.X_cath[3,1] = real_variables[4216];
    coolStack.subStack.cathode_channel.channel.gas[2].MM = real_variables[4217];
    coolStack.subStack.cell.port_cath[3].m_flow = real_variables[4218];
    coolStack.subStack.anode_channel.channel.gas[1].h = real_variables[4219];
    coolStack.subStack.anode_channel.channel.gas[5].Xi[2] = real_variables[4220];
    sinkAnode.X_in[1] = real_variables[4221];
    coolStack.subStack.cathode_channel.channel.gas[5].MM = real_variables[4223];
    coolStack.subStack.cathode_channel.channel.gas[3].u_comp[2] = real_variables[4224];
    coolStack.subStack.cell.cathode[4].duTp = real_variables[4225];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_outflow.X[2] = real_variables[4226];
    coolStack.coolingPipe.Re_liq[3] = real_variables[4227];
    coolStack.subStack.cell.p_an_partial[4,2] = real_variables[4228];
    coolStack.subStack.cell.cathode[5].T_degC = real_variables[4229];
    coolStack.subStack.cell.sourceV[2].n.v = real_variables[4230];
    gasSensor1.state.X[5] = real_variables[4231];
    gasSensor4.u.enthalpy = real_variables[4232];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.X[4] = real_variables[4233];
    coolStack.subStack.cell.concentrationLoss.pin_p[2].v = real_variables[4234];
    coolStack.coolingPipe.htcoeff.sat[2].lam_vap = real_variables[4235];
    coolStack.subStack.cell.concentrationLoss.pin_n[2].i = real_variables[4236];
    coolStack.coolingPipe.sat[1].cp_liq = real_variables[4237];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[5,1] = real_variables[4238];
    coolStack.subStack.cell.cathode[2].duTp = real_variables[4239];
    sinkAnode.fluidPort.X_outflow[1] = real_variables[4240];
    coolStack.subStack.anode_channel.channel.reaction.Ztot[1] = real_variables[4241];
    coolStack.subStack.cathode_channel.channel.gas[1].d = real_variables[4242];
    coolStack.subStack.anode_channel.channel.gas[4].s_component[2] = real_variables[4243];
    coolStack.subStack.cell.port_an[3].p = real_variables[4245];
    coolStack.subStack.cell.cathode[5].Xi[3] = real_variables[4247];
    coolStack.subStack.anode_channel.channel.reaction.Zx[4,4] = real_variables[4248];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[4,3] = real_variables[4249];
    coolStack.subStack.anode_channel.channel.gas[3].T = real_variables[4250];
    coolStack.subStack.cell.port_an[5].mX_flow[1] = real_variables[4251];
    coolStack.subStack.cathode_channel.channel.gas[4].T_degC = real_variables[4252];
    coolStack.subStack.cathode_channel.channel.gas[2].p = real_variables[4255];
    coolStack.subStack.cell.cathode[4].h_component[3] = real_variables[4256];
    coolStack.subStack.anode_channel.channel.gas[4].Z[1] = real_variables[4257];
    coolStack.subStack.cell.contaminantsLoss.y_an[5,3] = real_variables[4258];
    coolStack.subStack.cathode_channel.channel.MX[3,1] = real_variables[4259];
    coolStack.subStack.cathode_channel.channel.gas[1].state.X[3] = real_variables[4260];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_inflow.X[3] = real_variables[4261];
    coolStack.subStack.cell.E0_cell[4] = real_variables[4262];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].lambda = real_variables[4263];
    coolStack.coolingPipe.dB_out = real_variables[4264];
    coolStack.subStack.cell.wall_cath[1].T = real_variables[4265];
    coolStack.coolingPipe.twoPhaseFraction[1] = real_variables[4266];
    coolStack.subStack.anode_channel.channel.portA[1].X_outflow[3] = real_variables[4267];
    coolStack.subStack.cathode_channel.channel.friction[2].m_flow = real_variables[4268];
    coolStack.subStack.cell.waterContent.p_an_partial[3,2] = real_variables[4269];
    coolStack.subStack.cell.X_cath[1,4] = real_variables[4270];
    coolStack.subStack.anode_channel.port[5].p = real_variables[4271];
    coolStack.subStack.anode_channel.channel.gas[3].Z[4] = real_variables[4272];
    coolStack.subStack.cell.port_an[3].mX_flow[2] = real_variables[4273];
    coolStack.subStack.cell.sourceV[4].p.i = real_variables[4274];
    coolStack.subStack.cell.cathode[3].dUZT[5] = real_variables[4275];
    coolStack.subStack.cathode_channel.channel.gas[1].dUZT[4] = real_variables[4276];
    coolStack.subStack.anode_channel.channel.friction[4].stateA_inflow.X[2] = real_variables[4277];
    coolStack.subStack.cell.waterContent.lambda_cath[3] = real_variables[4278];
    coolStack.coolingPipe.v[2] = real_variables[4279];
    coolStack.coolingPipe.htcoeff.cp[3] = real_variables[4280];
    coolStack.subStack.cell.port_cath[4].m_flow = real_variables[4281];
    coolStack.subStack.anode_channel.channel.MX[2,4] = real_variables[4282];
    flowAnode.massFlowBoundary.h_set = real_variables[4283];
    coolStack.subStack.cathode_channel.channel.gas[1].Z[3] = real_variables[4286];
    coolStack.subStack.cell.port_cath[4].mX_flow[5] = real_variables[4287];
    coolStack.subStack.anode_channel.channel.M[2] = real_variables[4288];
    coolStack.subStack.cathode_channel.channel.rMX[5,3] = real_variables[4289];
    coolStack.coolingPipe.volume[4].d = real_variables[4290];
    coolStack.subStack.cell.anode[2].s_component[2] = real_variables[4291];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA.X[1] = real_variables[4292];
    coolStack.subStack.cell.waterContent.p_an_partial[1,4] = real_variables[4293];
    display_cath_in.data.X[1] = real_variables[4294];
    humidification_an.y_H2O = real_variables[4295];
    coolStack.subStack.cell.p_cath_partial[3,4] = real_variables[4296];
    coolStack.subStack.cell.waterContent.T_cell[5] = real_variables[4297];
    coolStack.subStack.cell.waterContent.p_cath_partial[2,3] = real_variables[4298];
    coolStack.subStack.anode_channel.channel.summary.h_in = real_variables[4299];
    coolStack.subStack.anode_channel.channel.gas[1].X[4] = real_variables[4302];
    coolStack.subStack.anode_channel.channel.gas[2].Xi[3] = real_variables[4303];
    coolStack.subStack.anode_channel.channel.gas[4].dUZT[4] = real_variables[4304];
    coolStack.subStack.anode_channel.channel.htcoeff[4].lambda = real_variables[4305];
    coolStack.subStack.cell.y_cath[2,5] = real_variables[4306];
    display_phTmdot_w_out.y.pressure = real_variables[4307];
    coolStack.subStack.anode_channel.channel.rMX[1,1] = real_variables[4308];
    coolStack.subStack.cell.anode[4].u_comp[1] = real_variables[4311];
    coolStack.subStack.cathode_channel.channel.q_fluid[3].Q_flow = real_variables[4312];
    coolStack.subStack.cell.mX_flow_cath_reac[1,5] = real_variables[4314];
    coolStack.coolingPipe.htcoeff.p[5] = real_variables[4315];
    coolStack.subStack.cell.anode[5].d = real_variables[4316];
    coolStack.subStack.cell.anode[3].state.X[1] = real_variables[4317];
    display_phTmdot_cath_out.y.X[4] = real_variables[4319];
    display_phTmdot_an_out.y.X[2] = real_variables[4320];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[3,3] = real_variables[4321];
    coolStack.subStack.cathode_channel.channel.gas[2].X[3] = real_variables[4322];
    coolStack.subStack.cathode_channel.channel.gas[3].X[4] = real_variables[4323];
    coolStack.subStack.cell.wall_cath[2].Q_flow = real_variables[4324];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_outflow.X[1] = real_variables[4327];
    coolStack.subStack.cathode_channel.channel.gas[1].X[3] = real_variables[4328];
    coolStack.subStack.cell.E_conc_cell[5] = real_variables[4329];
    gasSensor2.state.X[3] = real_variables[4330];
    coolStack.subStack.cell.Q_wall_cath_cell[3] = real_variables[4332];
    sourceW.fluidPort.h_outflow = real_variables[4333];
    coolStack.subStack.cathode_channel.channel.Q_tot = real_variables[4334];
    coolStack.subStack.cathode_channel.channel.gas[4].Z[3] = real_variables[4335];
    coolStack.subStack.cathode_channel.channel.gas[3].Z[2] = real_variables[4336];
    coolStack.subStack.cathode_channel.wall[3].Q_flow = real_variables[4337];
    display_phTmdot_cath_out.T_degC = real_variables[4338];
    coolStack.coolingPipe.twoPhaseFraction_def[4] = real_variables[4339];
    coolStack.subStack.cell.Q_cell[5] = real_variables[4340];
    coolStack.coolingPipe.h_vap[2] = real_variables[4341];
    coolStack.subStack.cell.waterContent.T_an[2] = real_variables[4342];
    V_cell.showNumber = real_variables[4343];
    gasSensor2.state.X[1] = real_variables[4344];
    display_phTmdot_an_in.y.X[2] = real_variables[4345];
    coolStack.subStack.anode_channel.channel.gas[3].cp = real_variables[4346];
    coolStack.coolingPipe.htcoeff.T_wall[3] = real_variables[4347];
    coolStack.subStack.cathode_channel.channel.gas[5].cp = real_variables[4348];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].eta = real_variables[4349];
    coolStack.subStack.cell.y_cath[4,3] = real_variables[4351];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.T = real_variables[4352];
    coolStack.subStack.anode_channel.channel.gas[4].Rg = real_variables[4353];
    coolStack.subStack.cell.Q_wall_an_cell[2] = real_variables[4356];
    display_phTmdot_cath_in.y.X_flow[5] = real_variables[4357];
    coolStack.coolingPipe.drhodx[2] = real_variables[4358];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[3,4] = real_variables[4359];
    coolStack.subStack.anode_channel.channel.gas[1].h_component[1] = real_variables[4360];
    coolStack.subStack.cell.cathode[5].X[5] = real_variables[4361];
    gasSensor2.portB.X_outflow[1] = real_variables[4362];
    coolStack.subStack.cell.p_an_partial[1,3] = real_variables[4364];
    coolStack.subStack.cathode_channel.channel.gas[5].Z[3] = real_variables[4365];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.X[3] = real_variables[4366];
    coolStack.subStack.cathode_channel.channel.gas[1].u = real_variables[4367];
    coolStack.coolingPipe.T_fluid[4] = real_variables[4368];
    coolStack.subStack.cathode_channel.channel.q_fluid[2].T = real_variables[4369];
    coolStack.subStack.cell.cathode[5].s_component[1] = real_variables[4370];
    coolStack.subStack.cell.sourceV[4].v = real_variables[4371];
    coolStack.subStack.cell.anode[3].Z[1] = real_variables[4372];
    coolStack.subStack.cathode_channel.channel.MX[2,4] = real_variables[4373];
    coolStack.subStack.anode_channel.channel.reaction.Zx[3,2] = real_variables[4374];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.X[4] = real_variables[4375];
    gasSensor4.portA.h_outflow = real_variables[4376];
    coolStack.subStack.cathode_channel.portA.p = real_variables[4377];
    coolStack.subStack.cathode_channel.channel.gas[2].state.T = real_variables[4378];
    coolStack.subStack.cathode_channel.channel.gas[5].state.X[4] = real_variables[4379];
    coolStack.subStack.anode_channel.channel.gas[3].duTp = real_variables[4380];
    coolStack.subStack.cell.anode[5].u_comp[3] = real_variables[4381];
    coolStack.coolingPipe.volume[4].T = real_variables[4382];
    coolStack.coolingPipe.htcoeff.sat[4].d_vap = real_variables[4383];
    coolStack.subStack.cathode_channel.channel.gas[2].state.X[5] = real_variables[4384];
    coolStack.subStack.anode_channel.channel.gas[1].ddpT = real_variables[4385];
    coolStack.subStack.anode_channel.channel.reaction.Zx[2,2] = real_variables[4386];
    coolStack.subStack.cathode_channel.channel.gas[3].MM = real_variables[4387];
    coolStack.subStack.cell.cathode[4].g_formation[1] = real_variables[4388];
    coolStack.subStack.cell.waterContent.T_cath[1] = real_variables[4389];
    coolStack.subStack.cathode_channel.channel.gas[5].g_formation[1] = real_variables[4390];
    display_phTmdot_w_in.y.enthalpy = real_variables[4391];
    coolStack.subStack.cathode_channel.channel.pB = real_variables[4392];
    coolStack.subStack.cell.anode[5].dUZT[2] = real_variables[4393];
    coolStack.subStack.cathode_channel.channel.state[5].X[4] = real_variables[4395];
    coolStack.coolingPipe.htcoeff.alpha[4] = real_variables[4396];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[1,2] = real_variables[4397];
    sinkAnode.pressureBoundary.p_in = real_variables[4398];
    coolStack.subStack.anode_channel.summary.T_in = real_variables[4399];
    coolStack.subStack.cell.h_an[4] = real_variables[4400];
    coolStack.subStack.cell.contaminantsLoss.pin_p[2].i = real_variables[4401];
    coolStack.subStack.cathode_channel.channel.gas[4].u_comp[3] = real_variables[4402];
    coolStack.subStack.cathode_channel.channel.gas[2].Z[4] = real_variables[4403];
    coolStack.subStack.cell.anode[3].ddpT = real_variables[4404];
    coolStack.subStack.summary.P_stack = real_variables[4405];
    coolStack.subStack.T_stack[5] = real_variables[4406];
    coolStack.subStack.anode_channel.channel.gas[2].h = real_variables[4407];
    coolStack.subStack.anode_channel.channel.rMX[2,2] = real_variables[4408];
    gasSensor4.u.X_flow[3] = real_variables[4409];
    coolStack.subStack.cell.X_an[3,2] = real_variables[4410];
    coolStack.subStack.cell.X_an[2,1] = real_variables[4411];
    coolStack.subStack.cathode_channel.channel.gas[1].Xi[4] = real_variables[4412];
    coolStack.subStack.cell.port_cath[3].X[1] = real_variables[4413];
    coolStack.subStack.wall[5].Q_flow = real_variables[4414];
    coolStack.coolingPipe.friction.twoPhaseFraction[1] = real_variables[4415];
    coolStack.subStack.cathode_channel.summary.dp = real_variables[4416];
    coolStack.subStack.cathode_channel.wall[5].T = real_variables[4417];
    coolStack.coolingPipe.htcoeff.sat[4].cp_vap = real_variables[4418];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[3,1] = real_variables[4419];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[2,3] = real_variables[4420];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.X[3] = real_variables[4422];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[5,1] = real_variables[4423];
    coolStack.coolingPipe.volume[3].M = real_variables[4424];
    coolStack.subStack.cell.ohmicLoss.E_loss_cell[4] = real_variables[4426];
    flowAnode.fluidPort.X_outflow[3] = real_variables[4427];
    sinkCathode.pressureBoundary.X_in[4] = real_variables[4428];
    coolStack.subStack.cell.cathode[1].X[3] = real_variables[4429];
    coolStack.coolingPipe.htcoeff.Re_liq[4] = real_variables[4431];
    coolStack.coolingPipe.htcoeff.Pr[1] = real_variables[4432];
    coolStack.coolingPipe.friction.sat[2].cp_vap = real_variables[4433];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.X[5] = real_variables[4435];
    coolStack.subStack.cell.waterContent.p_cath_partial[4,2] = real_variables[4436];
    coolStack.subStack.summary.m_flow_an = real_variables[4437];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[5,1] = real_variables[4438];
    display_an_out.data.X[3] = real_variables[4439];
    coolStack.coolingPipe.TB_out = real_variables[4440];
    coolStack.coolingPipe.friction.sat[1].x = real_variables[4441];
    coolStack.coolingPipe.volume[2].M = real_variables[4442];
    coolStack.coolingPipe.dB = real_variables[4443];
    flowAnode.X_in[3] = real_variables[4444];
    coolStack.subStack.cell.waterContent.a_cath_H2O[3] = real_variables[4445];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[1,3] = real_variables[4446];
    coolStack.subStack.cathode_channel.portB.p = real_variables[4447];
    coolStack.subStack.cathode_channel.channel.gas[4].u = real_variables[4448];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[5,1] = real_variables[4450];
    coolStack.subStack.anode_channel.channel.gas[3].ddpT = real_variables[4451];
    gasSensor1.u.enthalpy = real_variables[4452];
    coolStack.subStack.cell.sourceV[4].p.v = real_variables[4453];
    coolStack.subStack.cell.anode[3].u_comp[3] = real_variables[4455];
    coolStack.coolingPipe.friction.sat[1].eta_liq = real_variables[4457];
    coolStack.subStack.cathode_channel.channel.gas[3].Xi[5] = real_variables[4459];
    coolStack.subStack.cell.anode[5].MM = real_variables[4460];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[2,2] = real_variables[4461];
    coolStack.subStack.anode_channel.channel.TA = real_variables[4462];
    coolStack.subStack.drain_anode.X_outflow[1] = real_variables[4463];
    coolStack.subStack.anode_channel.port[1].X[4] = real_variables[4464];
    coolStack.coolingPipe.T_wall[3] = real_variables[4465];
    coolStack.coolingPipe.htcoeff.m_flow[2] = real_variables[4466];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.X[1] = real_variables[4467];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[3,3] = real_variables[4468];
    coolStack.subStack.cell.anode[3].X[1] = real_variables[4469];
    coolStack.coolingPipe.htcoeff.sat[1].lam_liq = real_variables[4471];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB_out.X[2] = real_variables[4472];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB.X[4] = real_variables[4473];
    display_an_in.X_O2 = real_variables[4474];
    coolStack.subStack.anode_channel.channel.gas[5].Z[2] = real_variables[4476];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[1,4] = real_variables[4477];
    coolStack.subStack.cell.cathode[5].h = real_variables[4479];
    coolStack.subStack.cell.Q_wall_cell[4] = real_variables[4480];
    coolStack.subStack.cell.port_an[3].h = real_variables[4481];
    coolStack.subStack.cell.port_an[2].m_flow = real_variables[4482];
    coolStack.subStack.anode_channel.channel.reaction.X_in[1,4] = real_variables[4483];
    coolStack.subStack.cathode_channel.channel.gas[2].dUZT[2] = real_variables[4484];
    coolStack.subStack.cell.wall_cath[4].T = real_variables[4486];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.X[2] = real_variables[4488];
    coolStack.subStack.cell.waterContent.p_an_partial[1,1] = real_variables[4489];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_inflow.T = real_variables[4490];
    coolStack.subStack.cathode_channel.channel.Q[1] = real_variables[4491];
    coolStack.subStack.cell.port_cath[2].X[4] = real_variables[4492];
    coolStack.subStack.cell.port_cath[5].X[3] = real_variables[4493];
    coolStack.subStack.cell.ohmicLoss.sigma[5] = real_variables[4494];
    coolStack.subStack.cell.cathode[2].cp = real_variables[4496];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[5,3] = real_variables[4497];
    coolStack.subStack.cell.anode[4].h_component[3] = real_variables[4498];
    coolStack.coolingPipe.friction.eta[2] = real_variables[4499];
    coolStack.subStack.cell.y_an[2,3] = real_variables[4500];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.X[2] = real_variables[4501];
    coolStack.subStack.anode_channel.channel.gas[4].ddx[2] = real_variables[4502];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_inflow.p = real_variables[4503];
    coolStack.subStack.anode_channel.channel.gas[3].Xi[1] = real_variables[4504];
    coolStack.subStack.anode_channel.channel.gas[3].u_comp[4] = real_variables[4505];
    coolStack.coolingPipe.friction.sat[4].lam_vap = real_variables[4506];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.X[5] = real_variables[4507];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[4,4] = real_variables[4508];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[4,2] = real_variables[4509];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.X[3] = real_variables[4510];
    coolStack.subStack.cathode_channel.portA.X_outflow[4] = real_variables[4511];
    coolStack.coolingPipe.Re[1] = real_variables[4512];
    coolStack.coolingPipe.sat[5].cp_liq = real_variables[4513];
    coolStack.subStack.cell.anode[1].h_component[2] = real_variables[4514];
    coolStack.subStack.cathode_channel.channel.gas[1].u_comp[4] = real_variables[4515];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[4,2] = real_variables[4516];
    coolStack.subStack.cell.cathode[3].d = real_variables[4517];
    coolStack.subStack.cathode_channel.channel.gas[1].state.X[5] = real_variables[4519];
    coolStack.subStack.cell.wall[5].T = real_variables[4520];
    coolStack.subStack.cell.E_ohm_cell[4] = real_variables[4521];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB.X[1] = real_variables[4522];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[3,2] = real_variables[4523];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[1,1] = real_variables[4525];
    coolStack.subStack.anode_channel.channel.q[3].T = real_variables[4526];
    gasSensor3.u.X_flow[2] = real_variables[4527];
    p_cath_variation.y[1] = real_variables[4528];
    coolStack.coolingPipe.friction.d[2] = real_variables[4529];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.X[5] = real_variables[4530];
    coolStack.subStack.cathode_channel.summary.h_in = real_variables[4531];
    coolStack.subStack.anode_channel.channel.gas[4].Xi[4] = real_variables[4532];
    coolStack.subStack.anode_channel.summary.dp = real_variables[4533];
    coolStack.subStack.anode_channel.channel.q_fluid[4].Q_flow = real_variables[4534];
    coolStack.subStack.cell.anode[5].Xi[4] = real_variables[4535];
    coolStack.subStack.cell.anode[5].cp = real_variables[4536];
    coolStack.subStack.cell.port_cath[1].X[5] = real_variables[4537];
    coolStack.subStack.cathode_channel.channel.gas[1].Xi[1] = real_variables[4538];
    coolStack.subStack.cell.cathode[1].state.X[2] = real_variables[4542];
    flowAnode.fluidPort.X_outflow[4] = real_variables[4547];
    sinkCathode.pressureBoundary.state.X[2] = real_variables[4548];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_outflow.X[3] = real_variables[4549];
    coolStack.subStack.cell.wall_an[3].T = real_variables[4550];
    coolStack.subStack.anode_channel.channel.reaction.p[2] = real_variables[4551];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[2,2] = real_variables[4552];
    p_water_variation.y[1] = real_variables[4553];
    gasSensor2.u.X[2] = real_variables[4554];
    coolStack.subStack.anode_channel.channel.gas[4].s_component[1] = real_variables[4555];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB.X[3] = real_variables[4557];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[1,2] = real_variables[4558];
    coolStack.subStack.anode_channel.channel.gas[1].X[3] = real_variables[4559];
    coolStack.subStack.cell.anode[2].Rg = real_variables[4560];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[5,3] = real_variables[4561];
    coolStack.subStack.cathode_channel.channel.gas[5].ddx[2] = real_variables[4562];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[1,2] = real_variables[4563];
    coolStack.subStack.cell.wall[3].Q_flow = real_variables[4564];
    coolStack.subStack.cell.cathode[5].state.T = real_variables[4565];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_outflow.X[4] = real_variables[4566];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA_out.X[3] = real_variables[4567];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[2,3] = real_variables[4568];
    gasSensor3.portB.X_outflow[3] = real_variables[4569];
    coolStack.coolingPipe.cv[3] = real_variables[4571];
    coolStack.subStack.cathode_channel.channel.state[2].T = real_variables[4572];
    coolStack.subStack.cell.waterContent.a_cath_H2O[2] = real_variables[4574];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[5,5] = real_variables[4575];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.X[2] = real_variables[4576];
    coolStack.coolingPipe.h_vap[3] = real_variables[4577];
    coolStack.subStack.wall[2].Q_flow = real_variables[4578];
    error.u2 = real_variables[4579];
    coolStack.coolingPipe.T_wall[4] = real_variables[4580];
    coolStack.subStack.anode_channel.channel.reaction.X_out[3,4] = real_variables[4582];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB.X[3] = real_variables[4583];
    coolStack.subStack.cell.p_cath_partial[1,5] = real_variables[4584];
    multiDisplaySensor4.multiDisplaySensor.portB.h_outflow = real_variables[4585];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[2,3] = real_variables[4588];
    coolStack.subStack.anode_channel.channel.reaction.p[5] = real_variables[4589];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[5,2] = real_variables[4590];
    coolStack.subStack.cathode_channel.channel.reaction.Ztot[4] = real_variables[4591];
    coolStack.subStack.cathode_channel.channel.gas[2].h_component[3] = real_variables[4592];
    coolStack.subStack.cell.cathode[2].MM = real_variables[4593];
    coolStack.subStack.cathode_channel.channel.q_fluid[5].Q_flow = real_variables[4594];
    coolStack.subStack.anode_channel.channel.gas[3].T_degC = real_variables[4595];
    coolStack.subStack.cathode_channel.channel.gas[1].u_comp[1] = real_variables[4596];
    coolStack.subStack.cell.cathode[2].g_formation[1] = real_variables[4597];
    coolStack.coolingPipe.htcoeff.Re[5] = real_variables[4598];
    coolStack.subStack.cathode_channel.channel.gas[3].s_component[2] = real_variables[4599];
    multiDisplaySensor1.multiDisplaySensor.u.temp = real_variables[4600];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[3,5] = real_variables[4601];
    coolStack.subStack.anode_channel.portB.p = real_variables[4602];
    coolStack.subStack.cell.y_cath[3,5] = real_variables[4603];
    multiDisplaySensor1.multiDisplaySensor.portA.h_outflow = real_variables[4604];
    coolStack.subStack.cell.T_cath[3] = real_variables[4605];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.T = real_variables[4606];
    coolStack.subStack.cell.cathode[4].state.p = real_variables[4607];
    coolStack.subStack.anode_channel.channel.gas[2].state.X[1] = real_variables[4609];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[4,4] = real_variables[4610];
    coolStack.subStack.cell.cathode[1].u = real_variables[4611];
    coolStack.subStack.cathode_channel.channel.gas[4].s_component[2] = real_variables[4612];
    coolStack.subStack.cell.port_cath[1].H_flow = real_variables[4613];
    p_water_out.y = real_variables[4614];
    display_phTmdot_w_out.mdot = real_variables[4615];
    gasSensor2.u.X_flow[3] = real_variables[4616];
    coolStack.subStack.cell.j_ionic[1] = real_variables[4617];
    display_phTmdot_cath_out.y.X[3] = real_variables[4618];
    gasSensor1.u.temp = real_variables[4619];
    coolStack.subStack.anode_channel.channel.rMX[5,1] = real_variables[4620];
    coolStack.subStack.cell.p_an_partial[1,2] = real_variables[4621];
    coolStack.subStack.cell.port_cath[1].h = real_variables[4622];
    coolStack.coolingPipe.m_flow[5] = real_variables[4623];
    coolStack.subStack.cell.anode[5].h_component[1] = real_variables[4625];
    coolStack.subStack.cathode_channel.channel.reaction.a[3] = real_variables[4626];
    coolStack.subStack.cell.E0_cell[1] = real_variables[4627];
    coolStack.subStack.anode_channel.channel.gas[5].state.T = real_variables[4628];
    coolStack.subStack.cell.y_an[3,3] = real_variables[4629];
    coolStack.subStack.cathode_channel.channel.gas[1].state.X[1] = real_variables[4630];
    coolStack.subStack.cell.activationLoss.pin_n[2].i = real_variables[4631];
    coolStack.subStack.cell.waterContent.a_an_H2O[4] = real_variables[4632];
    coolStack.subStack.cell.waterDiffusion.c_an_H2O[3] = real_variables[4633];
    coolStack.subStack.cell.activationLoss.pin_n[4].v = real_variables[4634];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.X[4] = real_variables[4635];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.X[5] = real_variables[4637];
    coolStack.subStack.cell.Q_wall_cath_cell[4] = real_variables[4638];
    coolStack.coolingPipe.htcoeff.sat[3].cp_vap = real_variables[4639];
    coolStack.subStack.cell.mX_flow_cath_reac[2,3] = real_variables[4640];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[4,3] = real_variables[4641];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].Pr = real_variables[4644];
    display_phTmdot_w_in.y.X[1] = real_variables[4645];
    coolStack.subStack.cathode_channel.channel.portB[1].m_flow = real_variables[4646];
    coolStack.subStack.cell.X_cath[2,1] = real_variables[4647];
    coolStack.subStack.cathode_channel.channel.portA[1].X_outflow[4] = real_variables[4648];
    coolStack.subStack.cell.sourceV[5].n.i = real_variables[4649];
    coolStack.subStack.anode_channel.channel.gas[4].dUZT[2] = real_variables[4650];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[1,2] = real_variables[4651];
    coolStack.coolingPipe.htcoeff.sat[2].lam_liq = real_variables[4652];
    coolStack.subStack.cell.cathode[1].s_component[5] = real_variables[4653];
    coolStack.subStack.anode_channel.channel.reaction.Zx[2,3] = real_variables[4654];
    gasSensor4.state.T = real_variables[4655];
    coolStack.subStack.cell.cathode[3].X[2] = real_variables[4656];
    coolStack.subStack.cell.cathode[1].ddx[3] = real_variables[4657];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_inflow.T = real_variables[4658];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[1,4] = real_variables[4659];
    coolStack.coolingPipe.friction.sat[2].cp_liq = real_variables[4660];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[1,4] = real_variables[4661];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[5,1] = real_variables[4662];
    coolStack.subStack.anode_channel.channel.p[2] = real_variables[4663];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.X[3] = real_variables[4664];
    coolStack.subStack.cell.cathode[4].X[5] = real_variables[4665];
    coolStack.subStack.cell.anode[5].h = real_variables[4667];
    coolStack.summary.T_stack[2] = real_variables[4668];
    coolStack.subStack.anode_channel.summary.h_out = real_variables[4672];
    coolStack.subStack.anode_channel.channel.state[5].X[3] = real_variables[4673];
    coolStack.subStack.cell.y_an[3,4] = real_variables[4675];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.T = real_variables[4676];
    coolStack.subStack.cell.eff_cell = real_variables[4677];
    coolStack.subStack.cell.X_an[1,3] = real_variables[4678];
    coolStack.subStack.cell.wall_cath[3].Q_flow = real_variables[4680];
    coolStack.subStack.cell.mX_flow_cath_transport[4,3] = real_variables[4681];
    coolStack.subStack.anode_channel.port[3].X[4] = real_variables[4682];
    coolStack.subStack.cathode_channel.channel.friction[3].dp = real_variables[4683];
    coolStack.subStack.cell.anode[4].state.X[2] = real_variables[4684];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA_out.T = real_variables[4685];
    coolStack.coolingPipe.twoPhaseFraction_def[3] = real_variables[4686];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[2,2] = real_variables[4687];
    sinkCathode.pressureBoundary.fluidPort[1].X_outflow[4] = real_variables[4688];
    coolStack.subStack.anode_channel.channel.gas[4].g_formation[1] = real_variables[4689];
    sinkCathode.pressureBoundary.X_in[5] = real_variables[4690];
    coolStack.coolingPipe.volume[5].T = real_variables[4691];
    coolStack.subStack.cell.anode[4].d = real_variables[4692];
    coolStack.subStack.cathode_channel.channel.MX[5,4] = real_variables[4693];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[4,5] = real_variables[4695];
    coolStack.subStack.cell.y_an[3,2] = real_variables[4696];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[2,3] = real_variables[4697];
    coolStack.coolingPipe.volume[1].dM_bulk = real_variables[4698];
    coolStack.subStack.cathode_channel.channel.gas[4].Xi[3] = real_variables[4699];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.X[2] = real_variables[4700];
    coolStack.subStack.anode_channel.channel.friction[2].dp = real_variables[4701];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[3,5] = real_variables[4702];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_outflow.X[4] = real_variables[4703];
    coolStack.subStack.cell.cathode[4].X[3] = real_variables[4704];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].Re = real_variables[4705];
    flowCathode.massFlowBoundary.fluidPort.X_outflow[2] = real_variables[4706];
    display_cath_out.data.X[3] = real_variables[4708];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA.T = real_variables[4710];
    coolStack.subStack.anode_channel.channel.reaction.y_out[3,2] = real_variables[4711];
    coolStack.subStack.anode_channel.port[4].X[1] = real_variables[4713];
    coolStack.feed_cath.m_flow = real_variables[4714];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_outflow.X[2] = real_variables[4715];
    display_Q.showNumber = real_variables[4716];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[2,1] = real_variables[4717];
    sinkAnode.pressureBoundary.state.p = real_variables[4718];
    coolStack.subStack.cell.concentrationLoss.pin_n[3].v = real_variables[4719];
    coolStack.subStack.drain_cathode.m_flow = real_variables[4720];
    coolStack.subStack.cathode_channel.channel.state[4].X[2] = real_variables[4721];
    gasSensor1.portB.p = real_variables[4722];
    coolStack.subStack.cell.sourceV[3].i = real_variables[4723];
    coolStack.subStack.cathode_channel.portA.X_outflow[1] = real_variables[4724];
    coolStack.subStack.cathode_channel.channel.Q_fluid[3] = real_variables[4725];
    coolStack.subStack.cell.h_an[1] = real_variables[4726];
    coolStack.subStack.cell.anode[3].u_comp[1] = real_variables[4727];
    coolStack.coolingPipe.Re[2] = real_variables[4728];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA_out.p = real_variables[4729];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].Re = real_variables[4730];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[3,2] = real_variables[4731];
    sinkAnode.pressureBoundary.fluidPort[1].p = real_variables[4732];
    coolStack.subStack.cathode_channel.port[3].X[5] = real_variables[4733];
    coolStack.subStack.cathode_channel.portA.X_outflow[3] = real_variables[4734];
    coolStack.subStack.cathode_channel.port[2].H_flow = real_variables[4735];
    coolStack.coolingPipe.htcoeff.sat[5].d_liq = real_variables[4737];
    coolStack.subStack.anode_channel.channel.gas[5].state.p = real_variables[4738];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA.X[3] = real_variables[4739];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[2,3] = real_variables[4740];
    coolStack.subStack.cathode_channel.channel.gas[2].g_formation[5] = real_variables[4741];
    display_cath_out.data.pressure = real_variables[4742];
    coolStack.subStack.anode_channel.channel.gas[3].dUZT[3] = real_variables[4743];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[5,4] = real_variables[4744];
    coolStack.subStack.anode_channel.channel.gas[2].u_comp[2] = real_variables[4745];
    coolStack.subStack.cell.dTdt[4] = real_variables[4746];
    coolStack.subStack.cell.electroOsmoticDrag.lambda[5] = real_variables[4747];
    coolStack.coolingPipe.htcoeff.p[1] = real_variables[4749];
    display_cath_in.y[4] = real_variables[4750];
    coolStack.subStack.cathode_channel.channel.gas[1].g_formation[5] = real_variables[4751];
    coolStack.subStack.cathode_channel.portB.X_outflow[3] = real_variables[4752];
    coolStack.coolingPipe.T_vap_out = real_variables[4753];
    coolStack.drain_cooling.p = real_variables[4754];
    coolStack.subStack.cathode_channel.port[1].mX_flow[5] = real_variables[4755];
    coolStack.subStack.cathode_channel.channel.friction[1].dA = real_variables[4756];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[4,5] = real_variables[4757];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[2,2] = real_variables[4758];
    gasSensor1.state.X[4] = real_variables[4759];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_inflow.X[4] = real_variables[4760];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[2,3] = real_variables[4761];
    coolStack.subStack.cell.sourceV[4].i = real_variables[4762];
    coolStack.subStack.anode_channel.channel.Q_fluid[1] = real_variables[4764];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[5,2] = real_variables[4765];
    coolStack.subStack.cell.X_an[1,4] = real_variables[4766];
    coolStack.subStack.anode_channel.channel.pB = real_variables[4767];
    coolStack.subStack.cathode_channel.channel.state[7].p = real_variables[4768];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA_out.X[5] = real_variables[4769];
    display_cath_out.data.X_flow[5] = real_variables[4770];
    coolStack.subStack.cathode_channel.channel.state[4].X[4] = real_variables[4771];
    coolStack.subStack.cell.anode[4].T = real_variables[4772];
    display_phTmdot_cath_in.y.X[1] = real_variables[4773];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[4,1] = real_variables[4774];
    coolStack.subStack.anode_channel.channel.htcoeff[3].cp = real_variables[4775];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_outflow.X[5] = real_variables[4776];
    coolStack.drain_cath.X_outflow[2] = real_variables[4777];
    coolStack.subStack.cell.anode[1].X[2] = real_variables[4778];
    gasSensor1.state.X[2] = real_variables[4780];
    display_phTmdot_cath_out.y.X[5] = real_variables[4781];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[3,4] = real_variables[4782];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.X[4] = real_variables[4783];
    coolStack.subStack.cell.cathode[1].Z[5] = real_variables[4784];
    coolStack.coolingPipe.sat[5].lam_liq = real_variables[4785];
    flowAnode.massFlowBoundary.X_in[1] = real_variables[4786];
    display_phTmdot_cath_in.y.enthalpy = real_variables[4787];
    coolStack.coolingPipe.htcoeff.sat[2].eta_liq = real_variables[4788];
    coolStack.subStack.cathode_channel.channel.gas[2].d = real_variables[4789];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.X[1] = real_variables[4791];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[4,3] = real_variables[4792];
    coolStack.subStack.cell.cathode[5].dUZT[4] = real_variables[4793];
    coolStack.subStack.cell.concentrationLoss.pin_n[4].i = real_variables[4794];
    coolStack.subStack.cell.anode[1].Z[3] = real_variables[4795];
    display_an_in.data.pressure = real_variables[4796];
    coolStack.subStack.cell.cathode[3].state.X[4] = real_variables[4797];
    coolStack.coolingPipe.htcoeff.twoPhaseFraction[1] = real_variables[4798];
    coolStack.subStack.cell.anode[1].ddTp = real_variables[4799];
    coolStack.subStack.cell.anode[1].p = real_variables[4800];
    flowCathode.massFlowBoundary.m_flow_in = real_variables[4802];
    coolStack.subStack.cell.X_an[3,1] = real_variables[4803];
    coolStack.subStack.anode_channel.channel.reaction.X_out[2,3] = real_variables[4804];
    coolStack.coolingPipe.etaB = real_variables[4805];
    coolStack.subStack.cathode_channel.channel.MX[3,4] = real_variables[4806];
    coolStack.coolingPipe.htcoeff.Q_s[3] = real_variables[4808];
    coolStack.subStack.cell.waterDiffusion.c_an_H2O[2] = real_variables[4809];
    coolStack.subStack.cell.gasDiffusion.T_an[4] = real_variables[4810];
    coolStack.subStack.cell.Q_cell[2] = real_variables[4811];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.p = real_variables[4812];
    coolStack.coolingPipe.cp[1] = real_variables[4814];
    coolStack.subStack.cell.anode[1].state.X[2] = real_variables[4815];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[1,1] = real_variables[4816];
    coolStack.subStack.summary.V_stack = real_variables[4817];
    coolStack.subStack.cathode_channel.channel.gas[2].g_formation[2] = real_variables[4818];
    coolStack.subStack.anode_channel.channel.reaction.y_out[3,1] = real_variables[4819];
    coolStack.subStack.cell.j = real_variables[4820];
    coolStack.subStack.anode_channel.channel.reaction.MM[5] = real_variables[4821];
    coolStack.subStack.cell.port_an[1].mX_flow[2] = real_variables[4823];
    coolStack.subStack.cathode_channel.channel.gas[1].Z[1] = real_variables[4824];
    coolStack.subStack.cell.waterDiffusion.lambda_an[5] = real_variables[4827];
    coolStack.subStack.cathode_channel.channel.MX[1,3] = real_variables[4828];
    coolStack.subStack.cell.anode[5].dUZT[3] = real_variables[4831];
    coolStack.subStack.anode_channel.channel.Q[1] = real_variables[4832];
    coolStack.subStack.cell.cathode[3].u_comp[3] = real_variables[4833];
    coolStack.subStack.anode_channel.channel.gas[2].T = real_variables[4834];
    coolStack.coolingPipe.state[3].h = real_variables[4836];
    coolStack.subStack.cell.anode[3].Xi[2] = real_variables[4839];
    coolStack.subStack.cell.anode[1].T_degC = real_variables[4840];
    coolStack.subStack.cell.activationLoss.E_loss_stack[2] = real_variables[4841];
    coolStack.subStack.anode_channel.portA.m_flow = real_variables[4842];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.X[4] = real_variables[4844];
    coolStack.subStack.cell.X_an[1,2] = real_variables[4845];
    coolStack.subStack.cell.waterContent.p_cath_partial[4,5] = real_variables[4846];
    coolStack.subStack.cathode_channel.channel.gas[3].state.X[5] = real_variables[4847];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.X[2] = real_variables[4848];
    coolStack.subStack.cell.cathode[4].Xi[4] = real_variables[4850];
    coolStack.coolingPipe.twoPhaseFraction[3] = real_variables[4851];
    coolStack.coolingPipe.volume[2].T = real_variables[4852];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_inflow.X[1] = real_variables[4856];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[3,4] = real_variables[4857];
    coolStack.coolingPipe.sat[2].x = real_variables[4859];
    coolStack.subStack.anode_channel.channel.reaction.X_in[5,2] = real_variables[4862];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[3,1] = real_variables[4863];
    coolStack.subStack.cell.cathode[3].state.T = real_variables[4864];
    coolStack.subStack.cathode_channel.channel.portA[1].X_outflow[2] = real_variables[4865];
    display_phTmdot_cath_out.y.X_flow[3] = real_variables[4866];
    coolStack.subStack.cathode_channel.port[2].X[5] = real_variables[4867];
    coolStack.subStack.anode_channel.channel.gas[5].s_component[3] = real_variables[4868];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].m_flow = real_variables[4872];
    gasSensor4.u.X_flow[2] = real_variables[4873];
    coolStack.subStack.cell.anode[4].s_component[4] = real_variables[4874];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.X[3] = real_variables[4875];
    coolStack.subStack.anode_channel.channel.summary.m_flow = real_variables[4877];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.X[1] = real_variables[4878];
    sinkP.pressureBoundary.h_port[1] = real_variables[4879];
    coolStack.coolingPipe.htcoeff.sat[1].d_vap = real_variables[4880];
    coolStack.subStack.cathode_channel.channel.gas[2].dUZT[4] = real_variables[4881];
    coolStack.subStack.cell.waterContent.p_cath_partial[5,3] = real_variables[4882];
    coolStack.subStack.cell.port_cath[2].X[1] = real_variables[4883];
    coolStack.drain_an.p = real_variables[4884];
    coolStack.subStack.anode_channel.channel.reaction.X_in[1,3] = real_variables[4885];
    coolStack.subStack.cell.waterContent.a_cell_H2O[4] = real_variables[4886];
    coolStack.subStack.cell.waterContent.f_w[1] = real_variables[4887];
    coolStack.subStack.cell.electroOsmoticDrag.I_cell[2] = real_variables[4888];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.p = real_variables[4889];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[1,2] = real_variables[4891];
    flowAnode.massFlowBoundary.d = real_variables[4892];
    coolStack.subStack.anode_channel.channel.htcoeff[1].lambda = real_variables[4893];
    coolStack.coolingPipe.friction.eta[4] = real_variables[4894];
    flowCathode.massFlowBoundary.state.T = real_variables[4896];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[2,1] = real_variables[4897];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[1,2] = real_variables[4898];
    coolStack.coolingPipe.friction.sat[5].x = real_variables[4899];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[5,5] = real_variables[4900];
    coolStack.subStack.cell.cathode[1].dUZT[5] = real_variables[4901];
    coolStack.subStack.cell.electroOsmoticDrag.T_an[1] = real_variables[4902];
    coolStack.drain_an.h_outflow = real_variables[4903];
    coolStack.subStack.cathode_channel.channel.gas[5].Xi[1] = real_variables[4905];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_inflow.p = real_variables[4906];
    coolStack.subStack.cathode_channel.checkEnergyBalance = real_variables[4907];
    sinkP.pressureBoundary.fluidPort[1].p = real_variables[4908];
    coolStack.coolingPipe.T_liq[3] = real_variables[4909];
    coolStack.subStack.cell.Q_cell[4] = real_variables[4911];
    display_an_out.data.pressure = real_variables[4912];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[4,2] = real_variables[4913];
    coolStack.coolingPipe.satA.cp_liq = real_variables[4914];
    coolStack.subStack.anode_channel.channel.gas[4].u_comp[4] = real_variables[4915];
    flowCathode.massFlowBoundary.X_in[5] = real_variables[4916];
    coolStack.coolingPipe.volume[3].T_in = real_variables[4917];
    coolStack.subStack.anode_channel.port[3].p = real_variables[4918];
    coolStack.subStack.anode_channel.channel.gas[3].s_component[2] = real_variables[4919];
    gasSensor3.u.temp = real_variables[4920];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[4,5] = real_variables[4921];
    sinkCathode.fluidPort.h_outflow = real_variables[4922];
    coolStack.subStack.anode_channel.channel.htcoeff[4].Pr = real_variables[4924];
    coolStack.subStack.cathode_channel.channel.state[5].X[5] = real_variables[4925];
    coolStack.subStack.cathode_channel.channel.friction[4].dp = real_variables[4926];
    coolStack.subStack.cell.cathode[5].ddTp = real_variables[4927];
    flowAnode.m_flow_in = real_variables[4928];
    coolStack.subStack.cell.p_cath_partial[1,1] = real_variables[4929];
    coolStack.subStack.cell.port_cath[5].X[5] = real_variables[4930];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB_out.T = real_variables[4931];
    coolStack.subStack.cell.anode[2].ddx[4] = real_variables[4932];
    coolStack.subStack.cell.waterDiffusion.T_cath[4] = real_variables[4933];
    coolStack.subStack.cathode_channel.wall[2].T = real_variables[4934];
    display_phTmdot_cath_out.y.mdot = real_variables[4935];
    coolStack.subStack.cell.anode[4].state.T = real_variables[4936];
    coolStack.subStack.anode_channel.channel.gas[4].Xi[3] = real_variables[4937];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_outflow.p = real_variables[4938];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[5,2] = real_variables[4939];
    coolStack.subStack.cell.anode[2].state.X[2] = real_variables[4940];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.T = real_variables[4941];
    coolStack.coolingPipe.volume[3].state.h = real_variables[4942];
    coolStack.subStack.cell.cathode[2].ddTp = real_variables[4943];
    coolStack.subStack.cathode_channel.channel.MX[3,2] = real_variables[4944];
    coolStack.subStack.cell.cathode[2].X[2] = real_variables[4945];
    coolStack.coolingPipe.sat[3].lam_vap = real_variables[4946];
    coolStack.subStack.cell.gasDiffusion.T_cell[2] = real_variables[4947];
    coolStack.subStack.cell.cathode[1].g_formation[3] = real_variables[4948];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.X[1] = real_variables[4949];
    coolStack.coolingPipe.htcoeff.Fr[2] = real_variables[4950];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.p = real_variables[4951];
    coolStack.X_feed_cath[4] = real_variables[4952];
    coolStack.subStack.cell.anode[4].ddpT = real_variables[4953];
    sinkCathode.fluidPort.X_outflow[5] = real_variables[4954];
    coolStack.subStack.anode_channel.channel.gas[3].ddx[1] = real_variables[4955];
    coolStack.subStack.anode_channel.port[4].mX_flow[1] = real_variables[4956];
    coolStack.subStack.summary.T_stack[5] = real_variables[4957];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.X[4] = real_variables[4958];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[2,5] = real_variables[4961];
    coolStack.subStack.cathode_channel.port[4].p = real_variables[4962];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_outflow.T = real_variables[4963];
    coolStack.subStack.anode_channel.port[2].X[2] = real_variables[4964];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[4,4] = real_variables[4965];
    coolStack.subStack.cathode_channel.channel.gas[1].u_comp[5] = real_variables[4966];
    coolStack.subStack.cell.p_cath_partial[2,1] = real_variables[4967];
    coolStack.subStack.cell.cathode[3].g_formation[1] = real_variables[4969];
    coolStack.coolingPipe.friction.d[1] = real_variables[4970];
    coolStack.coolingPipe.dp[2] = real_variables[4971];
    coolStack.subStack.cathode_channel.channel.gas[1].g_formation[3] = real_variables[4972];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].cp = real_variables[4973];
    coolStack.subStack.cell.anode[3].h_component[1] = real_variables[4974];
    coolStack.subStack.cell.waterDiffusion.c_an_H2O[5] = real_variables[4975];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB.p = real_variables[4976];
    coolStack.subStack.cathode_channel.channel.gas[4].state.X[5] = real_variables[4977];
    coolStack.X_feed_an[4] = real_variables[4978];
    flowCathode.massFlowBoundary.state.p = real_variables[4979];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[3,4] = real_variables[4980];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA_out.X[3] = real_variables[4981];
    coolStack.subStack.cell.cathode[1].state.X[4] = real_variables[4982];
    coolStack.subStack.cathode_channel.channel.U[5] = real_variables[4983];
    coolStack.subStack.cell.electroOsmoticDrag.n_eod[4] = real_variables[4984];
    coolStack.subStack.cathode_channel.channel.gas[4].u_comp[2] = real_variables[4985];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.X[1] = real_variables[4986];
    coolStack.subStack.anode_channel.channel.gas[2].g_formation[2] = real_variables[4988];
    coolStack.subStack.cell.port_an[3].mX_flow[1] = real_variables[4989];
    coolStack.subStack.cathode_channel.channel.friction[5].dp = real_variables[4990];
    coolStack.subStack.anode_channel.channel.alpha[2] = real_variables[4992];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.X[2] = real_variables[4993];
    coolStack.subStack.cell.cathode[1].ddx[1] = real_variables[4994];
    coolStack.subStack.cell.waterContent.p_cath_partial[5,1] = real_variables[4995];
    coolStack.subStack.cell.waterDiffusion.m_flow[1] = real_variables[4997];
    coolStack.subStack.anode_channel.channel.friction[5].m_flow = real_variables[4998];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].cp = real_variables[4999];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[5,2] = real_variables[5001];
    coolStack.subStack.cell.concentrationLoss.j_ionic[1] = real_variables[5002];
    coolStack.subStack.cell.waterDiffusion.lambda_cath[5] = real_variables[5004];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[5,1] = real_variables[5005];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA.p = real_variables[5006];
    coolStack.subStack.cathode_channel.wall[3].T = real_variables[5007];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.T = real_variables[5009];
    coolStack.subStack.cell.port_an[1].X[1] = real_variables[5010];
    coolStack.subStack.cathode_channel.channel.friction[4].dB = real_variables[5011];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[2,2] = real_variables[5012];
    coolStack.subStack.cell.cathode[2].Xi[2] = real_variables[5013];
    coolStack.subStack.anode_channel.channel.q[5].T = real_variables[5014];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.X[2] = real_variables[5015];
    coolStack.coolingPipe.volume[4].state.p = real_variables[5016];
    coolStack.subStack.cathode_channel.channel.gas[5].X[3] = real_variables[5017];
    sinkCathode.pressureBoundary.fluidPort[1].m_flow = real_variables[5018];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_real[3] = real_variables[5019];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.X[3] = real_variables[5020];
    coolStack.subStack.cell.cathode[4].ddTp = real_variables[5021];
    coolStack.subStack.anode_channel.channel.gas[1].state.X[3] = real_variables[5022];
    sinkCathode.pressureBoundary.fluidPort[1].X_outflow[5] = real_variables[5023];
    coolStack.coolingPipe.sat[4].eta_vap = real_variables[5024];
    coolStack.coolingPipe.drhodx[3] = real_variables[5026];
    coolStack.subStack.cell.waterContent.T_cath[5] = real_variables[5027];
    coolStack.subStack.cell.anode[1].u = real_variables[5028];
    coolStack.subStack.cathode_channel.channel.state[4].X[1] = real_variables[5029];
    coolStack.subStack.cell.cathode[1].Z[3] = real_variables[5030];
    coolStack.subStack.cell.eff_volt_cell = real_variables[5031];
    coolStack.subStack.anode_channel.channel.gas[4].s_component[3] = real_variables[5032];
    coolStack.subStack.cell.anode[5].ddx[1] = real_variables[5033];
    coolStack.subStack.cell.cathode[4].u = real_variables[5034];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[5,1] = real_variables[5035];
    coolStack.subStack.anode_channel.port[4].m_flow = real_variables[5036];
    coolStack.subStack.cell.port_an[4].m_flow = real_variables[5037];
    coolStack.subStack.cell.X_an[4,4] = real_variables[5038];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_inflow.X[3] = real_variables[5039];
    coolStack.subStack.cell.port_cath[2].mX_flow[5] = real_variables[5040];
    coolStack.subStack.anode_channel.channel.htcoeff[1].m_flow = real_variables[5041];
    coolStack.subStack.cell.ohmicLoss.E_loss_cell[1] = real_variables[5042];
    flowAnode.massFlowBoundary.state.X[2] = real_variables[5043];
    display_an_out.y[1] = real_variables[5044];
    display_phTmdot_w_in.y.X_flow[1] = real_variables[5045];
    display_phTmdot_an_out.y.X[1] = real_variables[5046];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB.X[4] = real_variables[5048];
    coolStack.subStack.anode_channel.channel.reaction.dmdt = real_variables[5049];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.p = real_variables[5050];
    coolStack.subStack.cell.waterContent.lambda[3] = real_variables[5051];
    coolStack.coolingPipe.htcoeff.cp[4] = real_variables[5052];
    coolStack.coolingPipe.htcoeff.lam[4] = real_variables[5053];
    coolStack.subStack.cell.p_an_partial[1,4] = real_variables[5054];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[5,5] = real_variables[5056];
    coolStack.subStack.cathode_channel.wall[2].Q_flow = real_variables[5057];
    coolStack.subStack.cell.anode[3].h = real_variables[5058];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[5,2] = real_variables[5059];
    sinkCathode.pressureBoundary.state.X[1] = real_variables[5060];
    coolStack.subStack.anode_channel.channel.reaction.Ztot[2] = real_variables[5062];
    coolStack.subStack.cell.concentrationLoss.E_loss_cell[1] = real_variables[5064];
    coolStack.subStack.cathode_channel.channel.gas[3].X[2] = real_variables[5065];
    coolStack.subStack.anode_channel.channel.gas[1].s_component[2] = real_variables[5066];
    coolStack.subStack.cell.cathode[2].h_component[3] = real_variables[5067];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_inflow.X[1] = real_variables[5068];
    display_phTmdot_w_in.h_kJ = real_variables[5069];
    coolStack.subStack.cell.port_cath[2].m_flow = real_variables[5070];
    coolStack.subStack.anode_channel.channel.reaction.log10_y_out[5,2] = real_variables[5072];
    coolStack.subStack.anode_channel.channel.MX[3,3] = real_variables[5073];
    coolStack.coolingPipe.m_flow[6] = real_variables[5074];
    display_cath_out.data.temp = real_variables[5076];
    coolStack.subStack.cathode_channel.channel.q_fluid[1].Q_flow = real_variables[5077];
    coolStack.subStack.cell.anode[2].cp = real_variables[5078];
    coolStack.subStack.anode_channel.channel.p[3] = real_variables[5079];
    coolStack.subStack.cathode_channel.channel.gas[5].Xi[4] = real_variables[5080];
    coolStack.subStack.H2_utilization = real_variables[5081];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[4,2] = real_variables[5082];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA.X[2] = real_variables[5083];
    coolStack.coolingPipe.volume[3].Tt = real_variables[5084];
    coolStack.coolingPipe.M[2] = real_variables[5085];
    coolStack.coolingPipe.p[4] = real_variables[5086];
    coolStack.coolingPipe.sat[2].lam_liq = real_variables[5087];
    gasSensor2.portB.X_outflow[3] = real_variables[5088];
    coolStack.subStack.cathode_channel.channel.gas[4].g_formation[3] = real_variables[5089];
    coolStack.subStack.anode_channel.channel.gas[4].state.p = real_variables[5090];
    coolStack.subStack.cathode_channel.channel.state[4].X[5] = real_variables[5091];
    display_cath_in.X_CO2 = real_variables[5092];
    coolStack.subStack.cell.I_stack = real_variables[5093];
    coolStack.subStack.anode_channel.channel.U[2] = real_variables[5096];
    coolStack.subStack.anode_channel.channel.gas[1].X[2] = real_variables[5097];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateA.X[2] = real_variables[5098];
    coolStack.subStack.cell.cathode[3].dUZT[4] = real_variables[5099];
    coolStack.subStack.cell.E_conc_cell[4] = real_variables[5100];
    coolStack.coolingPipe.htcoeff.sat[4].lam_vap = real_variables[5101];
    coolStack.subStack.anode_channel.channel.gas[2].ddx[4] = real_variables[5102];
    coolStack.subStack.anode_channel.channel.gas[5].u_comp[2] = real_variables[5103];
    coolStack.subStack.cathode_channel.channel.gas[5].u_comp[3] = real_variables[5104];
    coolStack.coolingPipe.sat[1].d_liq = real_variables[5105];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateA_out.p = real_variables[5106];
    coolStack.subStack.anode_channel.wall[2].T = real_variables[5107];
    coolStack.coolingPipe.p[2] = real_variables[5108];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[2,4] = real_variables[5109];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[2,4] = real_variables[5110];
    coolStack.drain_cath.X_outflow[5] = real_variables[5111];
    coolStack.coolingPipe.volume[2].ddhp = real_variables[5113];
    coolStack.subStack.cell.contaminantsLoss.y_an[2,1] = real_variables[5114];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.X[1] = real_variables[5115];
    coolStack.subStack.cell.cathode[3].p = real_variables[5116];
    coolStack.subStack.cathode_channel.channel.gas[4].duTp = real_variables[5117];
    coolStack.subStack.cathode_channel.channel.friction[2].stateA_inflow.X[1] = real_variables[5118];
    coolStack.coolingPipe.twoPhaseFraction_def[5] = real_variables[5119];
    coolStack.subStack.cell.p_an_partial[3,4] = real_variables[5121];
    coolStack.subStack.cell.p_cath_partial[2,3] = real_variables[5122];
    coolStack.subStack.T_stack[4] = real_variables[5123];
    coolStack.subStack.cell.y_an[1,4] = real_variables[5124];
    coolStack.subStack.cell.y_cath[5,2] = real_variables[5125];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[5,3] = real_variables[5127];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[3,4] = real_variables[5128];
    coolStack.subStack.cell.Q_wall_an_cell[1] = real_variables[5129];
    coolStack.coolingPipe.htcoeff.twoPhaseFraction[3] = real_variables[5130];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_outflow.X[4] = real_variables[5131];
    coolStack.subStack.cathode_channel.channel.gas[3].u_comp[5] = real_variables[5132];
    coolStack.subStack.cell.wall_cath[3].T = real_variables[5133];
    coolStack.coolingPipe.T[4] = real_variables[5134];
    coolStack.coolingPipe.T_fluid[2] = real_variables[5135];
    coolStack.subStack.cell.activationLoss.pin_n[5].i = real_variables[5137];
    coolStack.coolingPipe.sh[4] = real_variables[5138];
    coolStack.subStack.cell.cathode[5].ddx[4] = real_variables[5139];
    coolStack.subStack.cell.ohmicLoss.T_cell[5] = real_variables[5140];
    coolStack.subStack.cell.port_cath[2].h = real_variables[5141];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA_out.X[1] = real_variables[5142];
    coolStack.subStack.cell.cathode[2].u_comp[3] = real_variables[5143];
    coolStack.subStack.cell.port_an[1].X[3] = real_variables[5144];
    display_an_in.data.X_flow[3] = real_variables[5145];
    coolStack.X_feed_an[3] = real_variables[5146];
    gasSensor4.portB.X_outflow[3] = real_variables[5148];
    coolStack.coolingPipe.friction.sat[6].eta_vap = real_variables[5149];
    coolStack.subStack.cell.mX_flow_cath_transport[2,3] = real_variables[5150];
    coolStack.coolingPipe.m_flow[1] = real_variables[5151];
    coolStack.subStack.anode_channel.portA.X_outflow[4] = real_variables[5152];
    coolStack.coolingPipe.T_fluid[1] = real_variables[5153];
    coolStack.subStack.cell.gasDiffusion.lambda[5] = real_variables[5154];
    coolStack.subStack.cell.mX_flow_an_reac[2,1] = real_variables[5155];
    coolStack.subStack.cathode_channel.channel.state[2].X[2] = real_variables[5156];
    coolStack.subStack.cathode_channel.channel.gas[2].state.X[4] = real_variables[5157];
    coolStack.subStack.cell.sourceV[2].p.i = real_variables[5158];
    coolStack.subStack.feed_cathode.X_outflow[5] = real_variables[5159];
    coolStack.coolingPipe.volume[5].state.p = real_variables[5160];
    coolStack.subStack.anode_channel.channel.state[3].X[4] = real_variables[5162];
    coolStack.subStack.cell.port_an[3].m_flow = real_variables[5163];
    coolStack.subStack.cell.waterContent.p_an_partial[4,2] = real_variables[5164];
    coolStack.subStack.cell.activationLoss.E_loss_cell[2] = real_variables[5165];
    coolStack.coolingPipe.friction.sat[4].eta_vap = real_variables[5167];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].Pr = real_variables[5168];
    coolStack.subStack.anode_channel.channel.reaction.X_out[4,1] = real_variables[5169];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[4,3] = real_variables[5170];
    coolStack.subStack.cathode_channel.channel.gas[2].Z[1] = real_variables[5172];
    coolStack.subStack.cell.electroOsmoticDrag.T_cell[4] = real_variables[5173];
    sinkAnode.pressureBoundary.m_flow[1] = real_variables[5174];
    coolStack.subStack.anode_channel.channel.gas[4].h_component[2] = real_variables[5175];
    coolStack.coolingPipe.T_liq[1] = real_variables[5176];
    coolStack.subStack.cell.cathode[1].g_formation[5] = real_variables[5177];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_outflow.p = real_variables[5178];
    coolStack.subStack.cell.electroOsmoticDrag.p_an_partial[3,2] = real_variables[5179];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[1,4] = real_variables[5180];
    coolStack.subStack.cell.cathode[1].g_formation[4] = real_variables[5181];
    coolStack.subStack.anode_channel.channel.gas[2].ddTp = real_variables[5183];
    coolStack.coolingPipe.q[4].T = real_variables[5184];
    coolStack.subStack.anode_channel.channel.gas[2].s_component[4] = real_variables[5185];
    coolStack.summary.m_flow_cath = real_variables[5186];
    coolStack.subStack.cell.anode[5].ddpT = real_variables[5187];
    coolStack.coolingPipe.friction.sat[2].eta_liq = real_variables[5188];
    flowCathode.massFlowBoundary.fluidPort.h_outflow = real_variables[5189];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB.p = real_variables[5190];
    coolStack.coolingPipe.Q_wall[5] = real_variables[5191];
    coolStack.subStack.cathode_channel.portB.X_outflow[1] = real_variables[5192];
    coolStack.coolingPipe.drhodx[6] = real_variables[5193];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[2,4] = real_variables[5194];
    coolStack.subStack.cell.cathode[3].state.X[5] = real_variables[5195];
    coolStack.subStack.anode_channel.channel.reaction.T[5] = real_variables[5196];
    coolStack.subStack.anode_channel.channel.reaction.Zx[3,4] = real_variables[5197];
    coolStack.subStack.wall[5].T = real_variables[5198];
    coolStack.subStack.anode_channel.channel.htcoeff[5].eta = real_variables[5199];
    flowAnode.massFlowBoundary.fluidPort.X_outflow[2] = real_variables[5200];
    coolStack.subStack.cathode_channel.channel.reaction.X_in[1,5] = real_variables[5201];
    coolStack.subStack.cell.Q_wall_cath_stack = real_variables[5202];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[3,3] = real_variables[5203];
    coolStack.subStack.cell.waterContent.lambda_an[3] = real_variables[5205];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[3,4] = real_variables[5206];
    coolStack.subStack.cell.y_cath[1,4] = real_variables[5207];
    coolStack.subStack.cell.ohmicLoss.lambda_mean[5] = real_variables[5208];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[4,4] = real_variables[5209];
    coolStack.subStack.anode_channel.channel.reaction.X_in[3,2] = real_variables[5210];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateA_out.X[4] = real_variables[5211];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_outflow.p = real_variables[5212];
    coolStack.feed_an.X_outflow[4] = real_variables[5213];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_outflow.X[2] = real_variables[5214];
    coolStack.subStack.anode_channel.channel.MX[1,4] = real_variables[5215];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[4,4] = real_variables[5217];
    coolStack.subStack.anode_channel.summary.T_out = real_variables[5218];
    coolStack.subStack.cathode_channel.channel.friction[5].stateA_outflow.X[4] = real_variables[5219];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_outflow.X[1] = real_variables[5220];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[3,4] = real_variables[5222];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA.X[4] = real_variables[5223];
    coolStack.subStack.anode_channel.channel.gas[1].s_component[1] = real_variables[5224];
    coolStack.subStack.cell.waterContent.p_cath_partial[5,4] = real_variables[5225];
    coolStack.summary.cathode_stoich = real_variables[5226];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_inflow.X[1] = real_variables[5228];
    multiDisplaySensor4.portA.p = real_variables[5229];
    coolStack.coolingPipe.friction.eta[3] = real_variables[5230];
    coolStack.coolingPipe.htcoeff.p[3] = real_variables[5231];
    coolStack.coolingPipe.htcoeff.sat[5].lam_liq = real_variables[5232];
    coolStack.subStack.cell.cathode[5].h_component[2] = real_variables[5233];
    coolStack.subStack.cell.waterContent.p_an_partial[2,3] = real_variables[5234];
    coolStack.subStack.cathode_channel.channel.summary.M = real_variables[5235];
    coolStack.subStack.cathode_channel.port[3].X[3] = real_variables[5236];
    coolStack.coolingPipe.volume[2].d = real_variables[5238];
    coolStack.subStack.cell.E_conc_cell[3] = real_variables[5240];
    coolStack.subStack.cell.cathode[5].state.X[1] = real_variables[5241];
    coolStack.subStack.cell.y_cath[5,4] = real_variables[5242];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB.X[1] = real_variables[5244];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[3,4] = real_variables[5246];
    coolStack.subStack.anode_channel.channel.Q_extra[1] = real_variables[5247];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[4,1] = real_variables[5248];
    coolStack.coolingPipe.htcoeff.sat[5].x = real_variables[5249];
    coolStack.subStack.cell.electroOsmoticDrag.n_eod[2] = real_variables[5250];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[2,1] = real_variables[5251];
    coolStack.coolingPipe.friction.sigma[2] = real_variables[5252];
    coolStack.subStack.cell.contaminantsLoss.pin_n[3].i = real_variables[5253];
    coolStack.X_feed_an[1] = real_variables[5254];
    coolStack.coolingPipe.Q[1] = real_variables[5255];
    coolStack.subStack.cell.activationLoss.pin_n[3].i = real_variables[5256];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[1,5] = real_variables[5258];
    coolStack.subStack.cathode_channel.channel.gas[5].u_comp[4] = real_variables[5259];
    coolStack.subStack.cell.cathode[1].g_formation[1] = real_variables[5260];
    coolStack.subStack.cell.concentrationLoss.pin_p[3].i = real_variables[5261];
    coolStack.subStack.anode_channel.channel.htcoeff[3].lambda = real_variables[5262];
    coolStack.subStack.cell.ohmicLoss.E_loss_stack[3] = real_variables[5263];
    coolStack.coolingPipe.sat[5].x = real_variables[5264];
    coolStack.subStack.cell.cathode[5].ddpT = real_variables[5265];
    coolStack.subStack.cathode_channel.channel.gas[2].g_formation[1] = real_variables[5267];
    coolStack.subStack.cell.cathode[3].u_comp[5] = real_variables[5268];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.X[1] = real_variables[5270];
    coolStack.subStack.anode_channel.channel.dp[3] = real_variables[5271];
    coolStack.subStack.cathode_channel.channel.summary.T_in = real_variables[5273];
    coolStack.coolingPipe.htcoeff.p[2] = real_variables[5274];
    coolStack.subStack.cell.anode[1].cp = real_variables[5275];
    coolStack.subStack.anode_channel.portB.X_outflow[3] = real_variables[5276];
    coolStack.subStack.cell.mX_flow_cath_reac[5,5] = real_variables[5277];
    display_phTmdot_cath_in.y.X_flow[1] = real_variables[5279];
    coolStack.subStack.cathode_channel.channel.friction[1].stateB_inflow.X[2] = real_variables[5280];
    coolStack.coolingPipe.friction.sat[1].cp_liq = real_variables[5281];
    coolStack.subStack.cathode_channel.channel.gas[3].ddx[2] = real_variables[5282];
    coolStack.subStack.cathode_channel.port[1].h = real_variables[5283];
    coolStack.subStack.anode_channel.channel.gas[2].dUZT[2] = real_variables[5284];
    coolStack.subStack.cell.waterContent.a_an_H2O[3] = real_variables[5286];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[2,4] = real_variables[5287];
    display_P.showNumber = real_variables[5288];
    coolStack.coolingPipe.q[2].T = real_variables[5291];
    flowCathode.massFlowBoundary.X_in[1] = real_variables[5292];
    gasSensor4.portA.X_outflow[1] = real_variables[5293];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA.X[4] = real_variables[5294];
    coolStack.subStack.cell.anode[4].ddx[1] = real_variables[5295];
    coolStack.subStack.cell.cathode[3].s_component[4] = real_variables[5296];
    coolStack.coolingPipe.friction.sat[3].eta_vap = real_variables[5297];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[1,1] = real_variables[5298];
    coolStack.subStack.anode_channel.port[3].m_flow = real_variables[5300];
    coolStack.subStack.cathode_channel.port[2].mX_flow[3] = real_variables[5301];
    coolStack.subStack.cathode_channel.channel.gas[4].state.X[2] = real_variables[5302];
    coolStack.subStack.cell.anode[4].ddx[4] = real_variables[5303];
    coolStack.coolingPipe.Q_wall[1] = real_variables[5305];
    coolStack.subStack.cell.E_act_cell[2] = real_variables[5306];
    coolStack.subStack.summary.T_stack[2] = real_variables[5308];
    coolStack.subStack.anode_channel.channel.reaction.X_out[4,4] = real_variables[5309];
    coolStack.coolingPipe.htcoeff.k_1ph[1] = real_variables[5310];
    coolStack.coolingPipe.twoPhaseFraction_def[1] = real_variables[5311];
    coolStack.subStack.cell.anode[1].dUZT[4] = real_variables[5312];
    coolStack.subStack.anode_channel.channel.q_fluid[3].Q_flow = real_variables[5313];
    coolStack.subStack.cathode_channel.channel.state[6].X[4] = real_variables[5314];
    coolStack.subStack.cell.contaminantsLoss.y_an[5,2] = real_variables[5315];
    coolStack.subStack.cell.cathode[2].s_component[3] = real_variables[5316];
    coolStack.subStack.anode_channel.channel.htcoeff[4].stateB.T = real_variables[5317];
    gasSensor2.portB.m_flow = real_variables[5318];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.X[1] = real_variables[5319];
    coolStack.subStack.cell.ohmicLoss.E_loss_stack[2] = real_variables[5320];
    coolStack.subStack.cell.ohmicLoss.lambda_mean[3] = real_variables[5321];
    coolStack.coolingPipe.htcoeff.lam[2] = real_variables[5322];
    coolStack.subStack.anode_channel.channel.state[5].T = real_variables[5323];
    gasSensor4.portB.X_outflow[2] = real_variables[5325];
    coolStack.subStack.cell.waterDiffusion.c_cath_H2O[4] = real_variables[5327];
    coolStack.subStack.cell.h_cath[4] = real_variables[5329];
    coolStack.summary.T_cool[1] = real_variables[5330];
    coolStack.subStack.anode_channel.channel.reaction.X_out[4,3] = real_variables[5331];
    flowAnode.massFlowBoundary.state.T = real_variables[5332];
    coolStack.subStack.cathode_channel.channel.sh[5] = real_variables[5334];
    coolStack.subStack.cell.Q_wall_an_cell[3] = real_variables[5335];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[2,2] = real_variables[5338];
    coolStack.coolingPipe.volume[1].Tt = real_variables[5339];
    coolStack.subStack.cell.anode[1].duTp = real_variables[5340];
    coolStack.subStack.anode_channel.channel.htcoeff[2].lambda = real_variables[5341];
    coolStack.coolingPipe.sat[1].eta_liq = real_variables[5342];
    display_cath_in.y[3] = real_variables[5343];
    coolStack.subStack.cell.ohmicLoss.I[2] = real_variables[5344];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].eta = real_variables[5345];
    coolStack.subStack.anode_channel.channel.reaction.a[2] = real_variables[5346];
    coolStack.subStack.cell.waterContent.a_cath_H2O[4] = real_variables[5347];
    coolStack.subStack.cathode_channel.port[1].H_flow = real_variables[5348];
    coolStack.subStack.cathode_channel.channel.gas[1].h_component[1] = real_variables[5350];
    coolStack.subStack.cell.port_an[4].H_flow = real_variables[5352];
    coolStack.subStack.cell.cathode[5].Xi[5] = real_variables[5353];
    coolStack.subStack.cathode_channel.channel.sh[4] = real_variables[5354];
    coolStack.coolingPipe.quality[5] = real_variables[5356];
    coolStack.subStack.cell.waterContent.p_an_partial[2,1] = real_variables[5357];
    coolStack.subStack.cell.waterContent.lambda_cath[4] = real_variables[5358];
    gasSensor1.portA.X_outflow[2] = real_variables[5359];
    coolStack.subStack.cell.anode[3].h_component[4] = real_variables[5361];
    coolStack.subStack.cell.X_an[5,3] = real_variables[5362];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[4,3] = real_variables[5363];
    coolStack.coolingPipe.h_liqA = real_variables[5364];
    coolStack.subStack.cell.waterContent.a_an_H2O[2] = real_variables[5365];
    coolStack.subStack.cell.anode[4].p_bar = real_variables[5366];
    coolStack.subStack.anode_channel.channel.m_flow_mean = real_variables[5367];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[1,3] = real_variables[5368];
    coolStack.subStack.cell.cathode[1].s_component[3] = real_variables[5369];
    gasSensor3.portB.h_outflow = real_variables[5370];
    coolStack.coolingPipe.pB = real_variables[5371];
    coolStack.subStack.anode_channel.channel.gas[3].u_comp[2] = real_variables[5372];
    multiDisplaySensor1.multiDisplaySensor.u.pressure = real_variables[5373];
    coolStack.subStack.cathode_channel.channel.gas[4].Xi[5] = real_variables[5374];
    coolStack.subStack.cell.waterContent.p_cath_partial[1,4] = real_variables[5375];
    sinkCathode.pressureBoundary.p_set = real_variables[5376];
    coolStack.subStack.cell.p_an_partial[3,2] = real_variables[5377];
    coolStack.subStack.cell.anode[2].Z[3] = real_variables[5378];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[3,5] = real_variables[5379];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateA_out.T = real_variables[5380];
    coolStack.coolingPipe.sat[3].lam_liq = real_variables[5381];
    gasSensor1.u.X[2] = real_variables[5382];
    coolStack.subStack.cell.port_an[5].X[1] = real_variables[5383];
    coolStack.subStack.cathode_channel.channel.portA[1].m_flow = real_variables[5385];
    coolStack.coolingPipe.q[5].T = real_variables[5386];
    coolStack.subStack.X_feed_an[4] = real_variables[5387];
    sinkP.pressureBoundary.p_in = real_variables[5388];
    coolStack.coolingPipe.x[4] = real_variables[5389];
    coolStack.subStack.anode_channel.channel.gas[5].dUZT[1] = real_variables[5390];
    coolStack.subStack.cell.Q_stack = real_variables[5391];
    coolStack.subStack.cathode_channel.channel.gas[5].state.X[5] = real_variables[5392];
    gasSensor4.u.X[3] = real_variables[5394];
    gasSensor2.portA.X_outflow[3] = real_variables[5395];
    sinkCathode.pressureBoundary.X_port[1,3] = real_variables[5396];
    coolStack.subStack.cathode_channel.channel.gas[5].state.T = real_variables[5397];
    coolStack.coolingPipe.state[7].p = real_variables[5398];
    coolStack.subStack.cell.mX_flow_cath_reac[4,5] = real_variables[5399];
    coolStack.subStack.anode_channel.channel.portB[1].X_outflow[4] = real_variables[5400];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[3,3] = real_variables[5401];
    coolStack.subStack.cell.port_an[2].h = real_variables[5402];
    gasSensor2.portB.X_outflow[2] = real_variables[5403];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[2,4] = real_variables[5404];
    coolStack.coolingPipe.friction.sat[1].cp_vap = real_variables[5405];
    coolStack.subStack.anode_channel.channel.reaction.y_out[3,3] = real_variables[5406];
    coolStack.subStack.cathode_channel.channel.gas[1].s_component[1] = real_variables[5407];
    coolStack.feed_cath.p = real_variables[5408];
    coolStack.coolingPipe.htcoeff.m_flow[4] = real_variables[5409];
    coolStack.coolingPipe.sat[5].cp_vap = real_variables[5410];
    sinkCathode.pressureBoundary.X_port[1,2] = real_variables[5411];
    multiDisplaySensor1.u.X[1] = real_variables[5414];
    coolStack.subStack.cell.cathode[2].h_component[5] = real_variables[5415];
    coolStack.subStack.cell.h_an[5] = real_variables[5416];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[2,4] = real_variables[5417];
    coolStack.subStack.anode_channel.channel.state[2].X[4] = real_variables[5418];
    coolStack.subStack.anode_channel.channel.gas[5].state.X[2] = real_variables[5419];
    coolStack.subStack.cell.mX_flow_an_transport[3,2] = real_variables[5420];
    sinkCathode.pressureBoundary.state.X[3] = real_variables[5421];
    sinkAnode.pressureBoundary.fluidPort[1].X_outflow[4] = real_variables[5422];
    sinkAnode.fluidPort.X_outflow[3] = real_variables[5423];
    coolStack.subStack.cell.y_an[4,3] = real_variables[5424];
    flowCathode.m_flow_in = real_variables[5425];
    coolStack.subStack.cell.cathode[4].ddx[3] = real_variables[5426];
    coolStack.subStack.cell.contaminantsLoss.y_an[3,2] = real_variables[5427];
    coolStack.subStack.cell.activationLoss.pin_n[4].i = real_variables[5428];
    coolStack.feed_cooling.p = real_variables[5429];
    coolStack.subStack.cell.contaminantsLoss.pin_n[1].i = real_variables[5430];
    coolStack.subStack.anode_channel.channel.state[5].X[2] = real_variables[5431];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_inflow.X[2] = real_variables[5432];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.X[5] = real_variables[5433];
    coolStack.subStack.anode_channel.channel.friction[5].stateA_inflow.X[3] = real_variables[5434];
    coolStack.coolingPipe.htcoeff.sat[4].lam_liq = real_variables[5435];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateB.X[2] = real_variables[5436];
    sinkP.pressureBoundary.state.p = real_variables[5437];
    coolStack.subStack.anode_channel.channel.U[5] = real_variables[5438];
    coolStack.coolingPipe.htcoeff.T[1] = real_variables[5439];
    gasSensor4.portB.m_flow = real_variables[5440];
    flow_rate_cath_variation.y[1] = real_variables[5441];
    coolStack.subStack.cell.cathode[2].h_component[2] = real_variables[5442];
    coolStack.subStack.anode_channel.channel.htcoeff[2].stateA.X[2] = real_variables[5443];
    coolStack.subStack.cathode_channel.channel.Q[2] = real_variables[5446];
    coolStack.subStack.cell.cathode[3].Z[1] = real_variables[5447];
    coolStack.coolingPipe.sat[4].cp_liq = real_variables[5449];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[3,1] = real_variables[5450];
    coolStack.subStack.cathode_channel.channel.gas[2].Rg = real_variables[5451];
    coolStack.subStack.cathode_channel.channel.M[4] = real_variables[5452];
    coolStack.subStack.cathode_channel.port[5].mX_flow[3] = real_variables[5453];
    coolStack.subStack.anode_channel.channel.gas[4].h_component[4] = real_variables[5455];
    p_cath_out.y = real_variables[5456];
    coolStack.subStack.cell.cathode[2].Xi[5] = real_variables[5457];
    display_an_in.data.mdot = real_variables[5458];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.X[4] = real_variables[5459];
    coolStack.subStack.anode_channel.channel.friction[2].stateA_inflow.X[1] = real_variables[5460];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB_out.p = real_variables[5461];
    coolStack.subStack.cell.gasDiffusion.p_an_partial[1,4] = real_variables[5462];
    coolStack.subStack.cell.port_cath[3].X[3] = real_variables[5463];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateA_out.X[5] = real_variables[5465];
    coolStack.coolingPipe.htcoeff.sat[2].x = real_variables[5466];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[3,2] = real_variables[5467];
    coolStack.subStack.anode_channel.channel.portA[1].X_outflow[2] = real_variables[5468];
    coolStack.coolingPipe.sigma[1] = real_variables[5469];
    coolStack.subStack.anode_channel.channel.reaction.y_out[4,4] = real_variables[5471];
    coolStack.subStack.anode_channel.channel.reaction.X_out[3,2] = real_variables[5472];
    gasSensor1.u.X_flow[2] = real_variables[5473];
    coolStack.coolingPipe.q[3].T = real_variables[5474];
    coolStack.subStack.cathode_channel.channel.gas[4].ddTp = real_variables[5475];
    coolStack.subStack.anode_channel.channel.q_fluid[5].Q_flow = real_variables[5476];
    coolStack.subStack.cell.cathode[4].Xi[1] = real_variables[5477];
    sinkP.pressureBoundary.h_set = real_variables[5478];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[4,5] = real_variables[5479];
    coolStack.subStack.cell.cathode[1].Xi[3] = real_variables[5480];
    coolStack.subStack.anode_channel.channel.gas[2].T_degC = real_variables[5481];
    coolStack.subStack.cell.X_an[2,3] = real_variables[5482];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[2,5] = real_variables[5483];
    coolStack.subStack.cell.cathode[4].u_comp[1] = real_variables[5484];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[4,3] = real_variables[5485];
    coolStack.coolingPipe.volume[2].ddph = real_variables[5486];
    coolStack.subStack.cell.contaminantsLoss.y_an[1,4] = real_variables[5487];
    coolStack.subStack.cell.mX_flow_cath_transport[5,3] = real_variables[5489];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[1,1] = real_variables[5490];
    coolStack.subStack.cell.cathode[4].X[1] = real_variables[5491];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB.X[2] = real_variables[5492];
    coolStack.subStack.anode_channel.channel.gas[5].u = real_variables[5493];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[4,5] = real_variables[5494];
    coolStack.subStack.cell.electroOsmoticDrag.m_flow[4] = real_variables[5495];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.X[4] = real_variables[5496];
    coolStack.subStack.cell.anode[1].ddx[2] = real_variables[5497];
    gasSensor2.u.X_flow[2] = real_variables[5500];
    sinkCathode.pressureBoundary.state.X[5] = real_variables[5501];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[4,1] = real_variables[5502];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[3,5] = real_variables[5503];
    coolStack.subStack.cell.cathode[5].h_component[3] = real_variables[5504];
    coolStack.subStack.anode_channel.channel.htcoeff[5].lambda = real_variables[5505];
    coolStack.drain_an.X_outflow[2] = real_variables[5507];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateB_out.p = real_variables[5508];
    gasSensor1.u.X_flow[1] = real_variables[5509];
    coolStack.subStack.anode_channel.channel.state[1].X[2] = real_variables[5510];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.p = real_variables[5512];
    coolStack.coolingPipe.htcoeff.sat[1].eta_vap = real_variables[5513];
    err_rel = real_variables[5514];
    coolStack.subStack.cell.waterDiffusion.lambda[3] = real_variables[5515];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_inflow.X[2] = real_variables[5516];
    coolStack.subStack.cathode_channel.channel.gas[1].T = real_variables[5517];
    display_phTmdot_cath_out.y.X_flow[4] = real_variables[5518];
    display_an_in.X_H2 = real_variables[5519];
    coolStack.coolingPipe.v[4] = real_variables[5520];
    coolStack.coolingPipe.T[5] = real_variables[5521];
    coolStack.subStack.anode_channel.port[2].p = real_variables[5522];
    coolStack.subStack.anode_channel.channel.htcoeff[5].Nu = real_variables[5523];
    coolStack.subStack.cathode_channel.channel.friction[3].stateB_outflow.X[4] = real_variables[5524];
    coolStack.coolingPipe.volume[1].u = real_variables[5525];
    display_phTmdot_w_in.y.mdot = real_variables[5528];
    flowCathode.massFlowBoundary.fluidPort.X_outflow[4] = real_variables[5529];
    display_cath_in.data.X[4] = real_variables[5530];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_outflow.T = real_variables[5531];
    coolStack.subStack.cell.p_an_partial[2,4] = real_variables[5532];
    coolStack.subStack.cathode_channel.channel.gas[3].state.X[4] = real_variables[5533];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.X[2] = real_variables[5534];
    coolStack.subStack.anode_channel.channel.summary.dp = real_variables[5536];
    coolStack.subStack.cell.cathode[5].Xi[1] = real_variables[5537];
    humidification_cath.y_H2O = real_variables[5538];
    sinkAnode.fluidPort.h_outflow = real_variables[5540];
    coolStack.subStack.anode_channel.channel.friction[1].stateA_inflow.p = real_variables[5542];
    coolStack.subStack.anode_channel.channel.htcoeff[5].stateB.X[1] = real_variables[5543];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_inflow.X[4] = real_variables[5544];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[1,2] = real_variables[5545];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[1,1] = real_variables[5546];
    coolStack.subStack.anode_channel.channel.gas[3].h_component[3] = real_variables[5547];
    coolStack.subStack.anode_channel.port[1].m_flow = real_variables[5548];
    flowAnode.massFlowBoundary.m_flow_in = real_variables[5550];
    coolStack.subStack.cathode_channel.channel.state[6].p = real_variables[5551];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[4,1] = real_variables[5552];
    coolStack.subStack.feed_anode.X_outflow[2] = real_variables[5553];
    display_an_in.X_N2 = real_variables[5554];
    coolStack.subStack.anode_channel.channel.gas[1].p_bar = real_variables[5555];
    coolStack.subStack.anode_channel.channel.state[3].p = real_variables[5556];
    coolStack.subStack.anode_channel.channel.q_fluid[3].T = real_variables[5557];
    coolStack.coolingPipe.cp[5] = real_variables[5558];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_outflow.X[2] = real_variables[5560];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[2,3] = real_variables[5561];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.X[2] = real_variables[5562];
    coolStack.subStack.cell.h_conv_an[3] = real_variables[5563];
    coolStack.coolingPipe.sat[1].eta_vap = real_variables[5564];
    coolStack.subStack.cell.Voc_stack[2].y = real_variables[5565];
    coolStack.subStack.cathode_channel.channel.reaction.MM[2] = real_variables[5567];
    coolStack.subStack.cell.X_an[5,1] = real_variables[5569];
    coolStack.subStack.anode_channel.channel.gas[1].u_comp[1] = real_variables[5570];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_outflow.p = real_variables[5571];
    coolStack.subStack.anode_channel.channel.sh[2] = real_variables[5572];
    coolStack.subStack.anode_channel.channel.gas[3].X[1] = real_variables[5573];
    coolStack.subStack.cell.anode[1].Xi[1] = real_variables[5574];
    coolStack.subStack.cathode_channel.channel.state[5].p = real_variables[5575];
    coolStack.subStack.anode_channel.channel.friction[5].stateB_outflow.X[2] = real_variables[5576];
    coolStack.coolingPipe.htcoeff.twoPhaseFraction[5] = real_variables[5577];
    coolStack.subStack.anode_channel.channel.state[1].X[1] = real_variables[5578];
    coolStack.subStack.anode_channel.channel.summary.T_in = real_variables[5579];
    coolStack.subStack.cell.cathode[4].Xi[3] = real_variables[5580];
    coolStack.subStack.cathode_channel.channel.gas[3].h_component[3] = real_variables[5581];
    coolStack.subStack.cathode_channel.channel.gas[1].s_component[3] = real_variables[5582];
    coolStack.subStack.cell.anode[5].dUZT[1] = real_variables[5583];
    coolStack.subStack.cell.cathode[1].cp = real_variables[5584];
    coolStack.subStack.cell.ohmicLoss.E_loss_cell[3] = real_variables[5585];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[3,1] = real_variables[5586];
    gasSensor2.u.mdot = real_variables[5587];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[1,5] = real_variables[5588];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_inflow.X[3] = real_variables[5589];
    coolStack.subStack.anode_channel.channel.reaction.T[3] = real_variables[5590];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[4,1] = real_variables[5591];
    coolStack.subStack.cell.cathode[4].h_component[5] = real_variables[5593];
    coolStack.coolingPipe.Fr[2] = real_variables[5595];
    coolStack.subStack.cathode_channel.wall[4].Q_flow = real_variables[5596];
    coolStack.subStack.cathode_channel.channel.gas[5].s_component[3] = real_variables[5597];
    coolStack.drain_cath.X_outflow[1] = real_variables[5598];
    coolStack.subStack.cell.y_cath[3,3] = real_variables[5599];
    coolStack.subStack.cathode_channel.channel.M[2] = real_variables[5600];
    coolStack.subStack.anode_channel.channel.gas[3].u = real_variables[5601];
    gasSensor3.state.X[3] = real_variables[5602];
    coolStack.subStack.anode_channel.channel.gas[1].g_formation[2] = real_variables[5603];
    coolStack.subStack.cell.X_an[1,1] = real_variables[5604];
    gasSensor3.portA.X_outflow[3] = real_variables[5605];
    coolStack.subStack.cathode_channel.channel.reaction.a[2] = real_variables[5606];
    coolStack.subStack.cell.waterDiffusion.m_flow[4] = real_variables[5607];
    coolStack.subStack.cell.cathode[5].T = real_variables[5610];
    coolStack.coolingPipe.portB[1].m_flow = real_variables[5611];
    coolStack.coolingPipe.htcoeff.Q_s[1] = real_variables[5612];
    coolStack.subStack.cell.anode[4].Z[3] = real_variables[5613];
    coolStack.subStack.cathode_channel.channel.friction[4].stateB_inflow.X[3] = real_variables[5614];
    coolStack.coolingPipe.dp[1] = real_variables[5616];
    coolStack.subStack.cell.contaminantsLoss.pin_p[4].i = real_variables[5617];
    coolStack.subStack.cell.anode[4].cp = real_variables[5618];
    coolStack.summary.anode_stoich = real_variables[5620];
    coolStack.subStack.cell.y_cath[3,4] = real_variables[5621];
    gasSensor3.state.X[1] = real_variables[5622];
    coolStack.subStack.cell.electroOsmoticDrag.T_an[2] = real_variables[5623];
    coolStack.coolingPipe.Q_wall[3] = real_variables[5624];
    coolStack.subStack.cell.anode[2].u_comp[4] = real_variables[5625];
    coolStack.subStack.anode_channel.channel.gas[1].T = real_variables[5626];
    coolStack.subStack.cell.cathode[5].u_comp[3] = real_variables[5628];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.T = real_variables[5629];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB_out.X[2] = real_variables[5630];
    coolStack.coolingPipe.htcoeff.Nu_1ph[4] = real_variables[5631];
    multiDisplaySensor4.multiDisplaySensor.state.h = real_variables[5632];
    coolStack.subStack.cell.cathode[3].Xi[4] = real_variables[5635];
    coolStack.coolingPipe.htcoeff.Fr[5] = real_variables[5636];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB_out.T = real_variables[5637];
    coolStack.subStack.cathode_channel.summary.T_out = real_variables[5638];
    coolStack.subStack.anode_channel.channel.gas[4].g_formation[3] = real_variables[5639];
    gasSensor3.portB.X_outflow[1] = real_variables[5640];
    coolStack.coolingPipe.satB.d_vap = real_variables[5641];
    coolStack.coolingPipe.TA = real_variables[5642];
    coolStack.coolingPipe.sat[5].d_vap = real_variables[5644];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[3,2] = real_variables[5645];
    coolStack.subStack.cell.ohmicLoss.pin_p[5].v = real_variables[5647];
    coolStack.subStack.cell.ohmicLoss.sigma[4] = real_variables[5648];
    sinkCathode.pressureBoundary.X_in[2] = real_variables[5649];
    coolStack.subStack.cell.concentrationLoss.pin_n[1].i = real_variables[5650];
    coolStack.subStack.cell.cathode[2].state.X[5] = real_variables[5651];
    coolStack.subStack.cell.X_cath[2,5] = real_variables[5652];
    coolStack.subStack.anode_channel.channel.friction[5].dp = real_variables[5653];
    coolStack.subStack.cell.waterContent.p_cath_partial[1,3] = real_variables[5654];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_outflow.p = real_variables[5655];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[3,2] = real_variables[5656];
    coolStack.subStack.anode_channel.channel.gas[3].u_comp[1] = real_variables[5657];
    sinkCathode.pressureBoundary.X_port[1,4] = real_variables[5658];
    display_an_in.data.enthalpy = real_variables[5661];
    coolStack.coolingPipe.q[3].Q_flow = real_variables[5662];
    p_an_variation.y[1] = real_variables[5663];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.X[3] = real_variables[5664];
    sinkAnode.pressureBoundary.X_in[2] = real_variables[5665];
    coolStack.subStack.feed_anode.h_outflow = real_variables[5666];
    coolStack.subStack.cell.anode[2].g_formation[3] = real_variables[5667];
    coolStack.subStack.anode_channel.channel.gas[4].ddTp = real_variables[5669];
    coolStack.subStack.anode_channel.channel.reaction.Zx[5,3] = real_variables[5670];
    coolStack.subStack.anode_channel.channel.gas[5].X[3] = real_variables[5671];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].m_flow = real_variables[5672];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateA_out.X[4] = real_variables[5673];
    coolStack.subStack.cell.port_an[2].H_flow = real_variables[5674];
    display_cath_out.X_CO2 = real_variables[5675];
    coolStack.subStack.cell.cathode[3].Rg = real_variables[5676];
    coolStack.drain_an.X_outflow[3] = real_variables[5678];
    coolStack.subStack.cathode_channel.channel.gas[2].dUZT[5] = real_variables[5679];
    coolStack.subStack.feed_cathode.X_outflow[1] = real_variables[5680];
    coolStack.subStack.cell.anode[3].h_component[2] = real_variables[5681];
    gasSensor2.u.X[4] = real_variables[5682];
    coolStack.subStack.cell.T_cath[2] = real_variables[5683];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_inflow.X[3] = real_variables[5684];
    coolStack.subStack.cell.j_ionic[4] = real_variables[5685];
    coolStack.coolingPipe.satB.lam_vap = real_variables[5686];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[5,2] = real_variables[5687];
    coolStack.subStack.cathode_channel.channel.gas[5].g_formation[4] = real_variables[5688];
    coolStack.subStack.cell.E0_cell[5] = real_variables[5689];
    coolStack.subStack.cathode_channel.channel.htcoeff[5].stateB_out.X[1] = real_variables[5690];
    coolStack.subStack.anode_channel.channel.friction[4].dA = real_variables[5691];
    coolStack.summary.T_cool[3] = real_variables[5692];
    coolStack.subStack.cathode_channel.channel.gas[3].g_formation[2] = real_variables[5694];
    coolStack.subStack.cathode_channel.channel.friction[5].dA = real_variables[5695];
    coolStack.subStack.cell.concentrationLoss.pin_n[5].v = real_variables[5697];
    display_phTmdot_cath_in.y.X[5] = real_variables[5698];
    coolStack.subStack.cathode_channel.channel.gas[5].X[1] = real_variables[5699];
    coolStack.coolingPipe.htcoeff.cp[5] = real_variables[5700];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[5,1] = real_variables[5701];
    sinkCathode.pressureBoundary.state.X[4] = real_variables[5702];
    coolStack.subStack.cell.anode[1].T = real_variables[5703];
    coolStack.coolingPipe.friction.sat[4].cp_liq = real_variables[5704];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateA.X[3] = real_variables[5705];
    coolStack.subStack.cell.cathode[3].s_component[3] = real_variables[5706];
    coolStack.subStack.anode_channel.channel.reaction.X_in[4,4] = real_variables[5708];
    coolStack.subStack.anode_channel.port[2].mX_flow[1] = real_variables[5709];
    coolStack.subStack.cathode_channel.channel.reaction.mX_flow[4,1] = real_variables[5710];
    coolStack.coolingPipe.TB = real_variables[5711];
    coolStack.subStack.cell.electroOsmoticDrag.I_cell[4] = real_variables[5713];
    coolStack.subStack.cathode_channel.wall[1].Q_flow = real_variables[5714];
    coolStack.coolingPipe.lam[2] = real_variables[5715];
    coolStack.subStack.cathode_channel.channel.U[1] = real_variables[5716];
    display_cath_out.y[4] = real_variables[5717];
    coolStack.subStack.cell.waterDiffusion.p_cath_partial[3,2] = real_variables[5718];
    coolStack.subStack.anode_channel.channel.gas[1].state.X[2] = real_variables[5719];
    coolStack.subStack.cell.y_an[5,2] = real_variables[5720];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[2,4] = real_variables[5721];
    coolStack.subStack.cathode_channel.channel.summary.m_flow = real_variables[5722];
    coolStack.subStack.cell.cathode[4].state.X[3] = real_variables[5724];
    coolStack.subStack.cell.gasDiffusion.T_cath[5] = real_variables[5725];
    coolStack.subStack.anode_channel.channel.gas[4].Z[3] = real_variables[5726];
    coolStack.subStack.cell.gasDiffusion.T_an[2] = real_variables[5727];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB_out.p = real_variables[5728];
    coolStack.coolingPipe.h_vapB = real_variables[5729];
    coolStack.subStack.cathode_channel.channel.T[1] = real_variables[5730];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[2,2] = real_variables[5732];
    coolStack.subStack.cell.anode[5].state.X[4] = real_variables[5733];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_outflow.p = real_variables[5734];
    coolStack.subStack.anode_channel.channel.reaction.X_out_rescaled[3,2] = real_variables[5735];
    coolStack.subStack.anode_channel.channel.state[4].T = real_variables[5736];
    coolStack.subStack.cell.gasDiffusion.p_cath_partial[2,4] = real_variables[5737];
    coolStack.subStack.anode_channel.channel.rMX[1,2] = real_variables[5738];
    coolStack.subStack.cell.sourceV[3].p.i = real_variables[5739];
    coolStack.subStack.cathode_channel.channel.portA[1].p = real_variables[5740];
    coolStack.subStack.anode_channel.channel.gas[2].h_component[1] = real_variables[5741];
    flowCathode.massFlowBoundary.state.X[2] = real_variables[5742];
    coolStack.coolingPipe.htcoeff.Q_s[5] = real_variables[5743];
    coolStack.subStack.anode_channel.channel.gas[2].s_component[1] = real_variables[5744];
    coolStack.subStack.cathode_channel.channel.friction[2].dA = real_variables[5745];
    coolStack.subStack.anode_channel.channel.reaction.X_in[3,4] = real_variables[5746];
    coolStack.subStack.cell.waterContent.lambda[2] = real_variables[5747];
    coolStack.subStack.cell.cathode[3].h_component[1] = real_variables[5749];
    coolStack.subStack.cell.waterContent.lambda[1] = real_variables[5751];
    coolStack.subStack.anode_channel.channel.TB = real_variables[5752];
    coolStack.subStack.cell.activationLoss.E_loss_stack[4] = real_variables[5753];
    coolStack.subStack.anode_channel.channel.gas[3].s_component[3] = real_variables[5754];
    coolStack.subStack.cathode_channel.channel.htcoeff[2].stateB.X[2] = real_variables[5755];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[2,4] = real_variables[5756];
    coolStack.coolingPipe.sat[1].cp_vap = real_variables[5757];
    coolStack.subStack.cell.anode[2].Xi[1] = real_variables[5758];
    coolStack.summary.T_cool[5] = real_variables[5759];
    dp_cath_variation.y[1] = real_variables[5760];
    coolStack.subStack.cathode_channel.channel.gas[3].X[1] = real_variables[5761];
    coolStack.subStack.cell.p_cath_partial[1,3] = real_variables[5762];
    coolStack.coolingPipe.sat[3].eta_liq = real_variables[5763];
    coolStack.subStack.anode_channel.channel.gas[4].u_comp[3] = real_variables[5765];
    coolStack.summary.m_flow_cool = real_variables[5766];
    coolStack.subStack.cell.activationLoss.pin_n[5].v = real_variables[5768];
    coolStack.subStack.anode_channel.channel.gas[5].p_bar = real_variables[5769];
    coolStack.coolingPipe.htcoeff.Pr[5] = real_variables[5770];
    coolStack.subStack.anode_channel.wall[3].Q_flow = real_variables[5771];
    coolStack.subStack.cell.anode[3].X[2] = real_variables[5772];
    coolStack.coolingPipe.sat[4].lam_vap = real_variables[5773];
    coolStack.subStack.cathode_channel.channel.reaction.log10_y_out[5,5] = real_variables[5774];
    coolStack.subStack.cathode_channel.channel.reaction.g_formation[2,4] = real_variables[5775];
    coolStack.subStack.cathode_channel.channel.htcoeff[3].stateA.p = real_variables[5776];
    coolStack.subStack.cathode_channel.channel.friction[1].stateA_inflow.T = real_variables[5777];
    coolStack.subStack.anode_channel.channel.friction[1].m_flow = real_variables[5778];
    coolStack.subStack.cell.anode[5].Xi[2] = real_variables[5779];
    coolStack.subStack.cell.waterDiffusion.D_diff[3] = real_variables[5780];
    coolStack.coolingPipe.Fr[1] = real_variables[5781];
    flowCathode.massFlowBoundary.X_in[4] = real_variables[5782];
    display_an_in.y[2] = real_variables[5783];
    sourceW.m_flow_in = real_variables[5784];
    gasSensor3.portA.X_outflow[4] = real_variables[5785];
    coolStack.subStack.cell.cathode[2].u_comp[1] = real_variables[5786];
    coolStack.subStack.anode_channel.channel.friction[2].stateB_inflow.X[1] = real_variables[5787];
    coolStack.subStack.cathode_channel.channel.gas[5].Z[5] = real_variables[5788];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB.X[3] = real_variables[5789];
    coolStack.subStack.cathode_channel.channel.gas[5].u = real_variables[5790];
    coolStack.subStack.anode_channel.channel.gas[5].h_component[3] = real_variables[5791];
    coolStack.subStack.cathode_channel.channel.gas[3].Xi[1] = real_variables[5792];
    coolStack.subStack.cell.y_an[2,4] = real_variables[5794];
    coolStack.subStack.cell.mX_flow_cath_reac[5,3] = real_variables[5795];
    gasSensor4.portB.X_outflow[4] = real_variables[5796];
    coolStack.subStack.cell.contaminantsLoss.y_an[3,3] = real_variables[5797];
    coolStack.subStack.anode_channel.channel.gas[1].h_component[2] = real_variables[5798];
    coolStack.subStack.cell.anode[2].ddx[2] = real_variables[5799];
    coolStack.subStack.cathode_channel.channel.MX[1,1] = real_variables[5800];
    coolStack.coolingPipe.friction.sat[2].eta_vap = real_variables[5802];
    display_phTmdot_an_out.y.enthalpy = real_variables[5803];
    coolStack.subStack.cathode_channel.channel.gas[3].u_comp[1] = real_variables[5804];
    coolStack.subStack.anode_channel.channel.reaction.Zx_flow[4,2] = real_variables[5805];
    coolStack.coolingPipe.drhodx[1] = real_variables[5806];
    coolStack.subStack.cell.anode[1].h_component[4] = real_variables[5807];
    coolStack.subStack.anode_channel.channel.gas[5].X[1] = real_variables[5808];
    coolStack.subStack.cell.cathode[2].p_bar = real_variables[5809];
    coolStack.subStack.cathode_channel.channel.htcoeff[1].stateB_out.X[1] = real_variables[5810];
    coolStack.subStack.cathode_channel.channel.reaction.T[4] = real_variables[5811];
    coolStack.subStack.cell.anode[4].MM = real_variables[5812];
    coolStack.coolingPipe.state[4].p = real_variables[5813];
    coolStack.subStack.cell.cathode[2].Xi[1] = real_variables[5814];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[4,2] = real_variables[5815];
    display_an_out.y[3] = real_variables[5816];
    coolStack.coolingPipe.friction.sigma[1] = real_variables[5817];
    coolStack.subStack.cell.ohmicLoss.pin_n[3].v = real_variables[5818];
    coolStack.subStack.cell.anode[4].state.p = real_variables[5819];
    coolStack.subStack.cell.anode[5].ddx[4] = real_variables[5820];
    gasSensor1.state.p = real_variables[5821];
    gasSensor3.state.p = real_variables[5822];
    coolStack.subStack.anode_channel.channel.friction[1].stateB_inflow.X[2] = real_variables[5823];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[1,4] = real_variables[5824];
    coolStack.subStack.cathode_channel.channel.reaction.X_out[1,1] = real_variables[5825];
    coolStack.subStack.cell.anode[1].state.X[3] = real_variables[5826];
    coolStack.subStack.cathode_channel.channel.reaction.Zx[5,5] = real_variables[5827];
    coolStack.subStack.anode_channel.channel.reaction.X_in[1,2] = real_variables[5828];
    coolStack.subStack.cell.waterDiffusion.T_an[1] = real_variables[5829];
    coolStack.subStack.anode_channel.port[2].X[1] = real_variables[5830];
    coolStack.subStack.anode_channel.channel.reaction.X_in[4,3] = real_variables[5831];
    coolStack.subStack.anode_channel.channel.gas[3].g_formation[4] = real_variables[5832];
    coolStack.coolingPipe.p_sat[1] = real_variables[5833];
    coolStack.coolingPipe.x[2] = real_variables[5834];
    coolStack.subStack.cell.port_cath[4].p = real_variables[5835];
    coolStack.subStack.cathode_channel.channel.gas[2].u_comp[2] = real_variables[5836];
    coolStack.subStack.anode_channel.channel.gas[2].Xi[4] = real_variables[5837];
    coolStack.subStack.anode_channel.channel.gas[2].g_formation[3] = real_variables[5838];
    coolStack.subStack.cell.cathode[5].s_component[4] = real_variables[5840];
    coolStack.coolingPipe.sat[3].d_vap = real_variables[5842];
    coolStack.subStack.anode_channel.channel.MX[4,1] = real_variables[5843];
    coolStack.subStack.anode_channel.channel.gas[4].u_comp[2] = real_variables[5844];
    coolStack.subStack.cathode_channel.channel.friction[4].stateA_inflow.T = real_variables[5845];
    coolStack.subStack.cell.anode[4].u_comp[3] = real_variables[5846];
    coolStack.subStack.cathode_channel.channel.gas[4].Xi[2] = real_variables[5847];
    coolStack.coolingPipe.h_liq[5] = real_variables[5848];
    coolStack.subStack.cathode_channel.channel.reaction.Zx_flow[5,1] = real_variables[5849];
    coolStack.subStack.cathode_channel.channel.friction[3].stateA_outflow.T = real_variables[5850];
    coolStack.coolingPipe.htcoeff.sat[2].d_liq = real_variables[5851];
    coolStack.subStack.cell.sourceV[3].v = real_variables[5853];
    coolStack.subStack.cell.gasDiffusion.T_an[5] = real_variables[5854];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB.X[4] = real_variables[5855];
    coolStack.subStack.cathode_channel.channel.T[2] = real_variables[5856];
    coolStack.subStack.anode_channel.channel.reaction.Zx[1,4] = real_variables[5857];
    coolStack.subStack.anode_channel.port[3].H_flow = real_variables[5858];
    multiDisplaySensor4.multiDisplaySensor.portB.m_flow = real_variables[5859];
    coolStack.subStack.cathode_channel.channel.friction[5].stateB_outflow.X[2] = real_variables[5860];
    coolStack.subStack.cell.anode[4].state.X[4] = real_variables[5861];
    coolStack.subStack.cell.concentrationLoss.j_ionic[2] = real_variables[5862];
    coolStack.subStack.cathode_channel.channel.gas[5].h_component[2] = real_variables[5863];
    coolStack.subStack.cell.cathode[1].Z[2] = real_variables[5864];
    coolStack.subStack.cell.anode[2].state.X[3] = real_variables[5866];
    display_phTmdot_cath_in.mdot = real_variables[5867];
    coolStack.subStack.drain_anode.X_outflow[4] = real_variables[5868];
    coolStack.subStack.anode_channel.channel.gas[5].ddpT = real_variables[5870];
    coolStack.subStack.anode_channel.channel.htcoeff[5].Pr = real_variables[5871];
    coolStack.subStack.cell.contaminantsLoss.p_an_partial[4,4] = real_variables[5872];
    coolStack.subStack.T_stack[1] = real_variables[5873];
    coolStack.subStack.cell.cathode[1].X[2] = real_variables[5874];
    coolStack.subStack.cell.y_cath[4,2] = real_variables[5875];
    coolStack.subStack.cell.port_an[4].X[4] = real_variables[5876];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[3,2] = real_variables[5877];
    coolStack.subStack.cathode_channel.channel.state[6].X[2] = real_variables[5879];
    coolStack.coolingPipe.htcoeff.m_flow[3] = real_variables[5880];
    coolStack.subStack.cathode_channel.port[4].mX_flow[5] = real_variables[5882];
    coolStack.subStack.cell.anode[3].g_formation[4] = real_variables[5883];
    coolStack.coolingPipe.h_vap[6] = real_variables[5884];
    coolStack.subStack.cell.cathode[5].p = real_variables[5886];
    coolStack.subStack.anode_channel.channel.htcoeff[1].stateB.T = real_variables[5887];
    coolStack.subStack.cathode_channel.channel.gas[3].h_component[1] = real_variables[5888];
    gasSensor4.portB.X_outflow[5] = real_variables[5889];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_real[4,2] = real_variables[5891];
    coolStack.subStack.cell.waterDiffusion.p_an_partial[4,2] = real_variables[5892];
    sinkCathode.fluidPort.p = real_variables[5893];
    display_cath_out.X_Ar = real_variables[5894];
    coolStack.subStack.anode_channel.channel.friction[3].stateB_inflow.X[1] = real_variables[5895];
    coolStack.coolingPipe.friction.sat[6].x = real_variables[5898];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_inflow.X[2] = real_variables[5899];
    coolStack.subStack.anode_channel.channel.dUdt = real_variables[5900];
    coolStack.subStack.anode_channel.channel.reaction.check_X_out_rescaled[3] = real_variables[5902];
    coolStack.subStack.cell.pin_n.i = real_variables[5903];
    coolStack.subStack.cell.electroOsmoticDrag.p_cath_partial[1,1] = real_variables[5904];
    coolStack.coolingPipe.d[4] = real_variables[5906];
    coolStack.subStack.cathode_channel.channel.gas[4].u_comp[1] = real_variables[5908];
    coolStack.subStack.cathode_channel.port[1].X[3] = real_variables[5910];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[1,5] = real_variables[5911];
    coolStack.subStack.anode_channel.channel.reaction.g_formation[3,4] = real_variables[5912];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].stateB_out.X[3] = real_variables[5913];
    coolStack.subStack.cathode_channel.channel.reaction.X_out_rescaled[4,1] = real_variables[5914];
    coolStack.subStack.cell.anode[3].X[4] = real_variables[5915];
    display_phTmdot_w_out.y.X[1] = real_variables[5916];
    coolStack.subStack.cell.waterContent.p_cath_partial[5,5] = real_variables[5917];
    coolStack.subStack.anode_channel.channel.gas[2].Rg = real_variables[5919];
    coolStack.coolingPipe.cv[5] = real_variables[5920];
    coolStack.subStack.cell.cathode[3].state.X[3] = real_variables[5921];
    multiDisplaySensor1.portA.m_flow = real_variables[5922];
    coolStack.subStack.cathode_channel.channel.gas[3].Z[5] = real_variables[5923];
    humidification_an.RH = real_variables[5924];
    coolStack.subStack.cathode_channel.channel.friction[2].dB = real_variables[5925];
    coolStack.subStack.cell.anode[2].u_comp[1] = real_variables[5927];
    coolStack.subStack.cathode_channel.channel.friction[2].stateB_outflow.p = real_variables[5928];
    coolStack.subStack.cell.ohmicLoss.pin_n[4].i = real_variables[5929];
    coolStack.subStack.anode_channel.channel.htcoeff[2].cp = real_variables[5930];
    coolStack.subStack.drain_cathode.h_outflow = real_variables[5931];
    coolStack.subStack.anode_channel.channel.htcoeff[3].stateB_out.T = real_variables[5932];
    coolStack.subStack.X_feed_an[3] = real_variables[5933];
    coolStack.coolingPipe.Re[3] = real_variables[5934];
    coolStack.subStack.cell.contaminantsLoss.T_cell[1] = real_variables[5935];
    coolStack.coolingPipe.satA.eta_vap = real_variables[5936];
    coolStack.coolingPipe.T[3] = real_variables[5937];
    coolStack.subStack.cathode_channel.channel.q[4].T = real_variables[5938];
    coolStack.subStack.cathode_channel.channel.reaction.y_out[1,3] = real_variables[5939];
    coolStack.subStack.cell.contaminantsLoss.y_an[1,3] = real_variables[5940];
    coolStack.subStack.cell.p_an[3] = real_variables[5942];
    coolStack.subStack.anode_channel.channel.friction[4].stateB_inflow.X[3] = real_variables[5943];
    coolStack.subStack.cathode_channel.channel.reaction.p[2] = real_variables[5944];
    coolStack.subStack.cell.cathode[2].ddx[4] = real_variables[5945];
    flowCathode.massFlowBoundary.h_set = real_variables[5946];
    humidification_an.m_flow_wet_in = real_variables[5947];
    coolStack.summary.m_flow_an = real_variables[5948];
    coolStack.subStack.anode_channel.channel.reaction.mX_flow[4,2] = real_variables[5949];
    display_an_out.data.X[2] = real_variables[5950];
    coolStack.subStack.cell.anode[1].ddpT = real_variables[5951];
    coolStack.subStack.cell.waterContent.T_cell[1] = real_variables[5952];
    coolStack.subStack.anode_channel.channel.reaction.X_out[3,3] = real_variables[5953];
    coolStack.subStack.anode_channel.channel.reaction.X_out_real[1,1] = real_variables[5954];
    coolStack.coolingPipe.friction.sat[5].d_vap = real_variables[5955];
    coolStack.subStack.cell.cathode[2].ddx[5] = real_variables[5956];
    coolStack.subStack.anode_channel.channel.friction[3].stateA_inflow.X[2] = real_variables[5957];
    coolStack.subStack.anode_channel.channel.reaction.X_out[2,2] = real_variables[5959];
    coolStack.subStack.cell.anode[3].dUZT[3] = real_variables[5960];
    coolStack.subStack.drain_anode.X_outflow[3] = real_variables[5961];
    coolStack.subStack.cathode_channel.channel.dUdt = real_variables[5962];
    coolStack.subStack.cell.gasDiffusion.T_an[1] = real_variables[5963];
    coolStack.subStack.cell.waterContent.lambda_an[1] = real_variables[5964];
    coolStack.subStack.anode_channel.channel.gas[4].g_formation[2] = real_variables[5965];
    coolStack.subStack.anode_channel.port[1].mX_flow[2] = real_variables[5966];
    sinkAnode.pressureBoundary.X_in[3] = real_variables[5967];
    coolStack.subStack.cathode_channel.channel.gas[4].s_component[3] = real_variables[5968];
    coolStack.subStack.cell.gasDiffusion.lambda[3] = real_variables[5969];
    gasSensor3.u.X[2] = real_variables[5970];
    coolStack.subStack.cathode_channel.port[5].X[3] = real_variables[5971];
    flowCathode.massFlowBoundary.fluidPort.X_outflow[3] = real_variables[5972];
    coolStack.subStack.cell.wall_cath[5].T = real_variables[5974];
    coolStack.subStack.cell.cathode[3].g_formation[5] = real_variables[5975];
    coolStack.subStack.cell.cathode[4].s_component[1] = real_variables[5976];
    coolStack.subStack.cathode_channel.channel.gas[5].dUZT[2] = real_variables[5977];
    coolStack.coolingPipe.htcoeff.Fr[3] = real_variables[5978];
    coolStack.subStack.cathode_channel.channel.htcoeff[4].Pr = real_variables[5980];
    y = real_variables[5981];
    annotation(__Modelon(FMU_IMPORT_VERSION = "0.1.0"),Icon(coordinateSystem(preserveAspectRatio = false,extent = {{-100,-150},{100,150}}),graphics = {Rectangle(origin={0,0},extent={{-100,150},{100,-150}},fillPattern=FillPattern.Solid,fillColor={255,255,255}),Bitmap(extent={{-90,-100},{90,100}},fileName="modelica://Aging/Resources/Icons/fmumodelica/CoolStack_variablepressure_humidified_PID5_fmu_db768d8e.png"),Text(textString="%name",lineColor={61,61,61},origin={0,-185},extent={{0,25},{0,-25}})}),Documentation(info = "<html>
<h4>ModelDescription Attributes</h4>
<li>fmiVersion = 2.0</li>
<li>modelName = PEMFCModel2.CoolStack_variablepressure_humidified_PID5_fmu</li>
<li>generationTool = Optimica Compiler Toolkit</li>
<li>generationDateAndTime = 2025-01-31, 11:20:07</li>
</ul>
</html>"));
end PEMFCModel2_CoolStack_variablepressure_humidified_PID5_fmu;
